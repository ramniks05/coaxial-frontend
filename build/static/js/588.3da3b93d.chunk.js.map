{"version":3,"file":"static/js/588.3da3b93d.chunk.js","mappings":"sOAOA,MAAMA,EAAWC,IAOV,IAPW,KAChBC,EAAI,SACJC,EAAW,OAAM,OACjBC,EAAM,SACNC,EAAQ,OACRC,EAAS,GAAE,OACXC,EAAS,IACVN,EACC,MAsEMO,EAAqBA,IAClBN,EAAKO,YAGRC,EAAeA,IACZR,EAAKS,cAGd,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAAD,SAzBYE,MAClB,OAAQb,GACN,IAAK,UACH,OAAOD,EAAKe,aAAef,EAAKgB,KAClC,IAAK,QACH,OAAOhB,EAAKiB,WAAajB,EAAKgB,KAGhC,QACE,OAAOhB,EAAKgB,OAgBLF,MACLJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,QAAMF,UAAS,gBAAAO,OAAkBlB,EAAKmB,SAAW,SAAW,YAAaP,SACtEZ,EAAKmB,SAAW,SAAW,aAE7Bd,EAAOe,IAtDGC,IACnB,MAAM,IAAEC,EAAG,MAAEC,EAAK,MAAEC,EAAK,UAAEC,EAAS,MAAEC,EAAK,KAAEC,GAASN,EAEtD,GAAII,IAAcA,EAAUzB,GAC1B,OAAO,KAGT,MAAM4B,EAAaJ,GAASxB,EAAKsB,GAEjC,OAAKM,GAKHlB,EAAAA,EAAAA,MAAA,QAEEC,UAAU,kBACVe,MAAOA,EAAMd,SAAA,CAEZe,EAAK,IAAEC,IAJHN,GALA,cA+CLZ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,yBACVkB,QA7FSC,KACb5B,GACFA,EAAOF,IA2FmBY,SACrB,UAGDC,EAAAA,EAAAA,KAAA,UACEF,UAAU,wBACVkB,QA7FWE,KACf5B,GACFA,EAASH,EAAKgC,KA2FcpB,SACvB,kBAMLF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CAC1BN,MACCO,EAAAA,EAAAA,KAAA,KAAGF,UAAU,cAAaC,SAAEN,MAG7BF,EAAOgB,IAnGOa,IACnB,MAAM,IAAEX,EAAG,MAAEC,EAAK,MAAEC,EAAK,UAAEC,GAAcQ,EAEzC,GAAIR,IAAcA,EAAUzB,GAC1B,OAAO,KAIT,MAAMkC,EAA8B,oBAAVV,EAAuBA,EAAMxB,GAASwB,GAASxB,EAAKsB,GAE9E,OAAKY,GAKHxB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,UAAAE,SAAA,CAASW,EAAM,OAAU,IAAEW,IADrBZ,GAJD,WA2FPT,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,aAAYC,SAAA,CAAC,YAClB,IAAIuB,KAAKnC,EAAKoC,WAAWC,qBAClC7B,MACCE,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,OAAKJ,gBAm/CvB,EA3+C0B8B,KAAO,IAADC,EAAAC,EAAAC,EAC9B,MAAM,MAAEC,EAAK,gBAAEC,IAAoBC,EAAAA,EAAAA,OAC5BC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,IAClCO,EAAWC,IAAgBR,EAAAA,EAAAA,UAAS,OAEpCS,EAAoBC,IAAyBV,EAAAA,EAAAA,UAAS,KACtDW,EAAgBC,IAAqBZ,EAAAA,EAAAA,UAAS,KAC9Ca,EAAeC,IAAoBd,EAAAA,EAAAA,UAAS,KAC5Ce,EAAcC,IAAmBhB,EAAAA,EAAAA,UAAS,KAC1CiB,EAAgBC,IAAqBlB,EAAAA,EAAAA,WAAS,IAE9CmB,EAAUC,IAAepB,EAAAA,EAAAA,UAAS,CACvC/B,KAAM,GACNT,YAAa,GACb6D,gBAAiB,GACjBC,WAAY,CAAErC,GAAI,IAClBsC,OAAQ,CAAEtC,GAAI,IACduC,MAAO,CAAEvC,GAAI,IACbwC,KAAM,CAAExC,GAAI,IACZyC,aAAc,GACdtD,UAAU,KAGLuD,EAASC,IAAc5B,EAAAA,EAAAA,UAAS,KAChC6B,EAASC,IAAc9B,EAAAA,EAAAA,UAAS,KAChC+B,EAAOC,IAAYhC,EAAAA,EAAAA,UAAS,KAC5BiC,EAAiBC,IAAsBlC,EAAAA,EAAAA,UAAS,KAChDmC,EAAiBC,IAAsBpC,EAAAA,EAAAA,UAAS,KAChDqC,EAAeC,IAAoBtC,EAAAA,EAAAA,UAAS,KAC5CuC,EAAgBC,IAAqBxC,EAAAA,EAAAA,UAAS,KAC9CyC,EAAeC,IAAoB1C,EAAAA,EAAAA,UAAS,CACjD2B,SAAS,EACTE,SAAS,EACTE,OAAO,EACPQ,gBAAgB,IAIZI,GAAsBC,EAAAA,EAAAA,QAAO,MAC7BC,GAAsBD,EAAAA,EAAAA,QAAO,CAAEE,KAAM,KAAMC,GAAI,IAC/CC,GAAmBJ,EAAAA,EAAAA,QAAO,MAC1BK,GAAmBL,EAAAA,EAAAA,QAAO,IAAIM,KAC9BC,IAAqBP,EAAAA,EAAAA,QAAO,IAC5BQ,IAAoBR,EAAAA,EAAAA,QAAO,IAGjCS,EAAAA,EAAAA,WAAU,IACD,KACL,GAAIV,EAAoBW,QACtB,IAAMX,EAAoBW,QAAQC,OAAS,CAAE,MAAMC,GAAI,CAEzD,GAAIR,EAAiBM,QACnB,IAAMN,EAAiBM,QAAQC,OAAS,CAAE,MAAMC,GAAI,GAGvD,IAEH,MAAMC,IAAqBb,EAAAA,EAAAA,SAAO,IAClCS,EAAAA,EAAAA,WAAU,KACH1D,IAAS8D,GAAmBH,UACjCG,GAAmBH,SAAU,EAC7BI,KAEA,WACE,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,IAAsBjE,EAAO,CAAC,GAE/CkE,EAAOC,MAAMC,QAAQJ,GAAYA,GAAoB,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUK,WAAmB,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAUb,OAAQ,GAE1F/C,EAAY8D,GAAQ,IAEpBZ,EAAiBK,QAAQW,IAAI,eAAgB,CAAEnB,KAAMe,GAAQ,GAAId,GAAI3D,KAAK8E,QAC1EC,QAAQC,IAAI,6CAA8CP,GAAQ,IAAIQ,OACxE,CAAE,MAAOC,GACPH,QAAQI,KAAK,gCAAiC,OAADD,QAAC,IAADA,OAAC,EAADA,EAAGE,UAAWF,EAC7D,CACD,EAbD,KAcC,CAAC3E,IAGJ,MAAM8E,IAAqB7B,EAAAA,EAAAA,SAAO,GAC5B8B,IAAiB9B,EAAAA,EAAAA,SAAO,GACxB+B,IAAgB/B,EAAAA,EAAAA,SAAO,GACvBgC,IAAehC,EAAAA,EAAAA,SAAO,GACtBiC,IAAiBjC,EAAAA,EAAAA,SAAO,IAG9BS,EAAAA,EAAAA,WAAU,KACR,GAAKoB,GAAmBnB,QAKxB,GAJAa,QAAQC,IAAI,qCACZD,QAAQC,IAAI,gCAAiC3D,GAC7C0D,QAAQC,IAAI,oCAAqC3D,GACjD0D,QAAQC,IAAI,+BAAkD,OAAlB3D,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB4D,QAC5D5D,EAAoB,CACtB,MAAMqE,EAAeC,SAAStE,GAC9B0D,QAAQC,IAAI,qCAAsCU,GAGlDE,GAAyBF,GAGzBlE,EAAkB,IAClBE,EAAiB,IACjBE,EAAgB,IAChBoB,EAAmB,IACnBE,EAAiB,IAEjBvC,EAAY,IAGZ,WACE,IACEoE,QAAQC,IAAI,iFAAkFU,GAC9F/E,EAAY,IACZ,MAAM+C,QAAac,EAAAA,EAAAA,IAAsBjE,EAAO,CAAEmF,iBAC5CG,EAAQnB,MAAMC,QAAQjB,GAAQA,GAAY,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMkB,WAAe,OAAJlB,QAAI,IAAJA,OAAI,EAAJA,EAAMA,OAAQ,GAE3E/C,EAAY+D,MAAMC,QAAQkB,GAASA,EAAQ,GAC7C,CAAE,MAAOX,GACPH,QAAQI,KAAK,wCAAyC,OAADD,QAAC,IAADA,OAAC,EAADA,EAAGE,UAAWF,EACrE,CACD,EAXD,EAYF,MACEH,QAAQC,IAAI,yEACZlC,EAAmB4B,MAAMC,QAAQpC,GAAWA,EAAU,IACtDa,EAAkB,IAClB5B,EAAkB,IAClBE,EAAiB,IACjBE,EAAgB,IAChBoB,EAAmB,IACnBE,EAAiB,IAEjBvC,EAAY,SA5CqB0E,GAAmBnB,SAAU,GA+C/D,CAAC7C,EAAoBQ,KAGxBoC,EAAAA,EAAAA,WAAU,KACR,GAAKqB,GAAepB,QACpB,GAAI3C,EAAgB,CAClB,MAAMuE,EAAWH,SAASpE,GACpBmE,EAAerE,EAAqBsE,SAAStE,GAAsB,KACzE0D,QAAQC,IAAI,gCACZD,QAAQC,IAAI,2BAA4Bc,EAAU,eAAgBJ,GAClEX,QAAQC,IAAI,yEAA0Ec,EAAUJ,GAGhGK,GAA6BL,EAAcI,GAG3CpE,EAAiB,IACjBE,EAAgB,IAEhBjB,EAAY,IAGZ,WACE,IACE,MAAM+C,QAAac,EAAAA,EAAAA,IAAsBjE,EAAO,CAAEuF,WAAUJ,iBACtDG,EAAQnB,MAAMC,QAAQjB,GAAQA,GAAY,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMkB,WAAe,OAAJlB,QAAI,IAAJA,OAAI,EAAJA,EAAMA,OAAQ,GAC3E/C,EAAY+D,MAAMC,QAAQkB,GAASA,EAAQ,GAC7C,CAAE,MAAOX,GACPH,QAAQI,KAAK,mDAAoD,OAADD,QAAC,IAADA,OAAC,EAADA,EAAGE,UAAWF,GAC9EvE,EAAY,GACd,CACD,EATD,EAUF,MACEqC,EAAmB,IACnBE,EAAiB,IACjBxB,EAAiB,IACjBE,EAAgB,SAhCa0D,GAAepB,SAAU,GAoCvD,CAAC3C,EAAgBF,EAAoBQ,KAGxCoC,EAAAA,EAAAA,WAAU,KACR,GAAKsB,GAAcrB,SACnB,GAAIzC,EAAe,CACjB,MAAMuE,EAAUL,SAASlE,GACzBsD,QAAQC,IAAI,0BAA2BgB,GAGvCpE,EAAgB,IAEhBI,EAAYiE,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAI,IACPpH,KAAM,GACNT,YAAa,GACb6D,gBAAiB,MAInB,MAAMyD,EAAerE,EAAqBsE,SAAStE,GAAsB,KACnEyE,EAAWvE,EAAiBoE,SAASpE,GAAkB,KAC7D4E,GAAcT,EAAcI,EAAUE,EAAS,KAAMnE,EACvD,OAnB8B0D,GAAcrB,SAAU,GAqBrD,CAACzC,EAAeJ,EAAoBE,KAGvC0C,EAAAA,EAAAA,WAAU,KACR,GAAKuB,GAAatB,SAClB,GAAIvC,EAAc,CAChB,MAAMyE,EAAST,SAAShE,GACxBoD,QAAQC,IAAI,yBAA0BoB,GAGtC1E,EAAiB,IAEjBM,EAAYiE,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAI,IACPpH,KAAM,GACNT,YAAa,GACb6D,gBAAiB,MAInBtB,EAAY,IAGZ,MAAM+E,EAAerE,EAAqBsE,SAAStE,GAAsB,KACnEyE,EAAWvE,EAAiBoE,SAASpE,GAAkB,KAC7D4E,GAAcT,EAAcI,EAAU,KAAMM,EAAQvE,EACtD,OAtB6B2D,GAAatB,SAAU,GAwBnD,CAACvC,EAAcN,EAAoBE,KAGtC0C,EAAAA,EAAAA,WAAU,KACR,IAAKwB,GAAevB,QAA0C,YAA/BuB,GAAevB,SAAU,GACxDa,QAAQC,IAAI,4BAA6BnD,GACzC,MAAM6D,EAAerE,EAAqBsE,SAAStE,GAAsB,KACnEyE,EAAWvE,EAAiBoE,SAASpE,GAAkB,KACvDyE,EAAUvE,EAAgBkE,SAASlE,GAAiB,KACpD2E,EAASzE,EAAegE,SAAShE,GAAgB,KAGvDwE,GAAcT,EAAcI,EAAUE,EAASI,EAAQvE,IAEtD,CAACA,KAGJoC,EAAAA,EAAAA,WAAU,KACRc,QAAQC,IAAI,iCAAkC7B,GAC9C4B,QAAQC,IAAI,0BAA2B7B,EAAe8B,SACrD,CAAC9B,IAGJ,MA+BMkD,GAhBsBC,MAC1B,MAAMC,EAAU,CAAC,EAYjB,OAVA7F,EAAS8F,QAAQC,IAAY,IAADC,EAC1B,MACMC,EAfiBjB,KACzB,IAAKhB,MAAMC,QAAQ9D,GAEjB,OADAkE,QAAQI,KAAK,+BAAgCtE,GACtC,UAET,MAAMqB,EAAarB,EAAY+F,KAAKC,GAAMA,EAAGhH,KAAO6F,GACpD,OAAOxD,EAAaA,EAAWrD,KAAO,WASbiI,CADFL,EAAQf,eAAkC,QAAtBgB,EAAID,EAAQvE,kBAAU,IAAAwE,OAAA,EAAlBA,EAAoB7G,KAG5D0G,EAAQI,KACXJ,EAAQI,GAAkB,IAE5BJ,EAAQI,GAAgBI,KAAKN,KAGxBF,GAGeD,GAClBU,GAAkBC,OAAOC,KAAKb,IAAiBc,OAW/CvB,GAA2BwB,UAC/B,GAAK1B,GAAiBnF,EAKtB,IAAK,IAAD8G,EACFtC,QAAQC,IAAI,oCAAqCU,GAEjD,MAAMhC,QAAa4D,EAAAA,EAAAA,IAAW/G,EAAOmF,EAAc,EAAG,IAAK,YAAa,QACxEX,QAAQC,IAAI,uDAAwDtB,GACpEqB,QAAQC,IAAI,4BAA6BtB,GACzCqB,QAAQC,IAAI,oBAAqBN,MAAMC,QAAQjB,IAC/CqB,QAAQC,IAAI,0BAA2BtB,EAAKkB,SAC5CG,QAAQC,IAAI,oBAAqBN,MAAMC,QAAQjB,EAAKkB,UACpDG,QAAQC,IAAI,kBAA+B,QAAdqC,EAAE3D,EAAKkB,eAAO,IAAAyC,OAAA,EAAZA,EAAcpC,QAG7C,IAAIsC,EAAe,GACf7C,MAAMC,QAAQjB,GAChB6D,EAAe7D,EACNA,GAAQgB,MAAMC,QAAQjB,EAAKkB,SAEpC2C,EAAe7D,EAAKkB,QACXlB,GAAQgB,MAAMC,QAAQjB,EAAKA,MAEpC6D,EAAe7D,EAAKA,KACXA,GAAQA,EAAKnB,SAAWmC,MAAMC,QAAQjB,EAAKnB,SAEpDgF,EAAe7D,EAAKnB,SAEpBwC,QAAQI,KAAK,6DAA8DzB,GAC3E6D,EAAe,IAGjBxC,QAAQC,IAAI,sDAAuDuC,GACnEzE,EAAmByE,EACrB,CAAE,MAAOC,GACPzC,QAAQyC,MAAM,yCAA0CA,GACxD1E,EAAmB,GACrB,MAtCEA,EAAmB,KAyCjBiD,GAA+BqB,MAAO1B,EAAcI,KACxD,IAAKA,IAAavF,EAGhB,OAFAyC,EAAmB,SACnBE,EAAiB,IAInB,IAAK,IAADuE,EAAAC,EACF3C,QAAQC,IAAI,8CAA+CU,EAAc,UAAWI,GAGpF,MAAO6B,EAAaC,SAAmBC,QAAQC,IAAI,EACjDC,EAAAA,EAAAA,IAAmBxH,EAAOuF,EAAU,EAAG,IAAK,YAAa,SACzDkC,EAAAA,EAAAA,IAAiBzH,EAAOuF,EAAU,EAAG,IAAK,YAAa,UAGzDf,QAAQC,IAAI,2DAA4D2C,GACxE5C,QAAQC,IAAI,yDAA0D4C,GACtE7C,QAAQC,IAAI,kCAAmC2C,EAAY/C,SAC3DG,QAAQC,IAAI,0BAA8C,QAArByC,EAAEE,EAAY/C,eAAO,IAAA6C,OAAA,EAAnBA,EAAqBxC,QAC5DF,QAAQC,IAAI,gCAAiC4C,EAAUhD,SACvDG,QAAQC,IAAI,wBAA0C,QAAnB0C,EAAEE,EAAUhD,eAAO,IAAA8C,OAAA,EAAjBA,EAAmBzC,QAGxD,IAAIgD,EAAe,GACfvD,MAAMC,QAAQgD,GAChBM,EAAeN,EACNA,GAAejD,MAAMC,QAAQgD,EAAY/C,SAClDqD,EAAeN,EAAY/C,QAClB+C,GAAejD,MAAMC,QAAQgD,EAAYjE,MAClDuE,EAAeN,EAAYjE,KAClBiE,GAAeA,EAAYlF,SAAWiC,MAAMC,QAAQgD,EAAYlF,SACzEwF,EAAeN,EAAYlF,SAE3BsC,QAAQI,KAAK,iEAAkEwC,GAC/EM,EAAe,IAIjB,IAAIC,EAAa,GACbxD,MAAMC,QAAQiD,GAChBM,EAAaN,EACJA,GAAalD,MAAMC,QAAQiD,EAAUhD,SAC9CsD,EAAaN,EAAUhD,QACdgD,GAAalD,MAAMC,QAAQiD,EAAUlE,MAC9CwE,EAAaN,EAAUlE,KACdkE,GAAaA,EAAUjF,OAAS+B,MAAMC,QAAQiD,EAAUjF,OACjEuF,EAAaN,EAAUjF,OAEvBoC,QAAQI,KAAK,+DAAgEyC,GAC7EM,EAAa,IAGfnD,QAAQC,IAAI,0DAA2DiD,GACvElD,QAAQC,IAAI,wDAAyDkD,GAErElF,EAAmBiF,GACnB/E,EAAiBgF,EACnB,CAAE,MAAOV,GACPzC,QAAQyC,MAAM,8CAA+CA,GAC7DxE,EAAmB,IACnBE,EAAiB,GACnB,GAsCIoB,GAAY8C,UAChB,IAAK,IAADe,EACFnH,GAAW,GAEX,IAAIoH,EAAkB,KACtB,MAAMtD,EAAM9E,KAAK8E,MACjB,GAAIrB,EAAoBS,QAAQR,MAAQoB,EAAMrB,EAAoBS,QAAQP,GAAK,IAC7EyE,EAAkB3E,EAAoBS,QAAQR,SACzC,CACL,GAAIH,EAAoBW,QACtB,IAAMX,EAAoBW,QAAQC,OAAS,CAAE,MAAMC,GAAI,CAIzDb,EAAoBW,QAAU,IAAImE,gBAClCD,QAAwBE,EAAAA,EAAAA,IAAqB/H,GAC7CkD,EAAoBS,QAAU,CAAER,KAAM0E,EAAiBzE,GAAImB,EAC7D,CAGAnE,EAAY,IAEZoE,QAAQC,IAAI,oDAAqDoD,GACjErD,QAAQC,IAAI,gCAAiCoD,GAC7CrD,QAAQC,IAAI,wBAAyBN,MAAMC,QAAQyD,IAGnD,IAAIG,EAAmB,GACnB7D,MAAMC,QAAQyD,GAChBG,EAAmBH,EACVA,GAAmB1D,MAAMC,QAAQyD,EAAgBxD,SAE1D2D,EAAmBH,EAAgBxD,QAC1BwD,GAAmB1D,MAAMC,QAAQyD,EAAgB1E,MAE1D6E,EAAmBH,EAAgB1E,KAC1B0E,GAAmBA,EAAgBvH,aAAe6D,MAAMC,QAAQyD,EAAgBvH,aAEzF0H,EAAmBH,EAAgBvH,aAEnCkE,QAAQI,KAAK,0DAA2DiD,GACxEG,EAAmB,IAGrBxD,QAAQC,IAAI,mDAAoDuD,GAChEzH,EAAeyH,GACf/F,EAAW,IACXE,EAAW,IACXE,EAAS,IAGTE,EAAmB,IACnBE,EAAmB,IACnBE,EAAiB,IAGjB6B,QAAQC,IAAI,0CACZD,QAAQC,IAAI,yBAA0BoD,GACtCrD,QAAQC,IAAI,4BAA6BoD,GACzCrD,QAAQC,IAAI,yBAA0BN,MAAMC,QAAQyD,IACpDrD,QAAQC,IAAI,uBAAuC,QAAjBmD,EAAEC,SAAe,IAAAD,OAAA,EAAfA,EAAiBlD,QACrDF,QAAQC,IAAI,oFACZD,QAAQC,IAAI,wCACd,CAAE,MAAOwC,GACPzC,QAAQyC,MAAM,uBAAwBA,EACxC,CAAC,QACCxG,GAAW,EACb,GAGImF,GAAgBiB,iBAA+F,IAAxF1B,EAAY8C,UAAAvD,OAAA,QAAAwD,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAM1C,EAAQ0C,UAAAvD,OAAA,QAAAwD,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAMxC,EAAOwC,UAAAvD,OAAA,QAAAwD,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAMpC,EAAMoC,UAAAvD,OAAA,QAAAwD,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAME,EAAMF,UAAAvD,OAAA,QAAAwD,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACzG,IAAK,IAADG,EAAAC,EAMF,GALA5H,GAAW,GACX+D,QAAQC,IAAI,gCACZD,QAAQC,IAAI,qCAAsC,CAAEU,eAAcI,WAAUE,UAASI,SAAQsC,WAC7F3D,QAAQC,IAAI,qBAAsBzE,IAE7BmF,IAAiBI,IAAaE,IAAYI,EAG7C,OAFArB,QAAQC,IAAI,wDACZrE,EAAY,IAId,MAAMxB,EAAG,MAAAJ,OAAS2G,GAAgB,GAAE,OAAA3G,OAAM+G,GAAY,GAAE,QAAA/G,OAAOiH,GAAW,GAAE,OAAAjH,OAAMqH,GAAU,GAAE,OAAArH,OAAM2J,EAAS,IAAM,KAC7G5D,EAAM9E,KAAK8E,MACX+D,EAAShF,EAAiBK,QAAQ4E,IAAI3J,GAC5C,IAAIuE,EACJ,GAAImF,GAAU/D,EAAM+D,EAAOlF,GAAK,IAC9BD,EAAOmF,EAAOnF,UAEd,GAAIvE,IAAQ4E,GAAmBG,SAAWY,EAAMd,GAAkBE,QAAU,IAE1ER,EAAO,OACF,CACL,GAAIE,EAAiBM,QACnB,IAAMN,EAAiBM,QAAQC,OAAS,CAAE,MAAMC,GAAI,CAEtDR,EAAiBM,QAAU,IAAImE,gBAE/BtE,GAAmBG,QAAU/E,EAC7B6E,GAAkBE,QAAUY,EAE5BpB,QAAac,EAAAA,EAAAA,IAAsBjE,EAAO,CAAEmF,eAAcI,WAAUE,UAASI,SAAQsC,WACrF7E,EAAiBK,QAAQW,IAAI1F,EAAK,CAAEuE,OAAMC,GAAImB,GAChD,CAEFC,QAAQC,IAAI,6BAA8BtB,GAG1C,IAAImC,EAAQnB,MAAMC,QAAQjB,GAAQA,GAAY,QAAJiF,EAAAjF,SAAI,IAAAiF,OAAA,EAAJA,EAAM/D,WAAe,QAARgE,EAAIlF,SAAI,IAAAkF,OAAA,EAAJA,EAAMlF,OAAQ,GACpEgB,MAAMC,QAAQkB,KAAQA,EAAQ,IACnCd,QAAQC,IAAI,mCAAoCa,GAChDlF,EAAYkF,EACd,CAAE,MAAO2B,GACPzC,QAAQyC,MAAM,2BAA4BA,EAC5C,CAAC,QACCxG,GAAW,EACb,CACF,EAiMM+H,GAAYA,KAChB/G,EAAY,CACVnD,KAAM,GACNT,YAAa,GACb8D,WAAY,CAAErC,GAAI,IAClBsC,OAAQ,CAAEtC,GAAI,IACduC,MAAO,CAAEvC,GAAI,IACbwC,KAAM,CAAExC,GAAI,IACZyC,aAAc,GACdtD,UAAU,IAEZoC,EAAa,MACbF,GAAY,GACZsB,EAAW,IACXE,EAAW,IACXE,EAAS,IACTQ,EAAkB,KA+MpB,OACE7E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2GAELC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,kBACVkB,QAASA,IAAMwB,GAAY,GAAMzC,SAClC,sBAOJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,kBAAiBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SACEsK,KAAK,WACLC,QAASpH,EACTqH,SAAWhE,GAAMpD,EAAkBoD,EAAEiE,OAAOF,YAE9CvK,EAAAA,EAAAA,KAAA,QAAAD,SAAM,oBAERC,EAAAA,EAAAA,KAAA,UACEF,UAAU,yBACVkB,QAASA,KACP4B,EAAsB,IACtBE,EAAkB,IAClBE,EAAiB,IACjBE,EAAgB,IAChBkB,EAAmB,IACnBE,EAAmB,IACnBE,EAAiB,KAEnBkG,SAAUrI,EAAQtC,SACnB,4BAMHsC,GAAkC,IAAvBF,EAAYoE,QACvB1G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SAAC,iBAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6BACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,mDAGLF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EAEzBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,qBAAoB5K,SAAC,qBACpCF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,qBACHR,MAAOgC,EACP6H,SAAWhE,GAAM5D,EAAsB4D,EAAEiE,OAAO9J,OAChDb,UAAU,gBAAeC,SAAA,EAEzBC,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAEZ,SAAC,uBAChBiG,MAAMC,QAAQ9D,IAAgBA,EAAYoE,OAAS,EAAIpE,EAAY5B,IAAIiD,IACtExD,EAAAA,EAAAA,KAAA,UAA4BW,MAAO6C,EAAWrC,GAAGpB,SAC9CyD,EAAWrD,MADDqD,EAAWrC,MAIxBnB,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAG+J,UAAQ,EAAA3K,SAAC,mCAMhCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,gBAAe5K,SAAC,gBAC/BF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,gBACHR,MAAOkC,EACP2H,SAAWhE,GAAM1D,EAAkB0D,EAAEiE,OAAO9J,OAC5Cb,UAAU,gBACV4K,UAAW/H,EAAmB5C,SAAA,EAE9BC,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAEZ,SAAC,kBAChBiG,MAAMC,QAAQ9B,IAAoBA,EAAgB5D,IAAIkD,IACrDzD,EAAAA,EAAAA,KAAA,UAAwBW,MAAO8C,EAAOtC,GAAGpB,SACtC0D,EAAOtD,MADGsD,EAAOtC,WAxyBP6F,KAC5B,MAAMxD,EAAarB,EAAY+F,KAAKC,GAAMA,EAAGhH,KAAO8F,SAASD,IAC7D,OAAOxD,GAAcA,EAAWrD,MAAQqD,EAAWrD,KAAKyK,cAAcC,SAAS,aA8yBrEC,CAAqBnI,KACpB9C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,eAAc5K,SAAC,eAC9BF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,eACHR,MAAOoC,EACPyH,SAAWhE,GAAMxD,EAAiBwD,EAAEiE,OAAO9J,OAC3Cb,UAAU,gBACV4K,UAAW7H,EAAe9C,SAAA,EAE1BC,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAEZ,SAAC,iBAChBiG,MAAMC,QAAQ5B,IAAoBA,EAAgB9D,IAAIwK,IACrD/K,EAAAA,EAAAA,KAAA,UAAqBW,MAAOoK,EAAI5J,GAAGpB,SAChCgL,EAAI5K,MADM4K,EAAI5J,WAvoBH6F,KAC/B,MAAMxD,EAAarB,EAAY+F,KAAKC,GAAMA,EAAGhH,KAAO8F,SAASD,IAC7D,OAAOxD,GAAcA,EAAWrD,MAAQqD,EAAWrD,KAAKyK,cAAcC,SAAS,gBA8oBrEG,CAAwBrI,KACvB9C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,cAAa5K,SAAC,cAC7BF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,cACHR,MAAOsC,EACPuH,SAAWhE,GAAMtD,EAAgBsD,EAAEiE,OAAO9J,OAC1Cb,UAAU,gBACV4K,UAAW7H,EAAe9C,SAAA,EAE1BC,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAEZ,SAAC,gBAChBiG,MAAMC,QAAQ1B,IAAkBA,EAAchE,IAAIoD,IACjD3D,EAAAA,EAAAA,KAAA,UAAsBW,MAAOgD,EAAKxC,GAAGpB,SAClC4D,EAAKxD,MADKwD,EAAKxC,iBAWhCoB,IACC1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAK0C,EAAY,eAAiB,qBAClCzC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,yBAAyBkB,QAASqJ,GAAUtK,SAAC,eAKjEF,EAAAA,EAAAA,MAAA,QAAMoL,SAnjBOvC,UACnBlC,EAAE0E,iBACF,IAIE,GAHA5I,GAAW,IAGNe,EAASlD,OAASkD,EAASlD,KAAKgL,OAMnC,YALArJ,EAAgB,CACdwI,KAAM,QACN5D,QAAS,uCACT0E,SAAU,MAKd,IAAK/H,EAASG,WAAWrC,GAMvB,YALAW,EAAgB,CACdwI,KAAM,QACN5D,QAAS,0BACT0E,SAAU,MAMd,MAAMpE,EAAeC,SAAS5D,EAASG,WAAWrC,IAC5CkK,EAAYhI,EAASE,gBAAkB0D,SAAS5D,EAASE,iBAAmB,KAC5E+H,EAAkBjI,EAASO,aAAeqD,SAAS5D,EAASO,cAAgB,EAClF,IAAKyH,EAEH,YADAvJ,EAAgB,CAAEwI,KAAM,QAAS5D,QAAS,0BAA2B0E,SAAU,MAIjF,GAAI3I,EAAW,CAEb,MAAM8I,EAAgB,CACpBpL,KAAMkD,EAASlD,KAAKgL,OACpBzL,YAAa2D,EAAS3D,YAAc2D,EAAS3D,YAAYyL,OAAS,GAClEnE,eACApD,aAAc0H,EACdhL,SAAU+C,EAAS/C,gBAEfkL,EAAAA,EAAAA,IAAc3J,EAAOY,EAAW8I,GACtCzJ,EAAgB,CACdwI,KAAM,UACN5D,QAAS,+BACT0E,SAAU,KAEd,KAAO,CAEL,MAAMK,EAAc,CAAEJ,YAAWzH,aAAc0H,GAC/C,GAAqB,IAAjBtE,EAAoB,CAAC,IAAD0E,EACtB,GAAmB,QAAfA,EAACrI,EAASK,aAAK,IAAAgI,IAAdA,EAAgBvK,GAEnB,YADAW,EAAgB,CAAEwI,KAAM,QAAS5D,QAAS,4CAA6C0E,SAAU,MAGnGK,EAAYnE,QAAUL,SAAS5D,EAASK,MAAMvC,IAC9CsK,EAAYnL,WAAa+C,EAAS/C,QACpC,MAAO,GAAqB,IAAjB0G,EAAoB,CAAC,IAAD2E,EAC7B,GAAkB,QAAdA,EAACtI,EAASM,YAAI,IAAAgI,IAAbA,EAAexK,GAElB,YADAW,EAAgB,CAAEwI,KAAM,QAAS5D,QAAS,4CAA6C0E,SAAU,MAGnGK,EAAY/D,OAAST,SAAS5D,EAASM,KAAKxC,IACxCkC,EAASuI,YAAWH,EAAYG,UAAY3E,SAAS5D,EAASuI,WACpE,KAAO,IAAqB,IAAjB5E,EAST,YADAlF,EAAgB,CAAEwI,KAAM,QAAS5D,QAAS,sCAAuC0E,SAAU,MAR7D,IAADS,EAC7B,GAAoB,QAAhBA,EAACxI,EAASI,cAAM,IAAAoI,IAAfA,EAAiB1K,GAEpB,YADAW,EAAgB,CAAEwI,KAAM,QAAS5D,QAAS,6CAA8C0E,SAAU,MAGpGK,EAAYrE,SAAWH,SAAS5D,EAASI,OAAOtC,SAClB4I,IAA1B1G,EAASyI,eAA4BL,EAAYK,eAAiBzI,EAASyI,aAIjF,OAEMC,EAAAA,EAAAA,IAA0BlK,EAAO4J,GACvC3J,EAAgB,CAAEwI,KAAM,UAAW5D,QAAS,8BAA+B0E,SAAU,KACvF,CAEA5I,GAAY,GACZE,EAAa,MACbY,EAAY,CACVnD,KAAM,GACNT,YAAa,GACb6D,gBAAiB,GACjBC,WAAY,CAAErC,GAAI,IAClBsC,OAAQ,CAAEtC,GAAI,IACduC,MAAO,CAAEvC,GAAI,IACbwC,KAAM,CAAExC,GAAI,IACZyC,aAAc,GACdtD,UAAU,IAGZ,MAAM0L,EAAsBrJ,EAAqBsE,SAAStE,GAAsB,KAC1EsJ,EAAkBpJ,EAAiBoE,SAASpE,GAAkB,KAC9DqJ,EAAiBnJ,EAAgBkE,SAASlE,GAAiB,KAC3DoJ,EAAgBlJ,EAAegE,SAAShE,GAAgB,KAO9D,GALAoD,QAAQC,IAAI,+CAAgD,CAC1D0F,sBAAqBC,kBAAiBC,iBAAgBC,gBAAehJ,mBAInE6I,GAAuBC,GAAmBC,GAAkBC,QACxD1E,GAAcuE,EAAqBC,EAAiBC,EAAgBC,EAAehJ,OACpF,CAELkD,QAAQC,IAAI,qDACZ,MAAMT,QAAiBC,EAAAA,EAAAA,IAAsBjE,EAAO,CAAC,GAC/CkE,EAAOC,MAAMC,QAAQJ,GAAYA,GAAoB,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUK,WAAmB,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAUb,OAAQ,GAC1F/C,EAAY8D,GAAQ,IACpBZ,EAAiBK,QAAQW,IAAI,eAAgB,CAAEnB,KAAMe,GAAQ,GAAId,GAAI3D,KAAK8E,OAC5E,CACF,CAAE,MAAO0C,GACPzC,QAAQyC,MAAM,wBAAyBA,GAGvC,IAAIsD,EAAe,yBAEnB,GAAItD,EAAMpC,QAER,GAAIoC,EAAMpC,QAAQmE,SAAS,6CACzBuB,EAAe,8FACV,GAAItD,EAAMpC,QAAQmE,SAAS,sBAAwB/B,EAAMpC,QAAQmE,SAAS,kBAC/EuB,EAAe,8FACV,GAAItD,EAAMpC,QAAQmE,SAAS,OAAQ,CAExC,MAAMwB,EAAYvD,EAAMpC,QAAQ4F,MAAM,OAAOC,MAC7C,GAAIF,GAAaA,IAAcvD,EAAMpC,QACnC,IACE,MAAM8F,EAAWC,KAAKC,MAAML,GAC5BD,EAAeI,EAAS1D,OAAS0D,EAAS9F,SAAW0F,CACvD,CAAE,MAAOO,GACPP,EAAeC,CACjB,CAEJ,MACED,EAAetD,EAAMpC,QAIzB5E,EAAgB,CACdwI,KAAM,QACN5D,QAAS0F,EACThB,SAAU,KAEd,CAAC,QACC9I,GAAW,EACb,GA6ZoCxC,UAAU,mBAAkBC,SAAA,EAExDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,aAAY5K,SAAC,mBAC5BF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,aACHhB,KAAK,aACLQ,MAAO0C,EAASG,WAAWrC,GAC3BqJ,SAAWhE,GAzWIkC,WAa7B,GAZApF,EAAYiE,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAI,IACP/D,WAAY,CAAErC,GAAI6F,GAClBvD,OAAQ,CAAEtC,GAAI,IACduC,MAAO,CAAEvC,GAAI,IACbwC,KAAM,CAAExC,GAAI,IACZhB,KAAM,MAER2D,EAAW,IACXE,EAAW,IACXE,EAAS,IAEL8C,EACF,IAAK,IAAD4F,EAAAC,EACFjI,EAAiB2C,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE1D,SAAS,EAAMY,gBAAgB,KAGpE,MAAOqI,EAAaC,SAAsB5D,QAAQC,IAAI,EACpDR,EAAAA,EAAAA,IAAW/G,EAAOmF,EAAc,EAAG,IAAK,YAAa,SACrDgG,EAAAA,EAAAA,IAA8BnL,EAAOmF,EAAc,CACjDgD,OAAQ7G,MAIZkD,QAAQC,IAAI,oCACZD,QAAQC,IAAI,kBAAmBU,GAC/BX,QAAQC,IAAI,oBAAqBnD,GACjCkD,QAAQC,IAAI,4BAA6BwG,GACzCzG,QAAQC,IAAI,oCAAqCyG,GACjD1G,QAAQC,IAAI,kCAAmCwG,EAAY5G,SAC3DG,QAAQC,IAAI,0BAA8C,QAArBsG,EAAEE,EAAY5G,eAAO,IAAA0G,OAAA,EAAnBA,EAAqBrG,QAC5DF,QAAQC,IAAI,0CAA2CyG,EAAa7G,SACpEG,QAAQC,IAAI,kCAAuD,QAAtBuG,EAAEE,EAAa7G,eAAO,IAAA2G,OAAA,EAApBA,EAAsBtG,QACrEF,QAAQC,IAAI,4BAA6BN,MAAMC,QAAQ8G,IACvD1G,QAAQC,IAAI,+BAAgCyG,GAG5C,IAAIlE,EAAe,GACf7C,MAAMC,QAAQ6G,GAChBjE,EAAeiE,EACNA,GAAe9G,MAAMC,QAAQ6G,EAAY5G,SAClD2C,EAAeiE,EAAY5G,QAClB4G,GAAe9G,MAAMC,QAAQ6G,EAAY9H,MAClD6D,EAAeiE,EAAY9H,KAClB8H,GAAeA,EAAYjJ,SAAWmC,MAAMC,QAAQ6G,EAAYjJ,SACzEgF,EAAeiE,EAAYjJ,SAE3BwC,QAAQI,KAAK,2DAA4DqG,GACzEjE,EAAe,IAIjB,IAAIoE,EAAoBpE,EAAaqE,OAAOC,IAAMhK,KAAmBgK,EAAE7M,UACvE2M,EAAkBxE,KAAK,CAAC2E,EAAGC,KAAOD,EAAExJ,cAAgB,IAAMyJ,EAAEzJ,cAAgB,IAAMwJ,EAAEjN,KAAKmN,cAAcD,EAAElN,OAGzG,IAAIoN,EAAgB,GAChBvH,MAAMC,QAAQ8G,IAChBQ,EAAgBR,EAChB1G,QAAQC,IAAI,+CACHyG,GAAgB/G,MAAMC,QAAQ8G,EAAa7G,UACpDqH,EAAgBR,EAAa7G,QAC7BG,QAAQC,IAAI,gDACHyG,GAAgB/G,MAAMC,QAAQ8G,EAAa/H,OACpDuI,EAAgBR,EAAa/H,KAC7BqB,QAAQC,IAAI,6CACHyG,GAAgBA,EAAa/K,UAAYgE,MAAMC,QAAQ8G,EAAa/K,WAC7EuL,EAAgBR,EAAa/K,SAC7BqE,QAAQC,IAAI,kDAEZD,QAAQI,KAAK,mEAAoEsG,GACjFQ,EAAgB,IAGlBlH,QAAQC,IAAI,0CAA2CiH,GACvDlH,QAAQC,IAAI,gCAAiCiH,EAAchH,QAG3D,IAAIiH,EAA2BD,EAC5BL,OAAOO,IAAMtK,KAAmBsK,EAAEnN,UAClCC,IAAIkN,IAAC,CAAOtM,GAAIsM,EAAEtM,GAAIT,MAAO+M,EAAEtN,MAAQ,GAAIT,YAAa+N,EAAE/N,aAAe,MAC5E8N,EAAyB/E,KAAK,CAAC2E,EAAGC,IAAMD,EAAE1M,MAAM4M,cAAcD,EAAE3M,QAEhE2F,QAAQC,IAAI,uCAAwCkH,GACpDnH,QAAQC,IAAI,qCAAsCkH,EAAyBjH,QAE3EzC,EAAWmJ,GACXvI,EAAkB8I,GAElBnH,QAAQC,IAAI,mBAAoBuC,GAChCxC,QAAQC,IAAI,2BAA4BkH,GACxCnH,QAAQC,IAAI,qCAAsCkH,EAAyBjH,OAAQ,SACnFF,QAAQC,IAAI,uCACd,CAAE,MAAOwC,GACPzC,QAAQyC,MAAM,8CAA+CA,GAC7DhH,EAAgB,CACdwI,KAAM,QACN5D,QAAQ,gDAADrG,OAAkDyI,EAAMpC,SAC/D0E,SAAU,MAEZtH,EAAW,IACXY,EAAkB,GACpB,CAAC,QACCE,EAAiB2C,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE1D,SAAS,EAAOY,gBAAgB,IACvE,MAEAC,EAAkB,KA8PWgJ,CAAuBlH,EAAEiE,OAAO9J,OACjDb,UAAU,aACV6N,UAAQ,EAAA5N,SAAA,EAERC,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAEZ,SAAC,uBAChBiG,MAAMC,QAAQ9D,IAAgBA,EAAYoE,OAAS,EAAIpE,EAAY5B,IAAIiD,IACtExD,EAAAA,EAAAA,KAAA,UAA4BW,MAAO6C,EAAWrC,GAAGpB,SAC9CyD,EAAWrD,MADDqD,EAAWrC,MAIxBnB,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAG+J,UAAQ,EAAA3K,SAAC,qCAOlCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,SAAQ5K,SAAC,cACxBF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,SACHhB,KAAK,SACLQ,OAAsB,QAAfe,EAAA2B,EAASI,cAAM,IAAA/B,OAAA,EAAfA,EAAiBP,KAAM,GAC9BqJ,SAAWhE,GAlRAkC,WAczB,GAbApF,EAAYiE,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAI,IACP9D,OAAQ,CAAEtC,GAAIiG,GACd1D,MAAO,CAAEvC,GAAI,IACbwC,KAAM,CAAExC,GAAI,IAEZhB,KAAM,GACNT,YAAa,GACb6D,gBAAiB,MAEnBS,EAAW,IACXE,EAAS,IAELkD,GAAY/D,EAASG,WAAWrC,GAAI,CACtC,MAAM6F,EAAeC,SAAS5D,EAASG,WAAWrC,IAClDkF,QAAQC,IAAI,kBAAmBc,EAAU,eAAgBJ,GAEzD,IAAK,IAAD4G,EAAAC,EACFjJ,EAAiB2C,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAExD,SAAS,EAAME,OAAO,KAG3D,MAAOgF,EAAaC,SAAmBC,QAAQC,IAAI,EACjDC,EAAAA,EAAAA,IAAmBxH,EAAOuF,EAAU,EAAG,IAAK,YAAa,SACzDkC,EAAAA,EAAAA,IAAiBzH,EAAOuF,EAAU,EAAG,IAAK,YAAa,UAGzDf,QAAQC,IAAI,iDAAkD2C,GAC9D5C,QAAQC,IAAI,+CAAgD4C,GAC5D7C,QAAQC,IAAI,kCAAmC2C,EAAY/C,SAC3DG,QAAQC,IAAI,0BAA8C,QAArBsH,EAAE3E,EAAY/C,eAAO,IAAA0H,OAAA,EAAnBA,EAAqBrH,QAC5DF,QAAQC,IAAI,gCAAiC4C,EAAUhD,SACvDG,QAAQC,IAAI,wBAA0C,QAAnBuH,EAAE3E,EAAUhD,eAAO,IAAA2H,OAAA,EAAjBA,EAAmBtH,QAGxD,IAAIgD,EAAe,GACfvD,MAAMC,QAAQgD,GAChBM,EAAeN,EACNA,GAAejD,MAAMC,QAAQgD,EAAY/C,SAClDqD,EAAeN,EAAY/C,QAClB+C,GAAejD,MAAMC,QAAQgD,EAAYjE,MAClDuE,EAAeN,EAAYjE,KAClBiE,GAAeA,EAAYlF,SAAWiC,MAAMC,QAAQgD,EAAYlF,SACzEwF,EAAeN,EAAYlF,SAE3BsC,QAAQI,KAAK,uDAAwDwC,GACrEM,EAAe,IAGjB,IAAIuE,EAAoBvE,EAAa2D,OAAOa,IAAO5K,KAAmB4K,EAAGzN,UACzEwN,EAAkBrF,KAAK,CAAC2E,EAAGC,KAAOD,EAAExJ,cAAgB,IAAMyJ,EAAEzJ,cAAgB,IAAMwJ,EAAEjN,KAAKmN,cAAcD,EAAElN,OAGzG,IAAIqJ,EAAa,GACbxD,MAAMC,QAAQiD,GAChBM,EAAaN,EACJA,GAAalD,MAAMC,QAAQiD,EAAUhD,SAC9CsD,EAAaN,EAAUhD,QACdgD,GAAalD,MAAMC,QAAQiD,EAAUlE,MAC9CwE,EAAaN,EAAUlE,KACdkE,GAAaA,EAAUjF,OAAS+B,MAAMC,QAAQiD,EAAUjF,OACjEuF,EAAaN,EAAUjF,OAEvBoC,QAAQI,KAAK,qDAAsDyC,GACnEM,EAAa,IAGf,IAAIwE,EAAkBxE,EAAW0D,OAAOe,IAAO9K,KAAmB8K,EAAG3N,UACrE0N,EAAgBvF,KAAK,CAAC2E,EAAGC,KAAOD,EAAExJ,cAAgB,IAAMyJ,EAAEzJ,cAAgB,IAAMwJ,EAAEjN,KAAKmN,cAAcD,EAAElN,OAEvG6D,EAAW8J,GACX5J,EAAS8J,GAET3H,QAAQC,IAAI,mBAAoBiD,GAChClD,QAAQC,IAAI,iBAAkBkD,EAEhC,CAAE,MAAOV,GACPzC,QAAQyC,MAAM,+BAAgCA,GAC9ChH,EAAgB,CACdwI,KAAM,QACN5D,QAAS,oCACT0E,SAAU,MAEZpH,EAAW,IACXE,EAAS,GACX,CAAC,QACCU,EAAiB2C,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAExD,SAAS,EAAOE,OAAO,IAC9D,CACF,GA0L+BiK,CAAmB1H,EAAEiE,OAAO9J,OAC7Cb,UAAU,aACV4K,UAAWrH,EAASG,WAAWrC,IAAMwD,EAAcd,QACnD8J,UAAQ,EAAA5N,SAAA,EAERC,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAEZ,SACZsD,EAASG,WAAWrC,GACrBwD,EAAcd,QAAU,qBACxB,gBAF0B,6BAI5BA,EAAQtD,IAAIkD,IACXzD,EAAAA,EAAAA,KAAA,UAAwBW,MAAO8C,EAAOtC,GAAGpB,SACtC0D,EAAOtD,MADGsD,EAAOtC,cAS5BtB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,QAAO5K,SAAC,4BACvBF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,QACHhB,KAAK,QACLQ,OAAqB,QAAdgB,EAAA0B,EAASK,aAAK,IAAA/B,OAAA,EAAdA,EAAgBR,KAAM,GAC7BqJ,SAAWhE,GAAMlD,GAAWkE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAInE,GAAQ,IAAEK,MAAO,CAAEvC,GAAIqF,EAAEiE,OAAO9J,UAClEb,UAAU,aACV4K,SAAqC,MAA3BrH,EAASG,WAAWrC,IAAcwD,EAAcZ,QAAQhE,SAAA,EAElEC,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAEZ,SACc,MAA3BsD,EAASG,WAAWrC,GAAa,oCACjCwD,EAAcZ,QAAU,qBACxB,4BAEFA,EAAQxD,IAAIwK,IACX/K,EAAAA,EAAAA,KAAA,UAAqBW,MAAOoK,EAAI5J,GAAGpB,SAChCgL,EAAI5K,MADM4K,EAAI5J,KAIS,MAA3BkC,EAASG,WAAWrC,IAAckC,EAASI,OAAOtC,IAAyB,IAAnB4C,EAAQwC,SAAiB5B,EAAcZ,UAC9F/D,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAG+J,UAAQ,EAAA3K,SAAC,gCAKhCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,OAAM5K,SAAC,2BACtBF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,OACHhB,KAAK,OACLQ,OAAoB,QAAbiB,EAAAyB,EAASM,YAAI,IAAA/B,OAAA,EAAbA,EAAeT,KAAM,GAC5BqJ,SAAWhE,GAAMlD,GAAWkE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAInE,GAAQ,IAAEM,KAAM,CAAExC,GAAIqF,EAAEiE,OAAO9J,UACjEb,UAAU,aACV4K,SAAqC,MAA3BrH,EAASG,WAAWrC,IAAcwD,EAAcV,MAAMlE,SAAA,EAEhEC,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAEZ,SACc,MAA3BsD,EAASG,WAAWrC,GAAa,uCACjCwD,EAAcV,MAAQ,mBACtB,2BAEFA,EAAM1D,IAAIoD,IACT3D,EAAAA,EAAAA,KAAA,UAAsBW,MAAOgD,EAAKxC,GAAGpB,SAClC4D,EAAKxD,MADKwD,EAAKxC,KAIQ,MAA3BkC,EAASG,WAAWrC,IAAckC,EAASI,OAAOtC,IAAuB,IAAjB8C,EAAMsC,SAAiB5B,EAAcV,QAC5FjE,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAG+J,UAAQ,EAAA3K,SAAC,iCAOlCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,gBAAe5K,SAAC,sBAC/BF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,gBACHhB,KAAK,gBACLQ,MAAO0C,EAASlD,KAChBqK,SAAWhE,IACT,MAAM2H,EAAuB3H,EAAEiE,OAAO9J,MAChCyN,EAAwB3J,EAAeyD,KAAKmG,GAAMA,EAAG3N,QAAUyN,GACrE7K,GAAWkE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACRnE,GAAQ,IACXlD,KAAMgO,EACNzO,aAAkC,OAArB0O,QAAqB,IAArBA,OAAqB,EAArBA,EAAuB1O,cAAe,GACnD6D,iBAAsC,OAArB6K,QAAqB,IAArBA,OAAqB,EAArBA,EAAuBjN,KAAM,OAGlDrB,UAAU,aACV4K,UAAWrH,EAASG,WAAWrC,IAAMwD,EAAcF,eACnDkJ,UAAQ,EAAA5N,SAAA,EAERC,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAEZ,SACZsD,EAASG,WAAWrC,GACrBwD,EAAcF,eAAiB,6BAC/B,wBAF0B,6BAI5BA,EAAe8B,OAAS,EAAI9B,EAAelE,IAAI+N,IAC9CtO,EAAAA,EAAAA,KAAA,UAA+BW,MAAO2N,EAAc5N,MAAMX,SACvDuO,EAAc5N,OADJ4N,EAAcnN,MAI3BnB,EAAAA,EAAAA,KAAA,UAAQW,MAAM,GAAG+J,UAAQ,EAAA3K,SAAC,oCAG7B0E,EAAe8B,OAAS,IACvB1G,EAAAA,EAAAA,MAAA,SAAOC,UAAU,YAAWC,SAAA,CACzB0E,EAAe8B,OAAO,sCAO/B1G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,eAAc5K,SAAC,mBAC9BC,EAAAA,EAAAA,KAAA,SACEsK,KAAK,SACLnJ,GAAG,eACHhB,KAAK,eACLQ,MAAO0C,EAASO,aAChB4G,SAAWhE,GAAMlD,GAAWkE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAInE,GAAQ,IAAEO,aAAc4C,EAAEiE,OAAO9J,SACnEb,UAAU,aACVyO,YAAY,gBACZC,IAAI,UAIR3O,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,WAAU5K,SAAC,YAC1BF,EAAAA,EAAAA,MAAA,UACEsB,GAAG,WACHhB,KAAK,WACLQ,MAAO0C,EAAS/C,SAChBkK,SAAWhE,GAAMlD,GAAWkE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAInE,GAAQ,IAAE/C,SAA6B,SAAnBkG,EAAEiE,OAAO9J,SAC/Db,UAAU,aAAYC,SAAA,EAEtBC,EAAAA,EAAAA,KAAA,UAAQW,OAAO,EAAKZ,SAAC,YACrBC,EAAAA,EAAAA,KAAA,UAAQW,OAAO,EAAMZ,SAAC,uBAK5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,SAAO2K,QAAQ,cAAa5K,SAAC,iBAC7BC,EAAAA,EAAAA,KAAA,YACEmB,GAAG,cACHhB,KAAK,cACLQ,MAAO0C,EAAS3D,YAChB8K,SAAWhE,GAAMlD,GAAWkE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAInE,GAAQ,IAAE3D,YAAa8G,EAAEiE,OAAO9J,SAClEb,UAAU,aACVyO,YAAalL,EAASlD,KAAO,kCAAoC,oCACjEsO,KAAM,EACNC,WAAYrL,EAASlD,KACrBU,MAAO,CACL8N,gBAAiBtL,EAASlD,KAAO,UAAY,OAC7CyO,MAAOvL,EAASlD,KAAO,UAAY,UACnC0O,OAAQxL,EAASlD,KAAO,cAAgB,UAG3CkD,EAASlD,OACRH,EAAAA,EAAAA,KAAA,SAAOF,UAAU,YAAWC,SAAC,+EAOnCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,UAAQsK,KAAK,SAASxK,UAAU,kBAAkBkB,QAASqJ,GAAUtK,SAAC,YAGtEC,EAAAA,EAAAA,KAAA,UAAQsK,KAAK,SAASxK,UAAU,kBAAkB4K,SAAUrI,EAAQtC,SACjEsC,EAAU,YAAeI,EAAY,iBAAmB,6BAOnE5C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,aACS,MACT,MAAMoI,EAAKxF,EAAqBsE,SAAStE,GAAsB,KAC/D,OAAKqD,MAAMC,QAAQjE,GACdmG,EACM,IAAPA,EAAiBnG,EAASkL,OAAOO,GAAyB,IAAnBA,EAAEzG,cAA4C,aAApByG,EAAEqB,eAA+BvI,OAC3F,IAAP4B,EAAiBnG,EAASkL,OAAOO,GAAyB,IAAnBA,EAAEzG,cAA4C,gBAApByG,EAAEqB,eAAkCvI,OAClGvE,EAASkL,OAAOO,GAAMA,EAAEzG,cAAmC,IAAnByG,EAAEzG,cAAyC,IAAnByG,EAAEzG,cAA4C,iBAApByG,EAAEqB,eAAmCvI,OAHtHvE,EAASuE,OADY,CAKtC,EAPU,GAON,QAEPvG,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,yBACVkB,QAAS0H,UACP,MAAMqG,KAAkBpM,GAAsBE,GAAkBE,GAAiBE,GACjFX,GAAW,GACX,IACE,GAAIyM,EAAc,CAChB,MAAM/H,EAAerE,EAAqBsE,SAAStE,GAAsB,KACnEyE,EAAWvE,EAAiBoE,SAASpE,GAAkB,KACvDyE,EAAUvE,EAAgBkE,SAASlE,GAAiB,KACpD2E,EAASzE,EAAegE,SAAShE,GAAgB,WACjDwE,GAAcT,EAAcI,EAAUE,EAASI,EAAQvE,EAC/D,KAAO,CAEL,MAAM0C,QAAiBC,EAAAA,EAAAA,IAAsBjE,EAAO,CAAC,GAC/CkE,EAAOC,MAAMC,QAAQJ,GAAYA,GAAoB,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUK,WAAmB,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAUb,OAAQ,GAC1F/C,EAAY8D,GAAQ,IACpBZ,EAAiBK,QAAQW,IAAI,eAAgB,CAAEnB,KAAMe,GAAQ,GAAId,GAAI3D,KAAK8E,OAC5E,CACF,CAAE,MAAOI,GACPH,QAAQI,KAAK,mBAAoB,OAADD,QAAC,IAADA,OAAC,EAADA,EAAGE,UAAWF,EAChD,CAAC,QACClE,GAAW,EACb,GAEFoI,SAAUrI,EAAQtC,SACnB,iBAMJsC,GACCxC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBACfE,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2BAEiB,IAApBiC,EAASuE,QAYkB,IAA3B+B,GAAgB/B,QAXlB1G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SAAC,iBAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,8CACHC,EAAAA,EAAAA,KAAA,UACEF,UAAU,kBACVkB,QAASA,IAAMwB,GAAY,GAAMzC,SAClC,oBAiBHC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAoBC,SAChC,MAEC,MAAMiP,EAAmBhN,EAASkL,OAAOnF,IAAY,IAADkH,EAClD,MAAMjI,EAAee,EAAQf,eAAkC,QAAtBiI,EAAIlH,EAAQvE,kBAAU,IAAAyL,OAAA,EAAlBA,EAAoB9N,IACjE,OAAwB,IAAjB6F,GAAuC,MAAjBA,IAGzBkI,EAAsBlN,EAASkL,OAAOnF,IAAY,IAADoH,EACrD,MAAMnI,EAAee,EAAQf,eAAkC,QAAtBmI,EAAIpH,EAAQvE,kBAAU,IAAA2L,OAAA,EAAlBA,EAAoBhO,IACjE,OAAwB,IAAjB6F,GAAuC,MAAjBA,IAGzBoI,EAAuBpN,EAASkL,OAAOnF,IAAY,IAADsH,EACtD,MAAMrI,EAAee,EAAQf,eAAkC,QAAtBqI,EAAItH,EAAQvE,kBAAU,IAAA6L,OAAA,EAAlBA,EAAoBlO,IACjE,OAAwB,IAAjB6F,GAAuC,MAAjBA,IAIzBsI,EAAgB,CACpB,CAAE7O,IAAK,iBAAkBC,MAAO,eAChC,CAAED,IAAK,aAAcC,MAAO,UAC5B,CAAED,IAAK,YAAaC,MAAO,QAASE,UAAYzB,GAASA,EAAKW,WAC9D,CAAEW,IAAK,WAAYC,MAAO,OAAQE,UAAYzB,GAASA,EAAKoQ,UAC5D,CAAE9O,IAAK,cAAeC,MAAO,gBAC7B,CAAED,IAAK,gBAAiBC,MAAO,mBAG3B8O,EAAqBzH,IACzB/H,EAAAA,EAAAA,KAACf,EAAQ,CAEPE,KAAM4I,EACN3I,SAAS,UACTC,OAASF,GAjuBL4I,KAAa,IAAD0H,EAC9BnM,EAAY,CACVnD,KAAM4H,EAAQ5H,KACdT,YAAaqI,EAAQrI,aAAe,GACpC8D,WAAY,CAAErC,IAAsB,QAAlBsO,EAAA1H,EAAQvE,kBAAU,IAAAiM,OAAA,EAAlBA,EAAoBtO,KAAM,IAC5CsC,OAAQ,CAAEtC,GAAI,IACduC,MAAO,CAAEvC,GAAI,IACbwC,KAAM,CAAExC,GAAI,IACZyC,aAAcmE,EAAQnE,cAAgB,GACtCtD,SAAUyH,EAAQzH,WAEpBoC,EAAaqF,EAAQ5G,IACrBqB,GAAY,IAqtBoBvB,CAAW,CAAEE,GAAIhC,EAAKkM,UAAWlL,KAAMhB,EAAKe,cAC9DZ,SAAUA,IAntBLoJ,WACnB,GAAIgH,OAAOC,QAAQ,iDACjB,IACErN,GAAW,SACLsN,EAAAA,EAAAA,IAAc/N,EAAOV,GAC3BW,EAAgB,CACdwI,KAAM,UACN5D,QAAS,+BACT0E,SAAU,MAEZ,MAAMpE,EAAerE,EAAqBsE,SAAStE,GAAsB,KACnEyE,EAAWvE,EAAiBoE,SAASpE,GAAkB,KACvDyE,EAAUvE,EAAgBkE,SAASlE,GAAiB,KACpD2E,EAASzE,EAAegE,SAAShE,GAAgB,KACvDwE,GAAcT,EAAcI,EAAUE,EAASI,EAAQvE,EACzD,CAAE,MAAO2F,GACPzC,QAAQyC,MAAM,0BAA2BA,EAC3C,CAAC,QACCxG,GAAW,EACb,GAgsB4BpB,CAAa6G,EAAQsD,WACrC9L,OAAQ+P,GAAc,GAAAjP,OALd0H,EAAQ8H,UAAS,KAAAxP,OAAI0H,EAAQsD,YASzC,OACExL,EAAAA,EAAAA,MAAAiQ,EAAAA,SAAA,CAAA/P,SAAA,CAEGiP,EAAiBzI,OAAS,IACzB1G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EACpCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8BACJF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,gBAAeC,SAAA,CAAC,IAAEiP,EAAiBzI,OAAO,oBAElEvG,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACjBiP,EAAiBzO,IAAIiP,QAM3BN,EAAoB3I,OAAS,IAC5B1G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iCACJF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,gBAAeC,SAAA,CAAC,IAAEmP,EAAoB3I,OAAO,oBAE/DvG,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACvBmP,EAAoB3O,IAAIiP,QAM9BJ,EAAqB7I,OAAS,IAC7B1G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kCACJF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,gBAAeC,SAAA,CAAC,IAAEqP,EAAqB7I,OAAO,oBAEhEvG,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACvBqP,EAAqB7O,IAAIiP,QAMH,IAA5BR,EAAiBzI,QAA+C,IAA/B2I,EAAoB3I,QAAgD,IAAhC6I,EAAqB7I,SACzF1G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SAAC,iBAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6GAKZ,EAzFA,W","sources":["components/master-data/SubjectManagement.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useApp } from '../../context/AppContext';\nimport { getCourseTypesCached } from '../../services/globalApiCache';\nimport { createSubjectWithAutoLink, deleteSubject, getAllSubjectLinkages, getClassesByCourse, getCourses, getExamsByCourse, getMasterSubjectsByCourseType, updateSubject } from '../../services/masterDataService';\nimport './MasterDataComponent.css';\n\n// Reusable DataCard Component\nconst DataCard = ({ \n  item, \n  itemType = 'item',\n  onEdit, \n  onDelete,\n  fields = [],\n  badges = []\n}) => {\n  const handleEdit = () => {\n    if (onEdit) {\n      onEdit(item);\n    }\n  };\n\n  const handleDelete = () => {\n    if (onDelete) {\n      onDelete(item.id);\n    }\n  };\n\n  const renderField = (field) => {\n    const { key, label, value, condition } = field;\n    \n    if (condition && !condition(item)) {\n      return null;\n    }\n    \n    // Handle function-based value extraction\n    const fieldValue = typeof value === 'function' ? value(item) : (value || item[key]);\n    \n    if (!fieldValue) {\n      return null;\n    }\n    \n    return (\n      <p key={key}>\n        <strong>{label}:</strong> {fieldValue}\n      </p>\n    );\n  };\n\n  const renderBadge = (badge) => {\n    const { key, label, value, condition, style, icon } = badge;\n    \n    if (condition && !condition(item)) {\n      return null;\n    }\n    \n    const badgeValue = value || item[key];\n    \n    if (!badgeValue) {\n      return null;\n    }\n\n    return (\n      <span \n        key={key}\n        className=\"structure-badge\"\n        style={style}\n      >\n        {icon} {badgeValue}\n      </span>\n    );\n  };\n\n  const getItemName = () => {\n    switch (itemType) {\n      case 'subject':\n        return item.subjectName || item.name;\n      case 'topic':\n        return item.topicName || item.name;\n      case 'module':\n        return item.name;\n      default:\n        return item.name;\n    }\n  };\n\n  const getItemDescription = () => {\n    return item.description;\n  };\n\n  const getCreatedBy = () => {\n    return item.createdByName;\n  };\n\n  return (\n    <div className=\"data-card\">\n      <div className=\"card-header\">\n        <div className=\"card-title\">\n          <h4>{getItemName()}</h4>\n          <div className=\"card-badges\">\n            <span className={`status-badge ${item.isActive ? 'active' : 'inactive'}`}>\n              {item.isActive ? 'Active' : 'Inactive'}\n            </span>\n            {badges.map(renderBadge)}\n          </div>\n        </div>\n        <div className=\"card-actions\">\n          <button \n            className=\"btn btn-outline btn-xs\"\n            onClick={handleEdit}\n          >\n            Edit\n          </button>\n          <button \n            className=\"btn btn-danger btn-xs\"\n            onClick={handleDelete}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"card-content\">\n        {getItemDescription() && (\n          <p className=\"description\">{getItemDescription()}</p>\n        )}\n        \n        {fields.map(renderField)}\n      </div>\n      \n      <div className=\"card-footer\">\n        <small className=\"text-muted\">\n          Created: {new Date(item.createdAt).toLocaleDateString()}\n          {getCreatedBy() && (\n            <span> by {getCreatedBy()}</span>\n          )}\n        </small>\n      </div>\n    </div>\n  );\n};\n\nconst SubjectManagement = () => {\n  const { token, addNotification } = useApp();\n  const [subjects, setSubjects] = useState([]);\n  const [courseTypes, setCourseTypes] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  // Filter states for drill-down filtering\n  const [selectedCourseType, setSelectedCourseType] = useState('');\n  const [selectedCourse, setSelectedCourse] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedExam, setSelectedExam] = useState('');\n  const [showActiveOnly, setShowActiveOnly] = useState(true);\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    masterSubjectId: '',\n    courseType: { id: '' },\n    course: { id: '' },\n    class: { id: '' },\n    exam: { id: '' },\n    displayOrder: '',\n    isActive: true\n  });\n  \n  const [courses, setCourses] = useState([]);\n  const [classes, setClasses] = useState([]);\n  const [exams, setExams] = useState([]);\n  const [filteredCourses, setFilteredCourses] = useState([]);\n  const [filteredClasses, setFilteredClasses] = useState([]);\n  const [filteredExams, setFilteredExams] = useState([]);\n  const [masterSubjects, setMasterSubjects] = useState([]);\n  const [loadingStates, setLoadingStates] = useState({\n    courses: false,\n    classes: false,\n    exams: false,\n    masterSubjects: false\n  });\n\n  // Dedup/abort/cache controls\n  const courseTypesAbortRef = useRef(null);\n  const courseTypesCacheRef = useRef({ data: null, ts: 0 });\n  const subjectsAbortRef = useRef(null);\n  const subjectsCacheRef = useRef(new Map()); // key -> { data, ts }\n  const lastSubjectsKeyRef = useRef('');\n  const lastSubjectsAtRef = useRef(0);\n\n  // Cleanup abort controllers on unmount\n  useEffect(() => {\n    return () => {\n      if (courseTypesAbortRef.current) {\n        try { courseTypesAbortRef.current.abort(); } catch(_) {}\n      }\n      if (subjectsAbortRef.current) {\n        try { subjectsAbortRef.current.abort(); } catch(_) {}\n      }\n    };\n  }, []);\n\n  const hasInitialFetchRef = useRef(false);\n  useEffect(() => {\n    if (!token || hasInitialFetchRef.current) return;\n    hasInitialFetchRef.current = true;\n    fetchData();\n    // Additionally load full linkage snapshot on first load (no filters)\n    (async () => {\n      try {\n        const linkages = await getAllSubjectLinkages(token, {});\n        // Normalize various response shapes to an array\n        const list = Array.isArray(linkages) ? linkages : (linkages?.content || linkages?.data || []);\n        // Show linkage subjects immediately on initial load\n        setSubjects(list || []);\n        // Also cache for reuse\n        subjectsCacheRef.current.set('ALL_LINKAGES', { data: list || [], ts: Date.now() });\n        console.log('Loaded ALL_LINKAGES into subjects. Count:', (list || []).length);\n      } catch (e) {\n        console.warn('All-linkages preload failed:', e?.message || e);\n      }\n    })();\n  }, [token]);\n\n  // Guards to avoid duplicate initial fetches on first render\n  const didMountCourseType = useRef(false);\n  const didMountCourse = useRef(false);\n  const didMountClass = useRef(false);\n  const didMountExam = useRef(false);\n  const didMountActive = useRef(false);\n\n  // Effect for course type change - filter courses and fetch subjects\n  useEffect(() => {\n    if (!didMountCourseType.current) { didMountCourseType.current = true; return; }\n    console.log('=== COURSE TYPE CHANGE EFFECT ===');\n    console.log('Selected course type changed:', selectedCourseType);\n    console.log('Selected course type type:', typeof selectedCourseType);\n    console.log('Selected course type length:', selectedCourseType?.length);\n    if (selectedCourseType) {\n      const courseTypeId = parseInt(selectedCourseType);\n      console.log('Filtering courses for course type:', courseTypeId);\n      \n      // Fetch courses for this course type (subject dropdown is populated via getSubjects elsewhere)\n      fetchCoursesByCourseType(courseTypeId);\n      \n      // Reset dependent filters\n      setSelectedCourse('');\n      setSelectedClass('');\n      setSelectedExam('');\n      setFilteredClasses([]);\n      setFilteredExams([]);\n      // Clear current subjects to avoid showing stale content\n      setSubjects([]);\n      \n      // Fetch subjects via all-linkages endpoint filtered by courseTypeId\n      (async () => {\n        try {\n          console.log('About to fetch subjects via /api/admin/subjects/all-linkages?courseTypeId=.. :', courseTypeId);\n          setSubjects([]);\n          const data = await getAllSubjectLinkages(token, { courseTypeId });\n          const items = Array.isArray(data) ? data : (data?.content || data?.data || []);\n          // Keep linkage shape so render uses subjectName/courseName/className/examName\n          setSubjects(Array.isArray(items) ? items : []);\n        } catch (e) {\n          console.warn('Fetch subjects by courseType failed:', e?.message || e);\n        }\n      })();\n    } else {\n      console.log('No course type selected - clearing subjects until a filter is applied');\n      setFilteredCourses(Array.isArray(courses) ? courses : []);\n      setMasterSubjects([]);\n      setSelectedCourse('');\n      setSelectedClass('');\n      setSelectedExam('');\n      setFilteredClasses([]);\n      setFilteredExams([]);\n      // Do not auto-fetch subjects without filters\n      setSubjects([]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedCourseType, showActiveOnly]);\n\n  // Effect for course change - fetch classes/exams and subjects\n  useEffect(() => {\n    if (!didMountCourse.current) { didMountCourse.current = true; return; }\n    if (selectedCourse) {\n      const courseId = parseInt(selectedCourse);\n      const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\n      console.log('=== COURSE CHANGE EFFECT ===');\n      console.log('Selected course changed:', courseId, 'course type:', courseTypeId);\n      console.log('About to fetch subjects via all-linkages with courseId & courseTypeId:', courseId, courseTypeId);\n      \n      // Fetch classes and exams for this course using combined endpoints\n      fetchClassesAndExamsByCourse(courseTypeId, courseId);\n      \n      // Reset dependent filters\n      setSelectedClass('');\n      setSelectedExam('');\n      // Clear current subjects to avoid showing stale content\n      setSubjects([]);\n      \n      // Fetch subjects for this course using all-linkages endpoint\n      (async () => {\n        try {\n          const data = await getAllSubjectLinkages(token, { courseId, courseTypeId });\n          const items = Array.isArray(data) ? data : (data?.content || data?.data || []);\n          setSubjects(Array.isArray(items) ? items : []);\n        } catch (e) {\n          console.warn('Fetch subjects by course (all-linkages) failed:', e?.message || e);\n          setSubjects([]);\n        }\n      })();\n    } else {\n      setFilteredClasses([]);\n      setFilteredExams([]);\n      setSelectedClass('');\n      setSelectedExam('');\n      // Do NOT refetch here; course type effect already fetched via all-linkages\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedCourse, selectedCourseType, showActiveOnly]);\n\n  // Effect for class change - fetch subjects for specific class\n  useEffect(() => {\n    if (!didMountClass.current) { didMountClass.current = true; return; }\n    if (selectedClass) {\n      const classId = parseInt(selectedClass);\n      console.log('Selected class changed:', classId);\n      \n      // Reset exam selection\n      setSelectedExam('');\n      // Clear master subject selection when class changes\n      setFormData(prev => ({\n        ...prev,\n        name: '',\n        description: '',\n        masterSubjectId: ''\n      }));\n      \n      // Fetch subjects for this class\n      const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\n      const courseId = selectedCourse ? parseInt(selectedCourse) : null;\n      fetchSubjects(courseTypeId, courseId, classId, null, showActiveOnly);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedClass, selectedCourseType, selectedCourse]);\n\n  // Effect for exam change - fetch subjects for specific exam\n  useEffect(() => {\n    if (!didMountExam.current) { didMountExam.current = true; return; }\n    if (selectedExam) {\n      const examId = parseInt(selectedExam);\n      console.log('Selected exam changed:', examId);\n      \n      // Reset class selection\n      setSelectedClass('');\n      // Clear master subject selection when exam changes\n      setFormData(prev => ({\n        ...prev,\n        name: '',\n        description: '',\n        masterSubjectId: ''\n      }));\n      \n      // Clear current subjects to avoid showing stale content\n      setSubjects([]);\n      \n      // Fetch subjects for this exam\n      const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\n      const courseId = selectedCourse ? parseInt(selectedCourse) : null;\n      fetchSubjects(courseTypeId, courseId, null, examId, showActiveOnly);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedExam, selectedCourseType, selectedCourse]);\n\n  // Effect for active filter change - refetch subjects with new active filter only\n  useEffect(() => {\n    if (!didMountActive.current) { didMountActive.current = true; return; }\n    console.log('Show active only changed:', showActiveOnly);\n    const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\n    const courseId = selectedCourse ? parseInt(selectedCourse) : null;\n    const classId = selectedClass ? parseInt(selectedClass) : null;\n    const examId = selectedExam ? parseInt(selectedExam) : null;\n    \n    // Do not clear subjects here to avoid flicker; just refetch with new flag\n    fetchSubjects(courseTypeId, courseId, classId, examId, showActiveOnly);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [showActiveOnly]);\n\n  // Debug effect for masterSubjects state changes\n  useEffect(() => {\n    console.log('Master subjects state changed:', masterSubjects);\n    console.log('Master subjects length:', masterSubjects.length);\n  }, [masterSubjects]);\n\n  // Helper functions for course type logic\n  const isAcademicCourseType = (courseTypeId) => {\n    const courseType = courseTypes.find(ct => ct.id === parseInt(courseTypeId));\n    return courseType && courseType.name && courseType.name.toLowerCase().includes('academic');\n  };\n\n  const getCourseTypeName = (courseTypeId) => {\n    if (!Array.isArray(courseTypes)) {\n      console.warn('courseTypes is not an array:', courseTypes);\n      return 'Unknown';\n    }\n    const courseType = courseTypes.find(ct => ct.id === courseTypeId);\n    return courseType ? courseType.name : 'Unknown';\n  };\n\n  // Group subjects by course type\n  const groupSubjectsByType = () => {\n    const grouped = {};\n    \n    subjects.forEach(subject => {\n      const courseTypeId = subject.courseTypeId || subject.courseType?.id;\n      const courseTypeName = getCourseTypeName(courseTypeId);\n      \n      if (!grouped[courseTypeName]) {\n        grouped[courseTypeName] = [];\n      }\n      grouped[courseTypeName].push(subject);\n    });\n    \n    return grouped;\n  };\n\n  const groupedSubjects = groupSubjectsByType();\n  const courseTypeNames = Object.keys(groupedSubjects).sort();\n\n  const getCourseName = (courseId) => {\n    if (!Array.isArray(courses)) {\n      console.warn('courses is not an array:', courses);\n      return 'Unknown';\n    }\n    const course = courses.find(c => c.id === courseId);\n    return course ? course.name : 'Unknown';\n  };\n\n  const fetchCoursesByCourseType = async (courseTypeId) => {\n    if (!courseTypeId || !token) {\n      setFilteredCourses([]);\n      return;\n    }\n    \n    try {\n      console.log('Fetching courses for course type:', courseTypeId);\n      // Use the same endpoint as CourseManagement - paginated courses endpoint\n      const data = await getCourses(token, courseTypeId, 0, 100, 'createdAt', 'desc');\n      console.log('Raw courses API response (fetchCoursesByCourseType):', data);\n      console.log('Courses data type:', typeof data);\n      console.log('Courses is array:', Array.isArray(data));\n      console.log('Has content property:', !!data.content);\n      console.log('Content is array:', Array.isArray(data.content));\n      console.log('Content length:', data.content?.length);\n      \n      // Handle different response formats\n      let coursesArray = [];\n      if (Array.isArray(data)) {\n        coursesArray = data;\n      } else if (data && Array.isArray(data.content)) {\n        // Handle paginated response\n        coursesArray = data.content;\n      } else if (data && Array.isArray(data.data)) {\n        // Handle wrapped response\n        coursesArray = data.data;\n      } else if (data && data.courses && Array.isArray(data.courses)) {\n        // Handle nested response\n        coursesArray = data.courses;\n      } else {\n        console.warn('Unexpected courses data format (fetchCoursesByCourseType):', data);\n        coursesArray = [];\n      }\n      \n      console.log('Processed courses array (fetchCoursesByCourseType):', coursesArray);\n      setFilteredCourses(coursesArray);\n    } catch (error) {\n      console.error('Error fetching courses by course type:', error);\n      setFilteredCourses([]);\n    }\n  };\n\n  const fetchClassesAndExamsByCourse = async (courseTypeId, courseId) => {\n    if (!courseId || !token) {\n      setFilteredClasses([]);\n      setFilteredExams([]);\n      return;\n    }\n    \n    try {\n      console.log('Fetching classes and exams for course type:', courseTypeId, 'course:', courseId);\n      \n      // Fetch classes and exams using course-specific endpoints with pagination\n      const [classesData, examsData] = await Promise.all([\n        getClassesByCourse(token, courseId, 0, 100, 'createdAt', 'desc'),\n        getExamsByCourse(token, courseId, 0, 100, 'createdAt', 'desc')\n      ]);\n      \n      console.log('Raw classes API response (fetchClassesAndExamsByCourse):', classesData);\n      console.log('Raw exams API response (fetchClassesAndExamsByCourse):', examsData);\n      console.log('Classes has content property:', !!classesData.content);\n      console.log('Classes content length:', classesData.content?.length);\n      console.log('Exams has content property:', !!examsData.content);\n      console.log('Exams content length:', examsData.content?.length);\n      \n      // Handle different response formats for classes\n      let classesArray = [];\n      if (Array.isArray(classesData)) {\n        classesArray = classesData;\n      } else if (classesData && Array.isArray(classesData.content)) {\n        classesArray = classesData.content;\n      } else if (classesData && Array.isArray(classesData.data)) {\n        classesArray = classesData.data;\n      } else if (classesData && classesData.classes && Array.isArray(classesData.classes)) {\n        classesArray = classesData.classes;\n      } else {\n        console.warn('Unexpected classes data format (fetchClassesAndExamsByCourse):', classesData);\n        classesArray = [];\n      }\n      \n      // Handle different response formats for exams\n      let examsArray = [];\n      if (Array.isArray(examsData)) {\n        examsArray = examsData;\n      } else if (examsData && Array.isArray(examsData.content)) {\n        examsArray = examsData.content;\n      } else if (examsData && Array.isArray(examsData.data)) {\n        examsArray = examsData.data;\n      } else if (examsData && examsData.exams && Array.isArray(examsData.exams)) {\n        examsArray = examsData.exams;\n      } else {\n        console.warn('Unexpected exams data format (fetchClassesAndExamsByCourse):', examsData);\n        examsArray = [];\n      }\n      \n      console.log('Processed classes array (fetchClassesAndExamsByCourse):', classesArray);\n      console.log('Processed exams array (fetchClassesAndExamsByCourse):', examsArray);\n      \n      setFilteredClasses(classesArray);\n      setFilteredExams(examsArray);\n    } catch (error) {\n      console.error('Error fetching classes and exams by course:', error);\n      setFilteredClasses([]);\n      setFilteredExams([]);\n    }\n  };\n\n  const fetchMasterSubjects = async (courseTypeId) => {\n    if (!courseTypeId || !token) {\n      setMasterSubjects([]);\n      return;\n    }\n    \n    try {\n      setLoadingStates(prev => ({ ...prev, masterSubjects: true }));\n      console.log('Fetching master subjects for course type (master endpoint):', courseTypeId);\n      const data = await getMasterSubjectsByCourseType(token, courseTypeId, { active: showActiveOnly });\n      \n      // Handle paginated response - extract content array for master subjects\n      const masterSubjectsArray = data.content || data;\n      setMasterSubjects(Array.isArray(masterSubjectsArray) ? masterSubjectsArray : []);\n      \n      console.log('Master subjects fetched for course type:', masterSubjectsArray);\n      console.log('Master subjects count:', masterSubjectsArray.length);\n    } catch (error) {\n      console.error('Error fetching master subjects by course type:', error);\n      setMasterSubjects([]);\n      addNotification({\n        type: 'error',\n        message: 'Failed to fetch master subjects for selected course type',\n        duration: 5000\n      });\n    } finally {\n      setLoadingStates(prev => ({ ...prev, masterSubjects: false }));\n    }\n  };\n\n  const isCompetitiveCourseType = (courseTypeId) => {\n    const courseType = courseTypes.find(ct => ct.id === parseInt(courseTypeId));\n    return courseType && courseType.name && courseType.name.toLowerCase().includes('competitive');\n  };\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      // Course types with 5s cache + abort/dedup\n      let courseTypesData = null;\n      const now = Date.now();\n      if (courseTypesCacheRef.current.data && now - courseTypesCacheRef.current.ts < 5000) {\n        courseTypesData = courseTypesCacheRef.current.data;\n      } else {\n        if (courseTypesAbortRef.current) {\n          try { courseTypesAbortRef.current.abort(); } catch(_) {}\n        }\n        // Note: masterDataService.getCourseTypes currently doesn't accept signal; apiUtils likely handles\n        // Even without signal support, we still gain cache dedup benefits\n        courseTypesAbortRef.current = new AbortController();\n        courseTypesData = await getCourseTypesCached(token);\n        courseTypesCacheRef.current = { data: courseTypesData, ts: now };\n      }\n      \n      // Do NOT fetch subjects on initial load; wait for filters\n      setSubjects([]);\n      \n      console.log('Raw courseTypes API response (SubjectManagement):', courseTypesData);\n      console.log('CourseTypes data type:', typeof courseTypesData);\n      console.log('CourseTypes is array:', Array.isArray(courseTypesData));\n      \n      // Handle different response formats\n      let courseTypesArray = [];\n      if (Array.isArray(courseTypesData)) {\n        courseTypesArray = courseTypesData;\n      } else if (courseTypesData && Array.isArray(courseTypesData.content)) {\n        // Handle paginated response\n        courseTypesArray = courseTypesData.content;\n      } else if (courseTypesData && Array.isArray(courseTypesData.data)) {\n        // Handle wrapped response\n        courseTypesArray = courseTypesData.data;\n      } else if (courseTypesData && courseTypesData.courseTypes && Array.isArray(courseTypesData.courseTypes)) {\n        // Handle nested response\n        courseTypesArray = courseTypesData.courseTypes;\n      } else {\n        console.warn('Unexpected courseTypes data format (SubjectManagement):', courseTypesData);\n        courseTypesArray = [];\n      }\n      \n      console.log('Processed courseTypes array (SubjectManagement):', courseTypesArray);\n      setCourseTypes(courseTypesArray); // Set course types directly like in ClassManagement\n      setCourses([]); // defer loading courses until a course type is selected\n      setClasses([]);\n      setExams([]);\n      \n      // Initialize filtered data\n      setFilteredCourses([]);\n      setFilteredClasses([]);\n      setFilteredExams([]);\n      \n      // Debug logging to see the data structure\n      console.log('=== SUBJECT MANAGEMENT FETCH DEBUG ===');\n      console.log('Course types raw data:', courseTypesData);\n      console.log('Course types type:', typeof courseTypesData);\n      console.log('Course types is array:', Array.isArray(courseTypesData));\n      console.log('Course types length:', courseTypesData?.length);\n      console.log('Initial load: only course types fetched; subjects deferred until filters applied');\n      console.log('=====================================');\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchSubjects = async (courseTypeId = null, courseId = null, classId = null, examId = null, active = null) => {\n    try {\n      setLoading(true);\n      console.log('=== FETCH SUBJECTS DEBUG ===');\n      console.log('fetchSubjects called with filters:', { courseTypeId, courseId, classId, examId, active });\n      console.log('Token available:', !!token);\n      // Do not call API if no filters are applied (initial load or cleared filters)\n      if (!courseTypeId && !courseId && !classId && !examId) {\n        console.log('No filters provided; skipping subjects API call');\n        setSubjects([]);\n        return;\n      }\n      // Build cache key and use 5s cache + 1.5s dedup + abort\n      const key = `ct:${courseTypeId || ''}|c:${courseId || ''}|cl:${classId || ''}|e:${examId || ''}|a:${active ? '1' : '0'}`;\n      const now = Date.now();\n      const cached = subjectsCacheRef.current.get(key);\n      let data;\n      if (cached && now - cached.ts < 5000) {\n        data = cached.data;\n      } else {\n        if (key === lastSubjectsKeyRef.current && now - lastSubjectsAtRef.current < 2000) {\n          // skip duplicate\n          data = [];\n        } else {\n          if (subjectsAbortRef.current) {\n            try { subjectsAbortRef.current.abort(); } catch(_) {}\n          }\n          subjectsAbortRef.current = new AbortController();\n          // Record before awaiting to dedup concurrent triggers\n          lastSubjectsKeyRef.current = key;\n          lastSubjectsAtRef.current = now;\n          // Use all-linkages filter endpoint instead of old /subjects\n          data = await getAllSubjectLinkages(token, { courseTypeId, courseId, classId, examId, active });\n          subjectsCacheRef.current.set(key, { data, ts: now });\n        }\n      }\n      console.log('Fetched subjects raw data:', data);\n      \n      // Normalize linkage/data array\n      let items = Array.isArray(data) ? data : (data?.content || data?.data || []);\n      if (!Array.isArray(items)) items = [];\n      console.log('Final subjects array (linkages):', items);\n      setSubjects(items);\n    } catch (error) {\n      console.error('Error fetching subjects:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      \n      // Validate required fields\n      if (!formData.name || !formData.name.trim()) {\n        addNotification({\n          type: 'error',\n          message: 'Master subject selection is required',\n          duration: 5000\n        });\n        return;\n      }\n      \n      if (!formData.courseType.id) {\n        addNotification({\n          type: 'error',\n          message: 'Course type is required',\n          duration: 5000\n        });\n        return;\n      }\n      \n      // Determine course type and selected subject\n      const courseTypeId = parseInt(formData.courseType.id);\n      const subjectId = formData.masterSubjectId ? parseInt(formData.masterSubjectId) : null;\n      const displayOrderVal = formData.displayOrder ? parseInt(formData.displayOrder) : 0;\n      if (!subjectId) {\n        addNotification({ type: 'error', message: 'Please select a subject', duration: 4000 });\n        return;\n      }\n      \n      if (editingId) {\n        // Preserve existing update flow (if used)\n        const updatePayload = {\n          name: formData.name.trim(),\n          description: formData.description ? formData.description.trim() : '',\n          courseTypeId,\n          displayOrder: displayOrderVal,\n          isActive: formData.isActive\n        };\n        await updateSubject(token, editingId, updatePayload);\n        addNotification({\n          type: 'success',\n          message: 'Subject updated successfully',\n          duration: 3000\n        });\n      } else {\n        // Build unified link request\n        const linkRequest = { subjectId, displayOrder: displayOrderVal };\n        if (courseTypeId === 1) {\n          if (!formData.class?.id) {\n            addNotification({ type: 'error', message: 'Please select a Class to link the subject', duration: 4000 });\n            return;\n          }\n          linkRequest.classId = parseInt(formData.class.id);\n          linkRequest.isActive = !!formData.isActive;\n        } else if (courseTypeId === 2) {\n          if (!formData.exam?.id) {\n            addNotification({ type: 'error', message: 'Please select an Exam to link the subject', duration: 4000 });\n            return;\n          }\n          linkRequest.examId = parseInt(formData.exam.id);\n          if (formData.weightage) linkRequest.weightage = parseInt(formData.weightage);\n        } else if (courseTypeId === 3) {\n          if (!formData.course?.id) {\n            addNotification({ type: 'error', message: 'Please select a Course to link the subject', duration: 4000 });\n            return;\n          }\n          linkRequest.courseId = parseInt(formData.course.id);\n          if (formData.isCompulsory !== undefined) linkRequest.isCompulsory = !!formData.isCompulsory;\n        } else {\n          addNotification({ type: 'error', message: 'Unsupported course type for linking', duration: 4000 });\n          return;\n        }\n\n        await createSubjectWithAutoLink(token, linkRequest);\n        addNotification({ type: 'success', message: 'Subject linked successfully', duration: 3000 });\n      }\n      \n      setShowForm(false);\n      setEditingId(null);\n      setFormData({ \n        name: '', \n        description: '', \n        masterSubjectId: '',\n        courseType: { id: '' }, \n        course: { id: '' },\n        class: { id: '' },\n        exam: { id: '' },\n        displayOrder: '', \n        isActive: true \n      });\n      // Refresh the subject list after successful save\n      const refreshCourseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\n      const refreshCourseId = selectedCourse ? parseInt(selectedCourse) : null;\n      const refreshClassId = selectedClass ? parseInt(selectedClass) : null;\n      const refreshExamId = selectedExam ? parseInt(selectedExam) : null;\n      \n      console.log('Refreshing subjects after save with filters:', {\n        refreshCourseTypeId, refreshCourseId, refreshClassId, refreshExamId, showActiveOnly\n      });\n      \n      // Always refresh - if no filters, fetch all linkages\n      if (refreshCourseTypeId || refreshCourseId || refreshClassId || refreshExamId) {\n        await fetchSubjects(refreshCourseTypeId, refreshCourseId, refreshClassId, refreshExamId, showActiveOnly);\n      } else {\n        // No filters: refresh all linkages\n        console.log('No filters applied, fetching all subject linkages');\n        const linkages = await getAllSubjectLinkages(token, {});\n        const list = Array.isArray(linkages) ? linkages : (linkages?.content || linkages?.data || []);\n        setSubjects(list || []);\n        subjectsCacheRef.current.set('ALL_LINKAGES', { data: list || [], ts: Date.now() });\n      }\n    } catch (error) {\n      console.error('Error saving subject:', error);\n      \n      // Extract error message from the error response\n      let errorMessage = 'Failed to save subject';\n      \n      if (error.message) {\n        // Check for specific error messages\n        if (error.message.includes('Subject is already assigned to this class')) {\n          errorMessage = 'Subject is already assigned to this class. Please select a different subject or class.';\n        } else if (error.message.includes('Subject with name') && error.message.includes('already exists')) {\n          errorMessage = 'A subject with this name already exists for this type. Please choose a different name.';\n        } else if (error.message.includes('400')) {\n          // Extract the actual error message from 400 responses\n          const errorText = error.message.split(' - ').pop();\n          if (errorText && errorText !== error.message) {\n            try {\n              const errorObj = JSON.parse(errorText);\n              errorMessage = errorObj.error || errorObj.message || errorMessage;\n            } catch (parseError) {\n              errorMessage = errorText;\n            }\n          }\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      addNotification({\n        type: 'error',\n        message: errorMessage,\n        duration: 5000\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEdit = (subject) => {\n    setFormData({\n      name: subject.name,\n      description: subject.description || '',\n      courseType: { id: subject.courseType?.id || '' },\n      course: { id: '' },\n      class: { id: '' },\n      exam: { id: '' },\n      displayOrder: subject.displayOrder || '',\n      isActive: subject.isActive\n    });\n    setEditingId(subject.id);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id) => {\n    if (window.confirm('Are you sure you want to delete this subject?')) {\n      try {\n        setLoading(true);\n        await deleteSubject(token, id);\n        addNotification({\n          type: 'success',\n          message: 'Subject deleted successfully',\n          duration: 3000\n        });\n        const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\n        const courseId = selectedCourse ? parseInt(selectedCourse) : null;\n        const classId = selectedClass ? parseInt(selectedClass) : null;\n        const examId = selectedExam ? parseInt(selectedExam) : null;\n        fetchSubjects(courseTypeId, courseId, classId, examId, showActiveOnly);\n      } catch (error) {\n        console.error('Error deleting subject:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({ \n      name: '', \n      description: '', \n      courseType: { id: '' }, \n      course: { id: '' },\n      class: { id: '' },\n      exam: { id: '' },\n      displayOrder: '', \n      isActive: true \n    });\n    setEditingId(null);\n    setShowForm(false);\n    setCourses([]);\n    setClasses([]);\n    setExams([]);\n    setMasterSubjects([]);\n  };\n\n\n  const handleCourseTypeChange = async (courseTypeId) => {\n    setFormData(prev => ({\n      ...prev,\n      courseType: { id: courseTypeId },\n      course: { id: '' },\n      class: { id: '' },\n      exam: { id: '' },\n      name: '' // Reset master subject selection\n    }));\n    setCourses([]);\n    setClasses([]);\n    setExams([]);\n    \n    if (courseTypeId) {\n      try {\n        setLoadingStates(prev => ({ ...prev, courses: true, masterSubjects: true }));\n        \n        // Fetch courses and master subjects for this course type (to populate subject dropdown)\n        const [coursesData, subjectsData] = await Promise.all([\n          getCourses(token, courseTypeId, 0, 100, 'createdAt', 'desc'),\n          getMasterSubjectsByCourseType(token, courseTypeId, { \n            active: showActiveOnly\n          })\n        ]);\n        \n        console.log('=== SUBJECT MANAGEMENT DEBUG ===');\n        console.log('Course Type ID:', courseTypeId);\n        console.log('Show Active Only:', showActiveOnly);\n        console.log('Raw courses API response:', coursesData);\n        console.log('Raw master subjects API response:', subjectsData);\n        console.log('Courses has content property:', !!coursesData.content);\n        console.log('Courses content length:', coursesData.content?.length);\n        console.log('Master subjects has content property:', !!subjectsData.content);\n        console.log('Master subjects content length:', subjectsData.content?.length);\n        console.log('Master subjects is array:', Array.isArray(subjectsData));\n        console.log('Master subjects type:', typeof subjectsData);\n        \n        // Handle different response formats for courses\n        let coursesArray = [];\n        if (Array.isArray(coursesData)) {\n          coursesArray = coursesData;\n        } else if (coursesData && Array.isArray(coursesData.content)) {\n          coursesArray = coursesData.content;\n        } else if (coursesData && Array.isArray(coursesData.data)) {\n          coursesArray = coursesData.data;\n        } else if (coursesData && coursesData.courses && Array.isArray(coursesData.courses)) {\n          coursesArray = coursesData.courses;\n        } else {\n          console.warn('Unexpected courses data format (handleCourseTypeChange):', coursesData);\n          coursesArray = [];\n        }\n        \n        // Keep only active if flag is on (use form's showActiveOnly toggle from top scope)\n        let normalizedCourses = coursesArray.filter(c => (showActiveOnly ? !!c.isActive : true));\n        normalizedCourses.sort((a, b) => (a.displayOrder || 0) - (b.displayOrder || 0) || a.name.localeCompare(b.name));\n\n        // Handle different response formats for master subjects\n        let subjectsArray = [];\n        if (Array.isArray(subjectsData)) {\n          subjectsArray = subjectsData;\n          console.log('Master subjects: Using direct array format');\n        } else if (subjectsData && Array.isArray(subjectsData.content)) {\n          subjectsArray = subjectsData.content;\n          console.log('Master subjects: Using content array format');\n        } else if (subjectsData && Array.isArray(subjectsData.data)) {\n          subjectsArray = subjectsData.data;\n          console.log('Master subjects: Using data array format');\n        } else if (subjectsData && subjectsData.subjects && Array.isArray(subjectsData.subjects)) {\n          subjectsArray = subjectsData.subjects;\n          console.log('Master subjects: Using subjects array format');\n        } else {\n          console.warn('Unexpected master subjects data format (handleCourseTypeChange):', subjectsData);\n          subjectsArray = [];\n        }\n        \n        console.log('Master subjects array after processing:', subjectsArray);\n        console.log('Master subjects array length:', subjectsArray.length);\n        \n        // Normalize subjects for dropdown as {id,label,description}\n        let normalizedMasterSubjects = subjectsArray\n          .filter(s => (showActiveOnly ? !!s.isActive : true))\n          .map(s => ({ id: s.id, label: s.name || '', description: s.description || '' }));\n        normalizedMasterSubjects.sort((a, b) => a.label.localeCompare(b.label));\n        \n        console.log('Master subjects after normalization:', normalizedMasterSubjects);\n        console.log('Normalized master subjects length:', normalizedMasterSubjects.length);\n\n        setCourses(normalizedCourses);\n        setMasterSubjects(normalizedMasterSubjects);\n        \n        console.log('Courses fetched:', coursesArray);\n        console.log('Master subjects fetched:', normalizedMasterSubjects);\n        console.log('Setting masterSubjects state with:', normalizedMasterSubjects.length, 'items');\n        console.log('=== END SUBJECT MANAGEMENT DEBUG ===');\n      } catch (error) {\n        console.error('Error fetching courses and master subjects:', error);\n        addNotification({\n          type: 'error',\n          message: `Failed to fetch courses and master subjects: ${error.message}`,\n          duration: 5000\n        });\n        setCourses([]);\n        setMasterSubjects([]);\n      } finally {\n        setLoadingStates(prev => ({ ...prev, courses: false, masterSubjects: false }));\n      }\n    } else {\n      setMasterSubjects([]);\n    }\n  };\n\n  const handleCourseChange = async (courseId) => {\n    setFormData(prev => ({\n      ...prev,\n      course: { id: courseId },\n      class: { id: '' },\n      exam: { id: '' },\n      // Clear master subject selection when course changes\n      name: '',\n      description: '',\n      masterSubjectId: ''\n    }));\n    setClasses([]);\n    setExams([]);\n    \n    if (courseId && formData.courseType.id) {\n      const courseTypeId = parseInt(formData.courseType.id);\n      console.log('Course changed:', courseId, 'Course Type:', courseTypeId);\n      \n      try {\n        setLoadingStates(prev => ({ ...prev, classes: true, exams: true }));\n        \n        // Fetch both classes and exams using course-specific endpoints with pagination\n        const [classesData, examsData] = await Promise.all([\n          getClassesByCourse(token, courseId, 0, 100, 'createdAt', 'desc'),\n          getExamsByCourse(token, courseId, 0, 100, 'createdAt', 'desc')\n        ]);\n        \n        console.log('Raw classes API response (handleCourseChange):', classesData);\n        console.log('Raw exams API response (handleCourseChange):', examsData);\n        console.log('Classes has content property:', !!classesData.content);\n        console.log('Classes content length:', classesData.content?.length);\n        console.log('Exams has content property:', !!examsData.content);\n        console.log('Exams content length:', examsData.content?.length);\n        \n        // Handle different response formats for classes\n        let classesArray = [];\n        if (Array.isArray(classesData)) {\n          classesArray = classesData;\n        } else if (classesData && Array.isArray(classesData.content)) {\n          classesArray = classesData.content;\n        } else if (classesData && Array.isArray(classesData.data)) {\n          classesArray = classesData.data;\n        } else if (classesData && classesData.classes && Array.isArray(classesData.classes)) {\n          classesArray = classesData.classes;\n        } else {\n          console.warn('Unexpected classes data format (handleCourseChange):', classesData);\n          classesArray = [];\n        }\n        \n        let normalizedClasses = classesArray.filter(cl => (showActiveOnly ? !!cl.isActive : true));\n        normalizedClasses.sort((a, b) => (a.displayOrder || 0) - (b.displayOrder || 0) || a.name.localeCompare(b.name));\n\n        // Handle different response formats for exams\n        let examsArray = [];\n        if (Array.isArray(examsData)) {\n          examsArray = examsData;\n        } else if (examsData && Array.isArray(examsData.content)) {\n          examsArray = examsData.content;\n        } else if (examsData && Array.isArray(examsData.data)) {\n          examsArray = examsData.data;\n        } else if (examsData && examsData.exams && Array.isArray(examsData.exams)) {\n          examsArray = examsData.exams;\n        } else {\n          console.warn('Unexpected exams data format (handleCourseChange):', examsData);\n          examsArray = [];\n        }\n        \n        let normalizedExams = examsArray.filter(ex => (showActiveOnly ? !!ex.isActive : true));\n        normalizedExams.sort((a, b) => (a.displayOrder || 0) - (b.displayOrder || 0) || a.name.localeCompare(b.name));\n        \n        setClasses(normalizedClasses);\n        setExams(normalizedExams);\n        \n        console.log('Classes fetched:', classesArray);\n        console.log('Exams fetched:', examsArray);\n        \n      } catch (error) {\n        console.error('Error in handleCourseChange:', error);\n        addNotification({\n          type: 'error',\n          message: 'Failed to fetch classes and exams',\n          duration: 5000\n        });\n        setClasses([]);\n        setExams([]);\n      } finally {\n        setLoadingStates(prev => ({ ...prev, classes: false, exams: false }));\n      }\n    }\n  };\n\n\n  return (\n    <div className=\"master-data-component\">\n      <div className=\"component-header\">\n        <div className=\"header-info\">\n          <h2>Subject Management</h2>\n          <p>Create subjects once per course type. Subjects are shared across all classes within a course type.</p>\n        </div>\n        <div className=\"header-actions\">\n          <button \n            className=\"btn btn-primary\"\n            onClick={() => setShowForm(true)}\n          >\n            Add Subject\n          </button>\n        </div>\n      </div>\n\n       {/* Drill-down Filters */}\n       <div className=\"filter-section\">\n         <div className=\"filter-header\">\n           <h4>Filter Subjects</h4>\n           <div className=\"filter-header-controls\">\n             <label className=\"filter-checkbox\">\n               <input\n                 type=\"checkbox\"\n                 checked={showActiveOnly}\n                 onChange={(e) => setShowActiveOnly(e.target.checked)}\n               />\n               <span>Active Only</span>\n             </label>\n             <button \n               className=\"btn btn-outline btn-xs\"\n               onClick={() => {\n                 setSelectedCourseType('');\n                 setSelectedCourse('');\n                 setSelectedClass('');\n                 setSelectedExam('');\n                 setFilteredCourses([]);\n                 setFilteredClasses([]);\n                 setFilteredExams([]);\n               }}\n               disabled={loading}\n             >\n               Clear All Filters\n             </button>\n           </div>\n         </div>\n         \n         {(loading && courseTypes.length === 0) ? (\n           <div className=\"empty-state\">\n             <div className=\"empty-icon\">No Subjects</div>\n             <h4>Loading Course Types...</h4>\n             <p>Please wait while we load the course types</p>\n           </div>\n         ) : (\n           <div className=\"filter-row\">\n             {/* Course Type Filter */}\n             <div className=\"filter-group\">\n               <label htmlFor=\"course-type-filter\">1. Course Type:</label>\n               <select\n                 id=\"course-type-filter\"\n                 value={selectedCourseType}\n                 onChange={(e) => setSelectedCourseType(e.target.value)}\n                 className=\"filter-select\"\n               >\n                 <option value=\"\">Select Course Type</option>\n                 {Array.isArray(courseTypes) && courseTypes.length > 0 ? courseTypes.map(courseType => (\n                   <option key={courseType.id} value={courseType.id}>\n                     {courseType.name}\n                   </option>\n                 )) : (\n                   <option value=\"\" disabled>Loading course types...</option>\n                 )}\n               </select>\n             </div>\n\n             {/* Course Filter */}\n             <div className=\"filter-group\">\n               <label htmlFor=\"course-filter\">2. Course:</label>\n               <select\n                 id=\"course-filter\"\n                 value={selectedCourse}\n                 onChange={(e) => setSelectedCourse(e.target.value)}\n                 className=\"filter-select\"\n                 disabled={!selectedCourseType}\n               >\n                 <option value=\"\">Select Course</option>\n                 {Array.isArray(filteredCourses) && filteredCourses.map(course => (\n                   <option key={course.id} value={course.id}>\n                     {course.name}\n                   </option>\n                 ))}\n               </select>\n             </div>\n\n             {/* Class Filter (Academic only) */}\n             {isAcademicCourseType(selectedCourseType) && (\n               <div className=\"filter-group\">\n                 <label htmlFor=\"class-filter\">3. Class:</label>\n                 <select\n                   id=\"class-filter\"\n                   value={selectedClass}\n                   onChange={(e) => setSelectedClass(e.target.value)}\n                   className=\"filter-select\"\n                   disabled={!selectedCourse}\n                 >\n                   <option value=\"\">Select Class</option>\n                   {Array.isArray(filteredClasses) && filteredClasses.map(cls => (\n                     <option key={cls.id} value={cls.id}>\n                       {cls.name}\n                     </option>\n                   ))}\n                 </select>\n               </div>\n             )}\n\n             {/* Exam Filter (Competitive only) */}\n             {isCompetitiveCourseType(selectedCourseType) && (\n               <div className=\"filter-group\">\n                 <label htmlFor=\"exam-filter\">3. Exam:</label>\n                 <select\n                   id=\"exam-filter\"\n                   value={selectedExam}\n                   onChange={(e) => setSelectedExam(e.target.value)}\n                   className=\"filter-select\"\n                   disabled={!selectedCourse}\n                 >\n                   <option value=\"\">Select Exam</option>\n                   {Array.isArray(filteredExams) && filteredExams.map(exam => (\n                     <option key={exam.id} value={exam.id}>\n                       {exam.name}\n                     </option>\n                   ))}\n                 </select>\n               </div>\n             )}\n           </div>\n         )}\n       </div>\n\n      {showForm && (\n        <div className=\"form-section\">\n          <div className=\"form-header\">\n            <h3>{editingId ? 'Edit Subject' : 'Add New Subject'}</h3>\n            <button className=\"btn btn-outline btn-sm\" onClick={resetForm}>\n              Cancel\n            </button>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"master-data-form\">\n            {/* Step 1: Course Type Selection */}\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"courseType\">Course Type *</label>\n                <select\n                  id=\"courseType\"\n                  name=\"courseType\"\n                  value={formData.courseType.id}\n                  onChange={(e) => handleCourseTypeChange(e.target.value)}\n                  className=\"form-input\"\n                  required\n                >\n                  <option value=\"\">Select Course Type</option>\n                  {Array.isArray(courseTypes) && courseTypes.length > 0 ? courseTypes.map(courseType => (\n                    <option key={courseType.id} value={courseType.id}>\n                      {courseType.name}\n                    </option>\n                  )) : (\n                    <option value=\"\" disabled>Loading course types...</option>\n                  )}\n                </select>\n              </div>\n            </div>\n            \n            {/* Step 2: Course Selection */}\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"course\">Course *</label>\n                <select\n                  id=\"course\"\n                  name=\"course\"\n                  value={formData.course?.id || ''}\n                  onChange={(e) => handleCourseChange(e.target.value)}\n                  className=\"form-input\"\n                  disabled={!formData.courseType.id || loadingStates.courses}\n                  required\n                >\n                  <option value=\"\">\n                    {!formData.courseType.id ? 'Select Course Type first' : \n                     loadingStates.courses ? 'Loading courses...' : \n                     'Select Course'}\n                  </option>\n                  {courses.map(course => (\n                    <option key={course.id} value={course.id}>\n                      {course.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            {/* Step 3: Class/Exam Selection */}\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"class\">Link to Specific Class</label>\n                <select\n                  id=\"class\"\n                  name=\"class\"\n                  value={formData.class?.id || ''}\n                  onChange={(e) => setFormData({ ...formData, class: { id: e.target.value } })}\n                  className=\"form-input\"\n                  disabled={formData.courseType.id !== '1' || loadingStates.classes}\n                >\n                  <option value=\"\">\n                    {formData.courseType.id !== '1' ? 'Select Academic course type first' :\n                     loadingStates.classes ? 'Loading classes...' :\n                     'Select Class (Optional)'}\n                  </option>\n                  {classes.map(cls => (\n                    <option key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </option>\n                  ))}\n                  {formData.courseType.id === '1' && formData.course.id && classes.length === 0 && !loadingStates.classes && (\n                    <option value=\"\" disabled>No classes available</option>\n                  )}\n                </select>\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"exam\">Link to Specific Exam</label>\n                <select\n                  id=\"exam\"\n                  name=\"exam\"\n                  value={formData.exam?.id || ''}\n                  onChange={(e) => setFormData({ ...formData, exam: { id: e.target.value } })}\n                  className=\"form-input\"\n                  disabled={formData.courseType.id !== '2' || loadingStates.exams}\n                >\n                  <option value=\"\">\n                    {formData.courseType.id !== '2' ? 'Select Competitive course type first' :\n                     loadingStates.exams ? 'Loading exams...' :\n                     'Select Exam (Optional)'}\n                  </option>\n                  {exams.map(exam => (\n                    <option key={exam.id} value={exam.id}>\n                      {exam.name}\n                    </option>\n                  ))}\n                  {formData.courseType.id === '2' && formData.course.id && exams.length === 0 && !loadingStates.exams && (\n                    <option value=\"\" disabled>No exams available</option>\n                  )}\n                </select>\n              </div>\n            </div>\n            \n            {/* Step 4: Master Subject Selection */}\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"masterSubject\">Master Subject *</label>\n                <select\n                  id=\"masterSubject\"\n                  name=\"masterSubject\"\n                  value={formData.name}\n                  onChange={(e) => {\n                    const selectedSubjectLabel = e.target.value;\n                    const selectedMasterSubject = masterSubjects.find(ms => ms.label === selectedSubjectLabel);\n                    setFormData({ \n                      ...formData, \n                      name: selectedSubjectLabel,\n                      description: selectedMasterSubject?.description || '',\n                      masterSubjectId: selectedMasterSubject?.id || ''\n                    });\n                  }}\n                  className=\"form-input\"\n                  disabled={!formData.courseType.id || loadingStates.masterSubjects}\n                  required\n                >\n                  <option value=\"\">\n                    {!formData.courseType.id ? 'Select Course Type first' :\n                     loadingStates.masterSubjects ? 'Loading master subjects...' : \n                     'Select Master Subject'}\n                  </option>\n                  {masterSubjects.length > 0 ? masterSubjects.map(masterSubject => (\n                    <option key={masterSubject.id} value={masterSubject.label}>\n                      {masterSubject.label}\n                    </option>\n                  )) : (\n                    <option value=\"\" disabled>No master subjects available</option>\n                  )}\n                </select>\n                {masterSubjects.length > 0 && (\n                  <small className=\"form-help\">\n                    {masterSubjects.length} master subjects available\n                  </small>\n                )}\n              </div>\n            </div>\n            \n            {/* Additional Fields */}\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"displayOrder\">Display Order</label>\n                <input\n                  type=\"number\"\n                  id=\"displayOrder\"\n                  name=\"displayOrder\"\n                  value={formData.displayOrder}\n                  onChange={(e) => setFormData({ ...formData, displayOrder: e.target.value })}\n                  className=\"form-input\"\n                  placeholder=\"e.g., 1, 2, 3\"\n                  min=\"1\"\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"isActive\">Status</label>\n                <select\n                  id=\"isActive\"\n                  name=\"isActive\"\n                  value={formData.isActive}\n                  onChange={(e) => setFormData({ ...formData, isActive: e.target.value === 'true' })}\n                  className=\"form-input\"\n                >\n                  <option value={true}>Active</option>\n                  <option value={false}>Inactive</option>\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"form-row\">\n              <div className=\"form-group full-width\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  className=\"form-input\"\n                  placeholder={formData.name ? \"Description from master subject\" : \"Brief description of this subject\"}\n                  rows={3}\n                  readOnly={!!formData.name}\n                  style={{\n                    backgroundColor: formData.name ? '#f8f9fa' : '#fff',\n                    color: formData.name ? '#6c757d' : '#2c3e50',\n                    cursor: formData.name ? 'not-allowed' : 'text'\n                  }}\n                />\n                {formData.name && (\n                  <small className=\"form-help\">\n                    Description is automatically filled from the selected master subject\n                  </small>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"form-actions\">\n              <button type=\"button\" className=\"btn btn-outline\" onClick={resetForm}>\n                Cancel\n              </button>\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n                {loading ? 'Saving...' : (editingId ? 'Update Subject' : 'Create Subject')}\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      <div className=\"data-section\">\n        <div className=\"data-header\">\n          <h3>\n            Subjects ({(() => {\n              const ct = selectedCourseType ? parseInt(selectedCourseType) : null;\n              if (!Array.isArray(subjects)) return 0;\n              if (!ct) return subjects.length;\n              if (ct === 1) return subjects.filter(s => (s.courseTypeId === 1) || (s.structureType === 'ACADEMIC')).length;\n              if (ct === 2) return subjects.filter(s => (s.courseTypeId === 2) || (s.structureType === 'COMPETITIVE')).length;\n              return subjects.filter(s => (s.courseTypeId && s.courseTypeId !== 1 && s.courseTypeId !== 2) || (s.structureType === 'PROFESSIONAL')).length;\n            })()})\n          </h3>\n          <div className=\"data-actions\">\n            <button \n              className=\"btn btn-outline btn-sm\"\n              onClick={async () => {\n                const hasAnyFilter = !!(selectedCourseType || selectedCourse || selectedClass || selectedExam);\n                setLoading(true);\n                try {\n                  if (hasAnyFilter) {\n                    const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\n                    const courseId = selectedCourse ? parseInt(selectedCourse) : null;\n                    const classId = selectedClass ? parseInt(selectedClass) : null;\n                    const examId = selectedExam ? parseInt(selectedExam) : null;\n                    await fetchSubjects(courseTypeId, courseId, classId, examId, showActiveOnly);\n                  } else {\n                    // No filters: refresh all-linkages\n                    const linkages = await getAllSubjectLinkages(token, {});\n                    const list = Array.isArray(linkages) ? linkages : (linkages?.content || linkages?.data || []);\n                    setSubjects(list || []);\n                    subjectsCacheRef.current.set('ALL_LINKAGES', { data: list || [], ts: Date.now() });\n                  }\n                } catch (e) {\n                  console.warn('Refresh failed:', e?.message || e);\n                } finally {\n                  setLoading(false);\n                }\n              }}\n              disabled={loading}\n            >\n              Refresh\n            </button>\n          </div>\n        </div>\n\n        {loading ? (\n          <div className=\"loading-state\">\n            <div className=\"loading-spinner\"></div>\n            <p>Loading subjects...</p>\n          </div>\n        ) : subjects.length === 0 ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">No Subjects</div>\n            <h4>No Subjects Found</h4>\n            <p>Create your first subject to get started</p>\n            <button \n              className=\"btn btn-primary\"\n              onClick={() => setShowForm(true)}\n            >\n              Add Subject\n            </button>\n          </div>\n        ) : courseTypeNames.length === 0 ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">No Subjects</div>\n            <h4>No Subjects Found</h4>\n            <p>Create your first subject to get started</p>\n            <button \n              className=\"btn btn-primary\"\n              onClick={() => setShowForm(true)}\n            >\n              Add Subject\n            </button>\n          </div>\n        ) : (\n          <div className=\"subjects-container\">\n            {(() => {\n              // Group subjects by course type using flat API response structure\n              const academicSubjects = subjects.filter(subject => {\n                const courseTypeId = subject.courseTypeId || subject.courseType?.id;\n                return courseTypeId === 1 || courseTypeId === '1';\n              });\n\n              const competitiveSubjects = subjects.filter(subject => {\n                const courseTypeId = subject.courseTypeId || subject.courseType?.id;\n                return courseTypeId === 2 || courseTypeId === '2';\n              });\n\n              const professionalSubjects = subjects.filter(subject => {\n                const courseTypeId = subject.courseTypeId || subject.courseType?.id;\n                return courseTypeId === 3 || courseTypeId === '3';\n              });\n\n              // Subject field configuration\n              const subjectFields = [\n                { key: 'courseTypeName', label: 'Course Type' },\n                { key: 'courseName', label: 'Course' },\n                { key: 'className', label: 'Class', condition: (item) => item.className },\n                { key: 'examName', label: 'Exam', condition: (item) => item.examName },\n                { key: 'subjectType', label: 'Subject Type' },\n                { key: 'structureType', label: 'Structure Type' }\n              ];\n\n              const renderSubjectCard = (subject) => (\n                <DataCard\n                  key={`${subject.linkageId}-${subject.subjectId}`}\n                  item={subject}\n                  itemType=\"subject\"\n                  onEdit={(item) => handleEdit({ id: item.subjectId, name: item.subjectName })}\n                  onDelete={() => handleDelete(subject.subjectId)}\n                  fields={subjectFields}\n                />\n              );\n\n              return (\n                <>\n                  {/* Academic Subjects Section */}\n                  {academicSubjects.length > 0 && (\n                    <div className=\"subject-section\">\n                <div className=\"section-header\">\n                        <h3>Academic Course Subjects</h3>\n                        <span className=\"section-count\">({academicSubjects.length} subjects)</span>\n                </div>\n                <div className=\"data-grid\">\n                        {academicSubjects.map(renderSubjectCard)}\n                        </div>\n                        </div>\n                  )}\n\n                  {/* Competitive Subjects Section */}\n                  {competitiveSubjects.length > 0 && (\n                    <div className=\"subject-section\">\n                      <div className=\"section-header\">\n                        <h3>Competitive Course Subjects</h3>\n                        <span className=\"section-count\">({competitiveSubjects.length} subjects)</span>\n                      </div>\n                      <div className=\"data-grid\">\n                        {competitiveSubjects.map(renderSubjectCard)}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Professional Subjects Section */}\n                  {professionalSubjects.length > 0 && (\n                    <div className=\"subject-section\">\n                      <div className=\"section-header\">\n                        <h3>Professional Course Subjects</h3>\n                        <span className=\"section-count\">({professionalSubjects.length} subjects)</span>\n                      </div>\n                      <div className=\"data-grid\">\n                        {professionalSubjects.map(renderSubjectCard)}\n                    </div>\n                </div>\n                  )}\n\n                  {/* No subjects in any section */}\n                  {academicSubjects.length === 0 && competitiveSubjects.length === 0 && professionalSubjects.length === 0 && (\n                    <div className=\"empty-state\">\n                      <div className=\"empty-icon\">No Subjects</div>\n                      <h4>No Subjects Found</h4>\n                      <p>No subjects match your current filters. Try adjusting your filter criteria or create a new subject.</p>\n              </div>\n                  )}\n                </>\n              );\n            })()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SubjectManagement;\n"],"names":["DataCard","_ref","item","itemType","onEdit","onDelete","fields","badges","getItemDescription","description","getCreatedBy","createdByName","_jsxs","className","children","_jsx","getItemName","subjectName","name","topicName","concat","isActive","map","badge","key","label","value","condition","style","icon","badgeValue","onClick","handleEdit","handleDelete","id","field","fieldValue","Date","createdAt","toLocaleDateString","SubjectManagement","_formData$course2","_formData$class2","_formData$exam2","token","addNotification","useApp","subjects","setSubjects","useState","courseTypes","setCourseTypes","loading","setLoading","showForm","setShowForm","editingId","setEditingId","selectedCourseType","setSelectedCourseType","selectedCourse","setSelectedCourse","selectedClass","setSelectedClass","selectedExam","setSelectedExam","showActiveOnly","setShowActiveOnly","formData","setFormData","masterSubjectId","courseType","course","class","exam","displayOrder","courses","setCourses","classes","setClasses","exams","setExams","filteredCourses","setFilteredCourses","filteredClasses","setFilteredClasses","filteredExams","setFilteredExams","masterSubjects","setMasterSubjects","loadingStates","setLoadingStates","courseTypesAbortRef","useRef","courseTypesCacheRef","data","ts","subjectsAbortRef","subjectsCacheRef","Map","lastSubjectsKeyRef","lastSubjectsAtRef","useEffect","current","abort","_","hasInitialFetchRef","fetchData","linkages","getAllSubjectLinkages","list","Array","isArray","content","set","now","console","log","length","e","warn","message","didMountCourseType","didMountCourse","didMountClass","didMountExam","didMountActive","courseTypeId","parseInt","fetchCoursesByCourseType","items","courseId","fetchClassesAndExamsByCourse","classId","prev","_objectSpread","fetchSubjects","examId","groupedSubjects","groupSubjectsByType","grouped","forEach","subject","_subject$courseType","courseTypeName","find","ct","getCourseTypeName","push","courseTypeNames","Object","keys","sort","async","_data$content","getCourses","coursesArray","error","_classesData$content","_examsData$content","classesData","examsData","Promise","all","getClassesByCourse","getExamsByCourse","classesArray","examsArray","_courseTypesData","courseTypesData","AbortController","getCourseTypesCached","courseTypesArray","arguments","undefined","active","_data","_data2","cached","get","resetForm","type","checked","onChange","target","disabled","htmlFor","toLowerCase","includes","isAcademicCourseType","cls","isCompetitiveCourseType","onSubmit","preventDefault","trim","duration","subjectId","displayOrderVal","updatePayload","updateSubject","linkRequest","_formData$class","_formData$exam","weightage","_formData$course","isCompulsory","createSubjectWithAutoLink","refreshCourseTypeId","refreshCourseId","refreshClassId","refreshExamId","errorMessage","errorText","split","pop","errorObj","JSON","parse","parseError","_coursesData$content","_subjectsData$content","coursesData","subjectsData","getMasterSubjectsByCourseType","normalizedCourses","filter","c","a","b","localeCompare","subjectsArray","normalizedMasterSubjects","s","handleCourseTypeChange","required","_classesData$content2","_examsData$content2","normalizedClasses","cl","normalizedExams","ex","handleCourseChange","selectedSubjectLabel","selectedMasterSubject","ms","masterSubject","placeholder","min","rows","readOnly","backgroundColor","color","cursor","structureType","hasAnyFilter","academicSubjects","_subject$courseType3","competitiveSubjects","_subject$courseType4","professionalSubjects","_subject$courseType5","subjectFields","examName","renderSubjectCard","_subject$courseType2","window","confirm","deleteSubject","linkageId","_Fragment"],"sourceRoot":""}