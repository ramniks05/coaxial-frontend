{"version":3,"file":"static/js/611.634aa0ef.chunk.js","mappings":"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","sources":["components/master-data/ExamManagement.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useApp } from '../../context/AppContext';\nimport { createExam, deleteExam, getCourses, getExams, updateExam } from '../../services/masterDataService';\nimport './MasterDataComponent.css';\n\n// Reusable DataCard Component\nconst DataCard = ({ \n  item, \n  itemType = 'item',\n  onEdit, \n  onDelete,\n  fields = [],\n  badges = []\n}) => {\n  const handleEdit = () => {\n    if (onEdit) {\n      onEdit(item);\n    }\n  };\n\n  const handleDelete = () => {\n    if (onDelete) {\n      onDelete(item.id);\n    }\n  };\n\n  const renderField = (field) => {\n    const { key, label, value, condition } = field;\n    \n    if (condition && !condition(item)) {\n      return null;\n    }\n    \n    // Handle function-based value extraction\n    const fieldValue = typeof value === 'function' ? value(item) : (value || item[key]);\n    \n    if (!fieldValue) {\n      return null;\n    }\n    \n    return (\n      <p key={key}>\n        <strong>{label}:</strong> {fieldValue}\n      </p>\n    );\n  };\n\n  const renderBadge = (badge) => {\n    const { key, label, value, condition, style, icon } = badge;\n    \n    if (condition && !condition(item)) {\n      return null;\n    }\n    \n    const badgeValue = value || item[key];\n    \n    if (!badgeValue) {\n      return null;\n    }\n\n    return (\n      <span \n        key={key}\n        className=\"structure-badge\"\n        style={style}\n      >\n        {icon} {badgeValue}\n      </span>\n    );\n  };\n\n  const getItemName = () => {\n    switch (itemType) {\n      case 'subject':\n        return item.subjectName || item.name;\n      case 'topic':\n        return item.topicName || item.name;\n      case 'module':\n        return item.name;\n      case 'courseType':\n        return item.name;\n      case 'course':\n        return item.name;\n      case 'class':\n        return item.name;\n      case 'exam':\n        return item.name;\n      default:\n        return item.name;\n    }\n  };\n\n  const getItemDescription = () => {\n    return item.description;\n  };\n\n  const getCreatedBy = () => {\n    return item.createdByName;\n  };\n\n  return (\n    <div className=\"data-card\">\n      <div className=\"card-header\">\n        <div className=\"card-title\">\n          <h4>{getItemName()}</h4>\n          <div className=\"card-badges\">\n            <span className={`status-badge ${item.isActive ? 'active' : 'inactive'}`}>\n              {item.isActive ? 'Active' : 'Inactive'}\n            </span>\n            {badges.map(renderBadge)}\n          </div>\n        </div>\n        <div className=\"card-actions\">\n          <button \n            className=\"btn btn-outline btn-xs\"\n            onClick={handleEdit}\n          >\n            Edit\n          </button>\n          <button \n            className=\"btn btn-danger btn-xs\"\n            onClick={handleDelete}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"card-content\">\n        {getItemDescription() && (\n          <p className=\"description\">{getItemDescription()}</p>\n        )}\n        \n        {fields.map(renderField)}\n      </div>\n      \n      <div className=\"card-footer\">\n        <small className=\"text-muted\">\n          Created: {new Date(item.createdAt).toLocaleDateString()}\n          {getCreatedBy() && (\n            <span> by {getCreatedBy()}</span>\n          )}\n        </small>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Exam Management Component\n * \n * Features:\n * - 2-level filtering: Course Type → Course → Exams\n * - API automatically returns only active exams (isActive = true)\n * - Results are ordered by displayOrder and then by name\n * - Full CRUD operations for exams\n * - Dynamic course dropdown based on selected course type\n */\n\nconst ExamManagement = () => {\n  const { token, addNotification } = useApp();\n  const [exams, setExams] = useState([]);\n  const [courses, setCourses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [selectedCourse, setSelectedCourse] = useState('');\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    course: { id: '' },\n    displayOrder: '',\n    isActive: true\n  });\n\n  useEffect(() => {\n    if (token && !fetchDataInProgressRef.current) {\n      fetchData();\n    } else if (!token) {\n      console.warn('No token available, skipping data fetch');\n      addNotification({\n        type: 'warning',\n        message: 'Please log in to access exam management features',\n        duration: 5000\n      });\n    }\n  }, [token]);\n\n  // Refs for preventing duplicate calls and managing state\n  const isInitialMountRef = useRef(true);\n  const hasInitialFetchRef = useRef(false);\n  const coursesAbortRef = useRef(null);\n  const coursesCacheRef = useRef({ data: null, ts: 0, courseTypeId: null });\n  const lastCoursesQueryRef = useRef('');\n  const lastCoursesQueryTimeRef = useRef(0);\n  const fetchDataInProgressRef = useRef(false);\n\n  // Combined effect for handling filter changes\n  useEffect(() => {\n    // Skip initial mount to avoid duplicate calls\n    if (isInitialMountRef.current || !hasInitialFetchRef.current) {\n      isInitialMountRef.current = false;\n      return;\n    }\n    \n    if (selectedCourse) {\n      // Handle course change - fetch exams for specific course\n      console.log('Course changed to:', selectedCourse);\n      fetchExams(null, selectedCourse);\n    } else {\n      // Handle \"All Competitive Courses\" selection - fetch all competitive exams\n      console.log('Fetching all competitive exams');\n      fetchExams();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedCourse]);\n\n  // Abort/dedup/cache controls\n  const examsAbortRef = useRef(null);\n  const examsCacheRef = useRef(new Map()); // key => { data, ts }\n  const lastExamsKeyRef = useRef('');\n  const lastExamsAtRef = useRef(0);\n\n  // Cleanup abort controllers on unmount\n  useEffect(() => {\n    return () => {\n      if (examsAbortRef.current) {\n        try { examsAbortRef.current.abort(); } catch(_) {}\n      }\n      if (coursesAbortRef.current) {\n        try { coursesAbortRef.current.abort(); } catch(_) {}\n      }\n    };\n  }, []);\n\n  const fetchData = async () => {\n    // Prevent duplicate calls\n    if (fetchDataInProgressRef.current) {\n      console.log('fetchData already in progress, skipping duplicate call');\n      return;\n    }\n    \n    try {\n      fetchDataInProgressRef.current = true;\n      setLoading(true);\n      \n      // Debug token information\n      console.log('ExamManagement - Token status:', {\n        hasToken: !!token,\n        tokenLength: token ? token.length : 0,\n        tokenPreview: token ? token.substring(0, 20) + '...' : 'No token'\n      });\n      \n      if (!token) {\n        throw new Error('No authentication token available. Please log in again.');\n      }\n      \n      // Auto-fetch competitive courses (course type ID = 2) using getCourses with courseTypeId parameter\n      const now = Date.now();\n      const competitiveKey = 'courseType:2';\n      // 5s cache; if no fresh cache, always fetch (no hard skip)\n      const cacheFresh = (\n        coursesCacheRef.current.courseTypeId === 2 &&\n        coursesCacheRef.current.data &&\n        now - coursesCacheRef.current.ts < 5000\n      );\n      if (cacheFresh) {\n        setCourses(coursesCacheRef.current.data);\n      } else {\n        // Abort previous and fetch to ensure we aren't blocked\n        if (coursesAbortRef.current) {\n          try { coursesAbortRef.current.abort(); } catch(_) {}\n        }\n        coursesAbortRef.current = new AbortController();\n        // Record key/time BEFORE awaiting to avoid concurrent duplicates\n        lastCoursesQueryRef.current = competitiveKey;\n        lastCoursesQueryTimeRef.current = now;\n        const competitiveCoursesData = await getCourses(token, 2, 0, 100); // courseTypeId=2, page=0, size=100\n        const coursesArray = competitiveCoursesData.content || competitiveCoursesData;\n        const processed = Array.isArray(coursesArray) ? coursesArray : [];\n        setCourses(processed);\n        coursesCacheRef.current = { data: processed, ts: now, courseTypeId: 2 };\n      }\n\n      // Exams with 5s cache + 1.5s dedup\n      const examsKey = 'type:|course:'; // initial, no filters\n      let examsData;\n      const cached = examsCacheRef.current.get(examsKey);\n      if (cached && now - cached.ts < 5000) {\n        examsData = cached.data;\n      } else {\n        if (examsKey === lastExamsKeyRef.current && now - lastExamsAtRef.current < 2000) {\n          // skip duplicate initial fetch\n          examsData = null;\n        } else {\n          if (examsAbortRef.current) {\n            try { examsAbortRef.current.abort(); } catch(_) {}\n          }\n          examsAbortRef.current = new AbortController();\n          // Record last key/time BEFORE awaiting to dedup concurrent triggers\n          lastExamsKeyRef.current = examsKey;\n          lastExamsAtRef.current = now;\n          examsData = await getExams(token);\n          examsCacheRef.current.set(examsKey, { data: examsData, ts: now });\n        }\n      }\n      \n      console.log('ExamManagement - Raw API responses:', { examsData });\n      \n      // Handle paginated response - extract content array for exams\n      if (examsData) {\n        const examsArray = examsData.content || examsData;\n        setExams(Array.isArray(examsArray) ? examsArray : []);\n      }\n      // Courses were set above via cache/dedup logic\n      \n      console.log('ExamManagement - Processed data:', {\n        examsCount: Array.isArray(exams) ? exams.length : 0,\n        coursesCount: Array.isArray(courses) ? courses.length : 0\n      });\n      \n      // Mark that initial fetch is complete\n      hasInitialFetchRef.current = true;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      \n      // Provide more specific error messages\n      let errorMessage = 'Failed to fetch data';\n      if (error.message.includes('Unauthorized')) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.message.includes('No authentication token')) {\n        errorMessage = 'Please log in to access this feature.';\n      } else if (error.message.includes('Failed to fetch')) {\n        errorMessage = 'Unable to connect to server. Please check your connection.';\n      }\n      \n      addNotification({\n        type: 'error',\n        message: errorMessage,\n        duration: 7000\n      });\n    } finally {\n      setLoading(false);\n      fetchDataInProgressRef.current = false;\n    }\n  };\n\n\n  const fetchExams = async (courseTypeId = null, courseId = null) => {\n    try {\n      setLoading(true);\n      // Convert string values to numbers for API call\n      const typeId = courseTypeId ? parseInt(courseTypeId) : null;\n      const id = courseId ? parseInt(courseId) : null;\n      \n      // cache key + 5s cache + 1.5s dedup + abort\n      const key = `type:${typeId || ''}|course:${id || ''}`;\n      const now = Date.now();\n      const cached = examsCacheRef.current.get(key);\n      let data;\n      if (cached && now - cached.ts < 5000) {\n        data = cached.data;\n      } else {\n        if (key === lastExamsKeyRef.current && now - lastExamsAtRef.current < 2000) {\n          data = [];\n        } else {\n          if (examsAbortRef.current) {\n            try { examsAbortRef.current.abort(); } catch(_) {}\n          }\n          examsAbortRef.current = new AbortController();\n          // Record last key/time BEFORE awaiting to dedup concurrent triggers\n          lastExamsKeyRef.current = key;\n          lastExamsAtRef.current = now;\n          data = await getExams(token, typeId, id);\n          examsCacheRef.current.set(key, { data, ts: now });\n        }\n      }\n      \n      // Handle paginated response - extract content array for exams\n      const examsArray = data.content || data;\n      setExams(Array.isArray(examsArray) ? examsArray : []);\n    } catch (error) {\n      console.error('Error fetching exams:', error);\n      addNotification({\n        type: 'error',\n        message: 'Failed to fetch exams',\n        duration: 5000\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      \n      // Validate required fields\n      if (!formData.name || !formData.name.trim()) {\n        addNotification({\n          type: 'error',\n          message: 'Exam name is required',\n          duration: 5000\n        });\n        return;\n      }\n      \n      if (!formData.course.id) {\n        addNotification({\n          type: 'error',\n          message: 'Course is required',\n          duration: 5000\n        });\n        return;\n      }\n      \n      // Prepare data in the correct format according to backend requirements\n      const submitData = {\n        name: formData.name.trim(),\n        description: formData.description ? formData.description.trim() : '', // Ensure description is never null\n        courseId: parseInt(formData.course.id),\n        displayOrder: formData.displayOrder ? parseInt(formData.displayOrder) : 0,\n        isActive: formData.isActive\n      };\n      \n      console.log('Form data being submitted:', submitData);\n      \n      if (editingId) {\n        await updateExam(token, editingId, submitData);\n        addNotification({\n          type: 'success',\n          message: 'Exam updated successfully',\n          duration: 3000\n        });\n      } else {\n        await createExam(token, submitData);\n        addNotification({\n          type: 'success',\n          message: 'Exam created successfully',\n          duration: 3000\n        });\n      }\n      \n      setShowForm(false);\n      setEditingId(null);\n      setFormData({ name: '', description: '', course: { id: '' }, displayOrder: '', isActive: true });\n      \n      // Clear caches to ensure fresh data\n      examsCacheRef.current.clear();\n      coursesCacheRef.current = { data: null, ts: 0, courseTypeId: null };\n      \n      // Refresh the exam list with current filters\n      if (selectedCourse) {\n        fetchExams(null, selectedCourse);\n      } else {\n        fetchExams();\n      }\n    } catch (error) {\n      console.error('Error saving exam:', error);\n      addNotification({\n        type: 'error',\n        message: `Failed to save exam: ${error.message}`,\n        duration: 5000\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEdit = (exam) => {\n    const courseId = exam.course?.id || exam.courseId;\n    \n    setFormData({\n      name: exam.name,\n      description: exam.description || '',\n      course: { id: courseId || '' },\n      displayOrder: exam.displayOrder || '',\n      isActive: exam.isActive\n    });\n    \n    if (courseId) {\n      setSelectedCourse(courseId.toString());\n    }\n    \n    setEditingId(exam.id);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id) => {\n    if (window.confirm('Are you sure you want to delete this exam?')) {\n      try {\n        setLoading(true);\n        await deleteExam(token, id);\n        addNotification({\n          type: 'success',\n          message: 'Exam deleted successfully',\n          duration: 3000\n        });\n        \n        // Clear caches to ensure fresh data\n        examsCacheRef.current.clear();\n        coursesCacheRef.current = { data: null, ts: 0, courseTypeId: null };\n        \n        // Refresh the exam list with current filters\n        if (selectedCourse) {\n          fetchExams(null, selectedCourse);\n        } else {\n          fetchExams();\n        }\n      } catch (error) {\n        console.error('Error deleting exam:', error);\n        addNotification({\n          type: 'error',\n          message: 'Failed to delete exam',\n          duration: 5000\n        });\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({ name: '', description: '', course: { id: '' }, displayOrder: '', isActive: true });\n    setEditingId(null);\n    setShowForm(false);\n  };\n\n  const getCourseName = (courseId) => {\n    if (!Array.isArray(courses)) {\n      console.warn('courses is not an array:', courses);\n      return 'Unknown';\n    }\n    const course = courses.find(c => c.id === courseId);\n    return course ? course.name : 'Unknown';\n  };\n\n  const getCourseTypeName = (courseTypeId) => {\n    // For competitive exams, always return 'Competitive'\n    return 'Competitive';\n  };\n\n\n  return (\n    <div className=\"master-data-component\">\n      <div className=\"component-header\">\n        <div className=\"header-info\">\n          <h2>Exam Management</h2>\n          <p>Manage exams for all course types (e.g., JEE, NEET, UPSC, Mid-term, Final)</p>\n        </div>\n        <div style={{ display: 'flex', gap: '10px' }}>\n          <button \n            className=\"btn btn-primary\"\n            onClick={() => setShowForm(true)}\n          >\n            Add Exam\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"filter-section\">\n        <div className=\"filter-group\">\n          <label htmlFor=\"course-filter\">Competitive Course:</label>\n          <select\n            id=\"course-filter\"\n            value={selectedCourse}\n            onChange={(e) => setSelectedCourse(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"\">All Competitive Courses</option>\n            {Array.isArray(courses) && courses.length > 0 ? courses.map(course => (\n              <option key={course.id} value={course.id}>\n                {course.name}\n              </option>\n            )) : (\n              <option value=\"\" disabled>No competitive courses available</option>\n            )}\n          </select>\n        </div>\n      </div>\n\n      {showForm && (\n        <div className=\"form-section\">\n          <div className=\"form-header\">\n            <h3>{editingId ? 'Edit Exam' : 'Add New Exam'}</h3>\n            <button className=\"btn btn-outline btn-sm\" onClick={resetForm}>\n              Cancel\n            </button>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"master-data-form\">\n            {/* Basic Information */}\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"name\">Exam Name *</label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"form-input\"\n                  required\n                  placeholder=\"e.g., JEE Main, NEET, UPSC Prelims\"\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"course\">Course *</label>\n                <select\n                  id=\"course\"\n                  name=\"course\"\n                  value={formData.course.id}\n                  onChange={(e) => setFormData({ \n                    ...formData, \n                    course: { id: e.target.value }\n                  })}\n                  className=\"form-input\"\n                  required\n                >\n                  <option value=\"\">Select Competitive Course</option>\n                  {Array.isArray(courses) && courses.length > 0 ? courses.map(course => (\n                    <option key={course.id} value={course.id}>\n                      {course.name}\n                    </option>\n                  )) : (\n                    <option value=\"\" disabled>No competitive courses available - Create a competitive course first</option>\n                  )}\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"form-row\">\n              <div className=\"form-group full-width\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  className=\"form-input\"\n                  placeholder=\"Brief description of this exam\"\n                  rows={3}\n                />\n              </div>\n            </div>\n            \n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"displayOrder\">Display Order</label>\n                <input\n                  type=\"number\"\n                  id=\"displayOrder\"\n                  name=\"displayOrder\"\n                  value={formData.displayOrder}\n                  onChange={(e) => setFormData({ ...formData, displayOrder: e.target.value })}\n                  className=\"form-input\"\n                  placeholder=\"e.g., 1, 2, 3\"\n                  min=\"1\"\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"isActive\">Status</label>\n                <select\n                  id=\"isActive\"\n                  name=\"isActive\"\n                  value={formData.isActive}\n                  onChange={(e) => setFormData({ ...formData, isActive: e.target.value === 'true' })}\n                  className=\"form-input\"\n                >\n                  <option value={true}>Active</option>\n                  <option value={false}>Inactive</option>\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"form-actions\">\n              <button type=\"button\" className=\"btn btn-outline\" onClick={resetForm}>\n                Cancel\n              </button>\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n                {loading ? 'Saving...' : (editingId ? 'Update Exam' : 'Create Exam')}\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      <div className=\"data-section\">\n        <div className=\"data-header\">\n          <h3>Exams ({exams.length})</h3>\n          <div className=\"data-actions\">\n            <button \n              className=\"btn btn-outline btn-sm\"\n              onClick={() => {\n                if (selectedCourse) {\n                  fetchExams(null, selectedCourse);\n                } else {\n                  fetchExams();\n                }\n              }}\n              disabled={loading}\n            >\n              Refresh\n            </button>\n          </div>\n        </div>\n\n        {loading ? (\n          <div className=\"loading-state\">\n            <div className=\"loading-spinner\"></div>\n            <p>Loading exams...</p>\n          </div>\n        ) : exams.length === 0 ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">No Exams</div>\n            <h4>No Exams Found</h4>\n            <p>\n              {selectedCourse ? `No active exams found for the selected course.` : 'No active exams have been created yet.'}\n            </p>\n            <p className=\"text-muted\">\n              <small>Note: Only active exams are displayed. Results are ordered by display order and name.</small>\n            </p>\n            <button \n              className=\"btn btn-primary\"\n              onClick={() => setShowForm(true)}\n            >\n              Create First Exam\n            </button>\n          </div>\n        ) : (\n          <div className=\"data-grid\">\n            {exams.map((exam) => {\n              // Exam field configuration with complex fallback logic\n              const examFields = [\n                { \n                  key: 'courseTypeName', \n                  label: 'Course Type',\n                  value: (item) => item.courseTypeName || item.course?.courseTypeName || getCourseTypeName(item.course?.courseType?.id || item.courseType?.id || item.courseTypeId)\n                },\n                { \n                  key: 'courseName', \n                  label: 'Course',\n                  value: (item) => item.courseName || getCourseName(item.course?.id || item.courseId)\n                }\n              ];\n\n              return (\n                <DataCard\n                  key={exam.id}\n                  item={exam}\n                  itemType=\"exam\"\n                  onEdit={handleEdit}\n                  onDelete={handleDelete}\n                  fields={examFields}\n                />\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ExamManagement;\n"],"names":["DataCard","_ref","item","itemType","onEdit","onDelete","fields","badges","getItemDescription","description","getCreatedBy","createdByName","_jsxs","className","children","_jsx","getItemName","subjectName","name","topicName","concat","isActive","map","badge","key","label","value","condition","style","icon","badgeValue","onClick","handleEdit","handleDelete","id","field","fieldValue","Date","createdAt","toLocaleDateString","ExamManagement","token","addNotification","useApp","exams","setExams","useState","courses","setCourses","loading","setLoading","showForm","setShowForm","editingId","setEditingId","selectedCourse","setSelectedCourse","formData","setFormData","course","displayOrder","useEffect","fetchDataInProgressRef","current","fetchData","console","warn","type","message","duration","isInitialMountRef","useRef","hasInitialFetchRef","coursesAbortRef","coursesCacheRef","data","ts","courseTypeId","lastCoursesQueryRef","lastCoursesQueryTimeRef","log","fetchExams","examsAbortRef","examsCacheRef","Map","lastExamsKeyRef","lastExamsAtRef","abort","_","async","hasToken","tokenLength","length","tokenPreview","substring","Error","now","competitiveKey","AbortController","competitiveCoursesData","getCourses","coursesArray","content","processed","Array","isArray","examsKey","examsData","cached","get","getExams","set","examsArray","examsCount","coursesCount","error","errorMessage","includes","arguments","undefined","courseId","typeId","parseInt","exam","_exam$course","toString","window","confirm","deleteExam","clear","resetForm","display","gap","htmlFor","onChange","e","target","disabled","onSubmit","preventDefault","trim","submitData","updateExam","createExam","_objectSpread","required","placeholder","rows","min","examFields","_item$course","_item$course2","_item$course2$courseT","_item$courseType","courseTypeName","courseType","_item$course3","courseName","find","c","getCourseName"],"sourceRoot":""}