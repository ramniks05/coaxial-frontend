{"version":3,"file":"static/js/972.fbad331e.chunk.js","mappings":"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","sources":["components/master-data/ModuleManagement.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { getCourseTypesCached } from '../../services/globalApiCache';\r\nimport {\r\n  createModule,\r\n  deleteModule,\r\n  getAllSubjectLinkages,\r\n  getClassesByCourse,\r\n  getCourses,\r\n  getExamsByCourse,\r\n  getMasterSubjectsByCourseType,\r\n  getModulesCombinedFilter,\r\n  getTopicsByLinkage,\r\n  updateModule\r\n} from '../../services/masterDataService';\r\nimport './MasterDataComponent.css';\r\n\r\n// Reusable DataCard Component\r\nconst DataCard = ({ \r\n  item, \r\n  itemType = 'item',\r\n  onEdit, \r\n  onDelete,\r\n  fields = [],\r\n  badges = []\r\n}) => {\r\n  const handleEdit = () => {\r\n    if (onEdit) {\r\n      onEdit(item);\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if (onDelete) {\r\n      onDelete(item.id);\r\n    }\r\n  };\r\n\r\n  const renderField = (field) => {\r\n    const { key, label, value, condition } = field;\r\n    \r\n    if (condition && !condition(item)) {\r\n      return null;\r\n    }\r\n    \r\n    // Handle function-based value extraction\r\n    const fieldValue = typeof value === 'function' ? value(item) : (value || item[key]);\r\n    \r\n    if (!fieldValue) {\r\n      return null;\r\n    }\r\n    \r\n    return (\r\n      <p key={key}>\r\n        <strong>{label}:</strong> {fieldValue}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  const renderBadge = (badge) => {\r\n    const { key, label, value, condition, style, icon } = badge;\r\n    \r\n    if (condition && !condition(item)) {\r\n      return null;\r\n    }\r\n    \r\n    const badgeValue = value || item[key];\r\n    \r\n    if (!badgeValue) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <span \r\n        key={key}\r\n        className=\"structure-badge\"\r\n        style={style}\r\n      >\r\n        {icon} {badgeValue}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getItemName = () => {\r\n    switch (itemType) {\r\n      case 'subject':\r\n        return item.subjectName || item.name;\r\n      case 'topic':\r\n        return item.topicName || item.name;\r\n      case 'module':\r\n        return item.name;\r\n      default:\r\n        return item.name;\r\n    }\r\n  };\r\n\r\n  const getItemDescription = () => {\r\n    return item.description;\r\n  };\r\n\r\n  const getCreatedBy = () => {\r\n    return item.createdByName;\r\n  };\r\n\r\n  return (\r\n    <div className=\"data-card\">\r\n      <div className=\"card-header\">\r\n        <div className=\"card-title\">\r\n          <h4>{getItemName()}</h4>\r\n          <div className=\"card-badges\">\r\n            <span className={`status-badge ${item.isActive ? 'active' : 'inactive'}`}>\r\n              {item.isActive ? 'Active' : 'Inactive'}\r\n            </span>\r\n            {badges.map(renderBadge)}\r\n          </div>\r\n        </div>\r\n        <div className=\"card-actions\">\r\n          <button \r\n            className=\"btn btn-outline btn-xs\"\r\n            onClick={handleEdit}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button \r\n            className=\"btn btn-danger btn-xs\"\r\n            onClick={handleDelete}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"card-content\">\r\n        {getItemDescription() && (\r\n          <p className=\"description\">{getItemDescription()}</p>\r\n        )}\r\n        \r\n        {fields.map(renderField)}\r\n      </div>\r\n      \r\n      <div className=\"card-footer\">\r\n        <small className=\"text-muted\">\r\n          Created: {new Date(item.createdAt).toLocaleDateString()}\r\n          {getCreatedBy() && (\r\n            <span> by {getCreatedBy()}</span>\r\n          )}\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ModuleManagement = () => {\r\n  const { token, addNotification } = useApp();\r\n  \r\n  // Helper functions for course type checking\r\n  const isAcademicCourseType = (courseTypeId) => courseTypeId === '1' || courseTypeId === 1;\r\n  const isCompetitiveCourseType = (courseTypeId) => courseTypeId === '2' || courseTypeId === 2;\r\n  const isProfessionalCourseType = (courseTypeId) => courseTypeId === '3' || courseTypeId === 3;\r\n\r\n  // Filter states (separate from form state)\r\n  const [selectedCourseType, setSelectedCourseType] = useState('');\r\n  const [selectedCourse, setSelectedCourse] = useState('');\r\n  const [selectedClass, setSelectedClass] = useState('');\r\n  const [selectedExam, setSelectedExam] = useState('');\r\n  const [selectedSubject, setSelectedSubject] = useState('');\r\n  const [selectedTopic, setSelectedTopic] = useState('');\r\n  const [showActiveOnly, setShowActiveOnly] = useState(true);\r\n  \r\n  // Form data state (separate from filter state)\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    displayOrder: '',\r\n    isActive: true,\r\n    courseType: { id: '' },\r\n    course: { id: '' },\r\n    class: { id: '' },\r\n    exam: { id: '' },\r\n    subjectId: '',\r\n    topicId: ''\r\n  });\r\n  \r\n  // Dropdown data states (for both filter and form)\r\n  const [courseTypes, setCourseTypes] = useState([]);\r\n  const [courses, setCourses] = useState([]);\r\n  const [classes, setClasses] = useState([]);\r\n  const [exams, setExams] = useState([]);\r\n  const [filteredCourses, setFilteredCourses] = useState([]);\r\n  const [filteredClasses, setFilteredClasses] = useState([]);\r\n  const [filteredExams, setFilteredExams] = useState([]);\r\n  const [masterSubjects, setMasterSubjects] = useState([]);\r\n  const [subjectLinkages, setSubjectLinkages] = useState([]);\r\n  const [topics, setTopics] = useState([]);\r\n  const [modules, setModules] = useState([]);\r\n  const [loadingStates, setLoadingStates] = useState({\r\n    courses: false,\r\n    classes: false,\r\n    exams: false,\r\n    masterSubjects: false,\r\n    subjects: false,\r\n    topics: false,\r\n    modules: false\r\n  });\r\n\r\n  // Component state\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  // Refs for preventing duplicate calls\r\n  const isInitialMountRef = useRef(true);\r\n  const fetchModulesInProgressRef = useRef(false);\r\n  const modulesAbortRef = useRef(null);\r\n  const courseTypesAbortRef = useRef(null);\r\n  const courseTypesCacheRef = useRef({ data: null, ts: 0 });\r\n  const didMountCourseType = useRef(false);\r\n  const didMountCourse = useRef(false);\r\n  const didMountClass = useRef(false);\r\n  const didMountExam = useRef(false);\r\n  const didMountActive = useRef(false);\r\n\r\n  // Cleanup abort controllers on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (courseTypesAbortRef.current) {\r\n        try { courseTypesAbortRef.current.abort(); } catch(_) {}\r\n      }\r\n      if (modulesAbortRef.current) {\r\n        try { modulesAbortRef.current.abort(); } catch(_) {}\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Initial data fetch\r\n  const fetchData = async () => {\r\n    if (!token) return;\r\n    \r\n    try {\r\n      console.log('🔄 Fetching initial course types for ModuleManagement');\r\n      const data = await getCourseTypesCached(token);\r\n      \r\n      // Robust array handling\r\n      let courseTypesArray = [];\r\n      if (Array.isArray(data)) {\r\n        courseTypesArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        courseTypesArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        courseTypesArray = data.data;\r\n      } else if (data && data.courseTypes && Array.isArray(data.courseTypes)) {\r\n        courseTypesArray = data.courseTypes;\r\n      } else {\r\n        console.warn('Unexpected course types data format:', data);\r\n        courseTypesArray = [];\r\n      }\r\n      \r\n      console.log('Normalized course types array:', courseTypesArray);\r\n      setCourseTypes(courseTypesArray);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching course types:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to load course types'\r\n      });\r\n    }\r\n  };\r\n\r\n  // Fetch courses by course type\r\n  const fetchCoursesByCourseType = async (courseTypeId) => {\r\n    if (!token || !courseTypeId) {\r\n      setFilteredCourses([]);\r\n      setCourses([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Fetching courses for course type:', courseTypeId);\r\n      \r\n      const data = await getCourses(token, courseTypeId, 0, 100, 'createdAt', 'desc');\r\n      console.log('Raw courses data from API:', data);\r\n      \r\n      // Robust array handling\r\n      let coursesArray = [];\r\n      if (Array.isArray(data)) {\r\n        coursesArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        coursesArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        coursesArray = data.data;\r\n      } else if (data && data.courses && Array.isArray(data.courses)) {\r\n        coursesArray = data.courses;\r\n      } else {\r\n        console.warn('Unexpected courses data format:', data);\r\n        coursesArray = [];\r\n      }\r\n      \r\n      console.log('Normalized courses array:', coursesArray);\r\n      setFilteredCourses(coursesArray);\r\n      setCourses(coursesArray); // Also set for form dropdowns\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching courses:', error);\r\n      setFilteredCourses([]);\r\n    }\r\n  };\r\n\r\n  // Fetch classes and exams by course\r\n  const fetchClassesAndExamsByCourse = async (courseTypeId, courseId) => {\r\n    if (!token || !courseTypeId || !courseId) {\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n      setClasses([]);\r\n      setExams([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Fetching classes and exams for course:', courseId, 'courseType:', courseTypeId);\r\n      \r\n      const [classesData, examsData] = await Promise.all([\r\n        getClassesByCourse(token, courseId, 0, 100, 'createdAt', 'desc'),\r\n        getExamsByCourse(token, courseId, 0, 100, 'createdAt', 'desc')\r\n      ]);\r\n      \r\n      console.log('Raw classes data:', classesData);\r\n      console.log('Raw exams data:', examsData);\r\n      \r\n      // Handle classes data\r\n      let classesArray = [];\r\n      if (Array.isArray(classesData)) {\r\n        classesArray = classesData;\r\n      } else if (classesData && Array.isArray(classesData.content)) {\r\n        classesArray = classesData.content;\r\n      } else if (classesData && Array.isArray(classesData.data)) {\r\n        classesArray = classesData.data;\r\n      } else {\r\n        classesArray = [];\r\n      }\r\n      \r\n      // Handle exams data\r\n      let examsArray = [];\r\n      if (Array.isArray(examsData)) {\r\n        examsArray = examsData;\r\n      } else if (examsData && Array.isArray(examsData.content)) {\r\n        examsArray = examsData.content;\r\n      } else if (examsData && Array.isArray(examsData.data)) {\r\n        examsArray = examsData.data;\r\n      } else {\r\n        examsArray = [];\r\n      }\r\n      \r\n      console.log('Normalized classes array:', classesArray);\r\n      console.log('Normalized exams array:', examsArray);\r\n      setFilteredClasses(classesArray);\r\n      setFilteredExams(examsArray);\r\n      setClasses(classesArray); // Also set for form dropdowns\r\n      setExams(examsArray); // Also set for form dropdowns\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching classes and exams:', error);\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n    }\r\n  };\r\n\r\n  // Fetch master subjects by course type\r\n  const fetchMasterSubjectsByCourseType = async (courseTypeId) => {\r\n    if (!token || !courseTypeId) {\r\n      setMasterSubjects([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Fetching master subjects for course type:', courseTypeId);\r\n      \r\n      const data = await getMasterSubjectsByCourseType(token, courseTypeId);\r\n      console.log('Raw master subjects data:', data);\r\n      \r\n      // Robust array handling\r\n      let subjectsArray = [];\r\n      if (Array.isArray(data)) {\r\n        subjectsArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        subjectsArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        subjectsArray = data.data;\r\n      } else if (data && data.subjects && Array.isArray(data.subjects)) {\r\n        subjectsArray = data.subjects;\r\n      } else {\r\n        console.warn('Unexpected master subjects data format:', data);\r\n        subjectsArray = [];\r\n      }\r\n      \r\n      console.log('Normalized master subjects array:', subjectsArray);\r\n      setMasterSubjects(subjectsArray);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching master subjects:', error);\r\n      setMasterSubjects([]);\r\n    }\r\n  };\r\n\r\n  // Fetch subject linkages\r\n  const fetchSubjectLinkages = async (courseTypeId, courseId, classId, examId) => {\r\n    if (!courseTypeId || !courseId) {\r\n      setSubjectLinkages([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Fetching subject linkages for:', { courseTypeId, courseId, classId, examId });\r\n      \r\n      const data = await getAllSubjectLinkages(token, {\r\n        courseTypeId,\r\n        courseId,\r\n        classId,\r\n        examId,\r\n        active: showActiveOnly\r\n      });\r\n      console.log('Raw subject linkages data from API:', data);\r\n      \r\n      // Robust array handling\r\n      let subjectsArray = [];\r\n      if (Array.isArray(data)) {\r\n        subjectsArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        subjectsArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        subjectsArray = data.data;\r\n      } else {\r\n        subjectsArray = [];\r\n      }\r\n      \r\n      console.log('Normalized subject linkages array:', subjectsArray);\r\n      setSubjectLinkages(subjectsArray);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching subject linkages:', error);\r\n      setSubjectLinkages([]);\r\n    }\r\n  };\r\n  // Fetch modules by topic\r\n  const fetchModulesByTopic = async (topicId) => {\r\n    if (!token || !topicId) {\r\n      setModules([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Fetching modules for topic:', topicId);\r\n      \r\n      const data = await getModulesCombinedFilter(token, {\r\n        topicId: parseInt(topicId),\r\n        active: showActiveOnly\r\n      });\r\n      console.log('Raw modules data from API:', data);\r\n      \r\n      // Robust array handling\r\n      let modulesArray = [];\r\n      if (Array.isArray(data)) {\r\n        modulesArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        modulesArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        modulesArray = data.data;\r\n      } else {\r\n        modulesArray = [];\r\n      }\r\n      \r\n      console.log('Normalized modules array:', modulesArray);\r\n      setModules(modulesArray);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching modules:', error);\r\n      setModules([]);\r\n    }\r\n  };\r\n\r\n  // Initial data fetch on mount\r\n  useEffect(() => {\r\n    if (isInitialMountRef.current) {\r\n      isInitialMountRef.current = false;\r\n      console.log('🔄 ModuleManagement: Initial mount, fetching data...');\r\n      fetchData();\r\n      // Initial load with all modules\r\n      console.log('🔄 ModuleManagement: Fetching initial modules...');\r\n      fetchModulesData();\r\n    }\r\n  }, [token]);\r\n\r\n  // Filter effects\r\n  useEffect(() => {\r\n    if (!didMountCourseType.current) { \r\n      didMountCourseType.current = true; \r\n      return; \r\n    }\r\n    \r\n    if (selectedCourseType) {\r\n      console.log('🔄 Filter: Course type changed to:', selectedCourseType);\r\n      const courseTypeId = parseInt(selectedCourseType);\r\n      \r\n      // Fetch courses for this course type\r\n      fetchCoursesByCourseType(courseTypeId);\r\n      \r\n      // Reset dependent filters\r\n      setSelectedCourse('');\r\n      setSelectedClass('');\r\n      setSelectedExam('');\r\n      setSelectedSubject('');\r\n      setSelectedTopic('');\r\n      setFilteredCourses([]);\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n      setSubjectLinkages([]);\r\n      setTopics([]);\r\n      setModules([]);\r\n    } else {\r\n      setFilteredCourses([]);\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n      setMasterSubjects([]);\r\n      setSubjectLinkages([]);\r\n      setTopics([]);\r\n      setModules([]);\r\n    }\r\n    \r\n    // Always fetch modules when any filter changes\r\n    fetchModulesData();\r\n  }, [selectedCourseType]);\r\n\r\n  useEffect(() => {\r\n    if (!didMountCourse.current) { \r\n      didMountCourse.current = true; \r\n      return; \r\n    }\r\n    \r\n    if (selectedCourse && selectedCourseType) {\r\n      console.log('🔄 Filter: Course changed to:', selectedCourse);\r\n      const courseTypeId = parseInt(selectedCourseType);\r\n      const courseId = parseInt(selectedCourse);\r\n      \r\n      // Fetch classes and exams for this course\r\n      fetchClassesAndExamsByCourse(courseTypeId, courseId);\r\n      \r\n      // Fetch subject linkages for this course\r\n      fetchSubjectLinkages(courseTypeId, courseId, null, null);\r\n      \r\n      // Reset dependent filters\r\n      setSelectedClass('');\r\n      setSelectedExam('');\r\n      setSelectedSubject('');\r\n      setSelectedTopic('');\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n      setTopics([]);\r\n      setModules([]);\r\n    } else {\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n      setSubjectLinkages([]);\r\n      setTopics([]);\r\n      setModules([]);\r\n    }\r\n    \r\n    // Always fetch modules when any filter changes\r\n    fetchModulesData();\r\n  }, [selectedCourse]);\r\n\r\n  useEffect(() => {\r\n    if (!didMountClass.current) { \r\n      didMountClass.current = true; \r\n      return; \r\n    }\r\n    \r\n    if (selectedClass && selectedCourse && selectedCourseType) {\r\n      console.log('🔄 Filter: Class changed to:', selectedClass);\r\n      const courseTypeId = parseInt(selectedCourseType);\r\n      const courseId = parseInt(selectedCourse);\r\n      const classId = parseInt(selectedClass);\r\n      \r\n      // Fetch subject linkages with class filter\r\n      fetchSubjectLinkages(courseTypeId, courseId, classId, null);\r\n      \r\n      // Reset exam and subject selection\r\n      setSelectedExam('');\r\n      setSelectedSubject('');\r\n      setSelectedTopic('');\r\n      setTopics([]);\r\n      setModules([]);\r\n    }\r\n    \r\n    // Always fetch modules when any filter changes\r\n    fetchModulesData();\r\n  }, [selectedClass]);\r\n\r\n  useEffect(() => {\r\n    if (!didMountExam.current) { \r\n      didMountExam.current = true; \r\n      return; \r\n    }\r\n    \r\n    if (selectedExam && selectedCourse && selectedCourseType) {\r\n      console.log('🔄 Filter: Exam changed to:', selectedExam);\r\n      const courseTypeId = parseInt(selectedCourseType);\r\n      const courseId = parseInt(selectedCourse);\r\n      const examId = parseInt(selectedExam);\r\n      \r\n      // Fetch subject linkages with exam filter\r\n      fetchSubjectLinkages(courseTypeId, courseId, null, examId);\r\n      \r\n      // Reset class and subject selection\r\n      setSelectedClass('');\r\n      setSelectedSubject('');\r\n      setSelectedTopic('');\r\n      setTopics([]);\r\n      setModules([]);\r\n    }\r\n    \r\n    // Always fetch modules when any filter changes\r\n    fetchModulesData();\r\n  }, [selectedExam]);\r\n\r\n  useEffect(() => {\r\n    if (!didMountActive.current) { \r\n      didMountActive.current = true; \r\n      return; \r\n    }\r\n    \r\n    const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\r\n    const courseId = selectedCourse ? parseInt(selectedCourse) : null;\r\n    const classId = selectedClass ? parseInt(selectedClass) : null;\r\n    const examId = selectedExam ? parseInt(selectedExam) : null;\r\n    \r\n    if (courseId) {\r\n      fetchSubjectLinkages(courseTypeId, courseId, classId, examId);\r\n    }\r\n    \r\n    // Always fetch modules when any filter changes\r\n    fetchModulesData();\r\n  }, [showActiveOnly]);\r\n  // Form handlers\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    console.log('🔄 Form input change:', name, value);\r\n    \r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value\r\n    }));\r\n  };\r\n\r\n  // Form effects for dependent dropdowns (separate from filter effects)\r\n  useEffect(() => {\r\n    console.log('🔄 Form effect triggered - courseTypeId:', formData.courseType?.id);\r\n    \r\n    if (formData.courseType?.id) {\r\n      console.log('🔄 Course type selected in form, fetching courses and master subjects');\r\n      const courseTypeId = parseInt(formData.courseType.id);\r\n      fetchCoursesByCourseType(courseTypeId);\r\n      fetchMasterSubjectsByCourseType(courseTypeId);\r\n    } else {\r\n      console.log('🔄 No course type selected, clearing dependent fields');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        course: { id: '' },\r\n        class: { id: '' },\r\n        exam: { id: '' },\r\n        subjectId: '',\r\n        topicId: ''\r\n      }));\r\n      setCourses([]);\r\n      setClasses([]);\r\n      setExams([]);\r\n      setMasterSubjects([]);\r\n    }\r\n  }, [formData.courseType?.id]);\r\n\r\n  useEffect(() => {\r\n    console.log('🔄 Form effect - courseId:', formData.course?.id);\r\n    \r\n    if (formData.course?.id && formData.courseType?.id) {\r\n      console.log('🔄 Course selected in form, fetching classes and exams');\r\n      const courseId = parseInt(formData.course.id);\r\n      const courseTypeId = parseInt(formData.courseType.id);\r\n      \r\n      // For professional courses, fetch subjects directly\r\n      if (formData.courseType?.id === '3') {\r\n        console.log('🔄 Professional course selected, fetching subjects by courseId only');\r\n        fetchSubjectLinkages(courseTypeId, courseId, null, null);\r\n      } else {\r\n        // For academic/competitive courses, fetch classes and exams\r\n        fetchClassesAndExamsByCourse(courseTypeId, courseId);\r\n      }\r\n    } else {\r\n      console.log('🔄 No course selected, clearing classes/exams/subjects');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        class: { id: '' },\r\n        exam: { id: '' },\r\n        subjectId: '',\r\n        topicId: ''\r\n      }));\r\n      setClasses([]);\r\n      setExams([]);\r\n    }\r\n  }, [formData.course?.id, formData.courseType?.id]);\r\n\r\n  useEffect(() => {\r\n    console.log('🔄 Form effect - class/exam change triggered');\r\n    console.log('🔄 Current formData.class?.id:', formData.class?.id);\r\n    console.log('🔄 Current formData.exam?.id:', formData.exam?.id);\r\n    console.log('🔄 Current formData.courseType?.id:', formData.courseType?.id);\r\n    \r\n    const courseTypeId = formData.courseType?.id;\r\n    const isProfessionalCourse = courseTypeId === '3'; // Professional course type\r\n    \r\n    if (formData.class?.id || formData.exam?.id || isProfessionalCourse) {\r\n      console.log('🔄 Class, exam, or professional course selected in form, fetching subjects');\r\n      // Clear subject when class/exam/course changes\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        subjectId: '',\r\n        topicId: ''\r\n      }));\r\n      \r\n      // Fetch subjects based on current selections\r\n      if (formData.courseType?.id && formData.course?.id) {\r\n        const courseTypeIdInt = parseInt(formData.courseType.id);\r\n        const courseIdInt = parseInt(formData.course.id);\r\n        \r\n        if (isProfessionalCourse) {\r\n          // For professional courses, fetch subjects by courseId only\r\n          console.log('🔄 Professional course detected, fetching subjects by courseId only:', courseIdInt);\r\n          fetchSubjectLinkages(courseTypeIdInt, courseIdInt, null, null);\r\n        } else {\r\n          // For academic/competitive courses, fetch subjects with class/exam filters\r\n          const classId = formData.class?.id ? parseInt(formData.class.id) : null;\r\n          const examId = formData.exam?.id ? parseInt(formData.exam.id) : null;\r\n          \r\n          console.log('🔄 Fetching subjects for courseTypeId:', courseTypeIdInt, 'courseId:', courseIdInt, 'classId:', classId, 'examId:', examId);\r\n          fetchSubjectLinkages(courseTypeIdInt, courseIdInt, classId, examId);\r\n        }\r\n      } else {\r\n        console.log('🔄 Missing courseType or course selection, cannot fetch subjects');\r\n      }\r\n    } else {\r\n      console.log('🔄 No class, exam, or professional course selected, clearing subjects');\r\n      setSubjectLinkages([]);\r\n    }\r\n  }, [formData.class?.id, formData.exam?.id, formData.courseType?.id]);\r\n\r\n  const handleFilterChange = (filterName, value) => {\r\n    console.log('🔄 Filter change:', filterName, value);\r\n    \r\n    switch (filterName) {\r\n      case 'courseTypeId':\r\n        console.log('🔄 Filter: Course type changed to:', value);\r\n        setSelectedCourseType(value);\r\n        break;\r\n      case 'courseId':\r\n        console.log('🔄 Filter: Course changed to:', value);\r\n        setSelectedCourse(value);\r\n        break;\r\n      case 'classId':\r\n        console.log('🔄 Filter: Class changed to:', value);\r\n        setSelectedClass(value);\r\n        break;\r\n      case 'examId':\r\n        console.log('🔄 Filter: Exam changed to:', value);\r\n        setSelectedExam(value);\r\n        break;\r\n      case 'subjectId':\r\n        console.log('🔄 Filter: Subject changed to:', value);\r\n        setSelectedSubject(value);\r\n        break;\r\n      case 'topicId':\r\n        console.log('🔄 Filter: Topic changed to:', value);\r\n        setSelectedTopic(value);\r\n        // Fetch modules when topic is selected\r\n        if (value) {\r\n          fetchModulesByTopic(value);\r\n        } else {\r\n          setModules([]);\r\n        }\r\n        break;\r\n      default:\r\n        console.log('Unknown filter name:', filterName);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      description: '',\r\n      displayOrder: '',\r\n      isActive: true,\r\n      courseType: { id: '' },\r\n      course: { id: '' },\r\n      class: { id: '' },\r\n      exam: { id: '' },\r\n      subjectId: '',\r\n      topicId: ''\r\n    });\r\n    setShowForm(false);\r\n    setEditingId(null);\r\n    // Clear form dropdown data\r\n    setCourses([]);\r\n    setClasses([]);\r\n    setExams([]);\r\n    setMasterSubjects([]);\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log('=== MODULE FORM SUBMISSION STARTED ===');\r\n    console.log('Form data:', formData);\r\n\r\n    // Basic validation\r\n    if (!formData.name.trim()) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Module name is required'\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!formData.courseType?.id) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Course type is required'\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!formData.subjectId) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Subject is required'\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!formData.topicId) {\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Topic is required'\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      \r\n      if (editingId) {\r\n        // Update existing module\r\n        const submitData = {\r\n          name: formData.name.trim(),\r\n          description: formData.description ? formData.description.trim() : '',\r\n          displayOrder: formData.displayOrder ? parseInt(formData.displayOrder) : 0,\r\n          isActive: formData.isActive,\r\n          topicId: parseInt(formData.topicId)\r\n        };\r\n        \r\n        await updateModule(token, editingId, submitData);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Module updated successfully',\r\n          duration: 3000\r\n        });\r\n      } else {\r\n        // Create new module\r\n        const submitData = {\r\n          name: formData.name.trim(),\r\n          description: formData.description ? formData.description.trim() : '',\r\n          displayOrder: formData.displayOrder ? parseInt(formData.displayOrder) : 0,\r\n          isActive: formData.isActive,\r\n          topicId: parseInt(formData.topicId)\r\n        };\r\n        \r\n        await createModule(token, submitData);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Module created successfully',\r\n          duration: 3000\r\n        });\r\n      }\r\n\r\n      resetForm();\r\n      \r\n      // Refresh modules if topic is selected\r\n      if (selectedTopic) {\r\n        fetchModulesByTopic(selectedTopic);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error saving module:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to save module'\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm('Are you sure you want to delete this module?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      await deleteModule(token, id);\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'Module deleted successfully',\r\n        duration: 3000\r\n      });\r\n      \r\n      // Refresh modules if topic is selected\r\n      if (selectedTopic) {\r\n        fetchModulesByTopic(selectedTopic);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error deleting module:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to delete module',\r\n        duration: 5000\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (module) => {\r\n    setFormData({\r\n      name: module.name,\r\n      description: module.description || '',\r\n      displayOrder: module.displayOrder || '',\r\n      isActive: module.isActive,\r\n      courseType: { id: module.topic?.subject?.course?.courseType?.id || '' },\r\n      course: { id: module.topic?.subject?.course?.id || '' },\r\n      class: { id: '' },\r\n      exam: { id: '' },\r\n      subjectId: module.topic?.subject?.linkageId || module.topic?.subject?.id || '',\r\n      topicId: module.topic?.id || ''\r\n    });\r\n    setEditingId(module.id);\r\n    setShowForm(true);\r\n  };\r\n\r\n\r\n  // Fetch modules data\r\n  const fetchModulesData = async () => {\r\n    // Prevent duplicate calls\r\n    if (fetchModulesInProgressRef.current) {\r\n      console.log('🔄 fetchModulesData already in progress, skipping duplicate call');\r\n      return;\r\n    }\r\n\r\n    if (!token) {\r\n      console.log('🔄 No token available, skipping modules fetch');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('🔄 Starting fetchModulesData...');\r\n      fetchModulesInProgressRef.current = true;\r\n      setLoadingStates(prev => ({ ...prev, modules: true }));\r\n\r\n      const filterParams = buildModulesFilterParams();\r\n      console.log('🔄 Fetching modules with params:', filterParams);\r\n      \r\n      const data = await getModulesCombinedFilter(token, filterParams);\r\n      \r\n      console.log('🔄 Fetched modules data:', data);\r\n      \r\n      // Robust array handling\r\n      let modulesArray = [];\r\n      if (Array.isArray(data)) {\r\n        modulesArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        modulesArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        modulesArray = data.data;\r\n      } else {\r\n        console.warn('Unexpected modules data format:', data);\r\n        modulesArray = [];\r\n      }\r\n      \r\n      console.log('🔄 Normalized modules array:', modulesArray);\r\n      setModules(modulesArray);\r\n      console.log('🔄 Modules state updated with', modulesArray.length, 'modules');\r\n      \r\n    } catch (error) {\r\n      console.error('🔄 Error fetching modules:', error);\r\n      setModules([]);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to load modules'\r\n      });\r\n    } finally {\r\n      setLoadingStates(prev => ({ ...prev, modules: false }));\r\n      fetchModulesInProgressRef.current = false;\r\n      console.log('🔄 fetchModulesData completed');\r\n    }\r\n  };\r\n\r\n  // Build comprehensive filter params for modules\r\n  const buildModulesFilterParams = () => {\r\n    const filterParams = {\r\n      active: showActiveOnly\r\n    };\r\n    \r\n    if (selectedCourseType) {\r\n      filterParams.courseTypeId = parseInt(selectedCourseType);\r\n    }\r\n    \r\n    if (selectedCourse) {\r\n      filterParams.courseId = parseInt(selectedCourse);\r\n    }\r\n    \r\n    if (selectedClass) {\r\n      filterParams.classId = parseInt(selectedClass);\r\n    }\r\n    \r\n    if (selectedExam) {\r\n      filterParams.examId = parseInt(selectedExam);\r\n    }\r\n    \r\n    if (selectedSubject) {\r\n      filterParams.subjectId = parseInt(selectedSubject);\r\n    }\r\n    \r\n    if (selectedTopic) {\r\n      filterParams.topicId = parseInt(selectedTopic);\r\n    }\r\n    \r\n    return filterParams;\r\n  };\r\n\r\n  // Debounced effect for modules fetching on subject/topic changes\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      fetchModulesData();\r\n    }, 300); // 300ms delay\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n  }, [\r\n    selectedSubject,\r\n    selectedTopic,\r\n    showActiveOnly\r\n  ]);\r\n\r\n  // Fetch topics by subject linkage\r\n  const fetchTopicsBySubject = async (courseTypeId, subjectLinkageId) => {\r\n    if (!token || !courseTypeId || !subjectLinkageId) {\r\n      setTopics([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('🔄 Fetching topics for subject linkage:', { courseTypeId, subjectLinkageId });\r\n      \r\n      const data = await getTopicsByLinkage(token, courseTypeId, subjectLinkageId, showActiveOnly);\r\n      console.log('Raw topics data from API:', data);\r\n      \r\n      // Robust array handling\r\n      let topicsArray = [];\r\n      if (Array.isArray(data)) {\r\n        topicsArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        topicsArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        topicsArray = data.data;\r\n      } else {\r\n        console.warn('Unexpected topics data format:', data);\r\n        topicsArray = [];\r\n      }\r\n      \r\n      console.log('Normalized topics array:', topicsArray);\r\n      setTopics(topicsArray);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching topics:', error);\r\n      setTopics([]);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to load topics'\r\n      });\r\n    }\r\n  };\r\n\r\n  // Effect for subject change - fetch topics by linkage\r\n  useEffect(() => {\r\n    if (selectedSubject && selectedCourseType) {\r\n      console.log('🔄 Filter: Subject changed, fetching topics for subject:', selectedSubject);\r\n      const courseTypeId = parseInt(selectedCourseType);\r\n      const subjectLinkageId = parseInt(selectedSubject);\r\n      fetchTopicsBySubject(courseTypeId, subjectLinkageId);\r\n    } else {\r\n      setTopics([]);\r\n    }\r\n  }, [selectedSubject, selectedCourseType, showActiveOnly]);\r\n\r\n\r\n  // Form effect for subject change - fetch topics by subject\r\n  useEffect(() => {\r\n    if (formData.subjectId && formData.courseType?.id) {\r\n      console.log('🔄 Form: Subject changed, fetching topics for subject:', formData.subjectId);\r\n      const courseTypeId = parseInt(formData.courseType.id);\r\n      const subjectLinkageId = parseInt(formData.subjectId);\r\n      fetchTopicsBySubject(courseTypeId, subjectLinkageId);\r\n      \r\n      // Clear topic selection when subject changes\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        topicId: ''\r\n      }));\r\n    }\r\n  }, [formData.subjectId, formData.courseType?.id]);\r\n\r\n\r\n  return (\r\n    <div className=\"master-data-component\">\r\n      <div className=\"component-header\">\r\n        <div className=\"header-info\">\r\n          <h2>Module Management</h2>\r\n          <p>Manage modules with hierarchical filtering and linking to subjects and topics</p>\r\n        </div>\r\n        \r\n        <div className=\"header-actions\">\r\n          <button \r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              resetForm();\r\n              setShowForm(true);\r\n            }}\r\n            disabled={loading}\r\n          >\r\n            Add Module\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filter Section */}\r\n      <div className=\"filter-section\">\r\n        <div className=\"filter-header\">\r\n          <h4>Filter Modules</h4>\r\n          <div className=\"filter-header-controls\">\r\n            <label className=\"filter-checkbox\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={showActiveOnly}\r\n                onChange={(e) => setShowActiveOnly(e.target.checked)}\r\n              />\r\n              <span>Active Only</span>\r\n            </label>\r\n            <button \r\n              className=\"btn btn-outline btn-xs\"\r\n              onClick={() => {\r\n                setSelectedCourseType('');\r\n                setSelectedCourse('');\r\n                setSelectedClass('');\r\n                setSelectedExam('');\r\n                setSelectedSubject('');\r\n                setSelectedTopic('');\r\n                setFilteredCourses([]);\r\n                setFilteredClasses([]);\r\n                setFilteredExams([]);\r\n                setSubjectLinkages([]);\r\n                setTopics([]);\r\n                setModules([]);\r\n              }}\r\n              disabled={loading}\r\n            >\r\n              Clear All Filters\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"filter-row\">\r\n          {/* Course Type Filter */}\r\n          <div className=\"filter-group\">\r\n            <label htmlFor=\"course-type-filter\">1. Course Type:</label>\r\n            <select\r\n              id=\"course-type-filter\"\r\n              value={selectedCourseType}\r\n              onChange={(e) => handleFilterChange('courseTypeId', e.target.value)}\r\n              className=\"filter-select\"\r\n            >\r\n              <option value=\"\">Select Course Type</option>\r\n              {courseTypes && courseTypes.length > 0 ? courseTypes.map(courseType => (\r\n                <option key={courseType.id} value={courseType.id}>\r\n                  {courseType.name}\r\n                </option>\r\n              )) : <option value=\"\" disabled>No course types available</option>}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Course Filter */}\r\n          <div className=\"filter-group\">\r\n            <label htmlFor=\"course-filter\">2. Course:</label>\r\n            <select\r\n              id=\"course-filter\"\r\n              value={selectedCourse}\r\n              onChange={(e) => handleFilterChange('courseId', e.target.value)}\r\n              className=\"filter-select\"\r\n              disabled={!selectedCourseType}\r\n            >\r\n              <option value=\"\">Select Course</option>\r\n              {filteredCourses && filteredCourses.length > 0 ? filteredCourses.map(course => (\r\n                <option key={course.id} value={course.id}>\r\n                  {course.name}\r\n                </option>\r\n              )) : <option value=\"\" disabled>No courses available</option>}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Class Filter (Academic only) */}\r\n          {isAcademicCourseType(selectedCourseType) && (\r\n            <div className=\"filter-group\">\r\n              <label htmlFor=\"class-filter\">3. Class:</label>\r\n              <select\r\n                id=\"class-filter\"\r\n                value={selectedClass}\r\n                onChange={(e) => handleFilterChange('classId', e.target.value)}\r\n                className=\"filter-select\"\r\n                disabled={!selectedCourse}\r\n              >\r\n                <option value=\"\">Select Class</option>\r\n                {filteredClasses && filteredClasses.length > 0 ? filteredClasses.map(cls => (\r\n                  <option key={cls.id} value={cls.id}>\r\n                    {cls.name}\r\n                  </option>\r\n                )) : <option value=\"\" disabled>No classes available</option>}\r\n              </select>\r\n            </div>\r\n          )}\r\n\r\n          {/* Exam Filter (Competitive only) */}\r\n          {isCompetitiveCourseType(selectedCourseType) && (\r\n            <div className=\"filter-group\">\r\n              <label htmlFor=\"exam-filter\">3. Exam:</label>\r\n              <select\r\n                id=\"exam-filter\"\r\n                value={selectedExam}\r\n                onChange={(e) => handleFilterChange('examId', e.target.value)}\r\n                className=\"filter-select\"\r\n                disabled={!selectedCourse}\r\n              >\r\n                <option value=\"\">Select Exam</option>\r\n                {filteredExams && filteredExams.length > 0 ? filteredExams.map(exam => (\r\n                  <option key={exam.id} value={exam.id}>\r\n                    {exam.name}\r\n                  </option>\r\n                )) : <option value=\"\" disabled>No exams available</option>}\r\n              </select>\r\n            </div>\r\n          )}\r\n\r\n          {/* Subject Filter */}\r\n          <div className=\"filter-group\">\r\n            <label htmlFor=\"subject-filter\">4. Subject:</label>\r\n            <select\r\n              id=\"subject-filter\"\r\n              value={selectedSubject}\r\n              onChange={(e) => handleFilterChange('subjectId', e.target.value)}\r\n              className=\"filter-select\"\r\n              disabled={!selectedCourse || loadingStates.subjects}\r\n            >\r\n              <option value=\"\">Select Subject</option>\r\n              {subjectLinkages && subjectLinkages.length > 0 ? subjectLinkages.map(subject => (\r\n                <option key={subject.linkageId} value={subject.linkageId}>\r\n                  {subject.subjectName || subject.name}\r\n                </option>\r\n              )) : <option value=\"\" disabled>No subjects available</option>}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Topic Filter */}\r\n          <div className=\"filter-group\">\r\n            <label htmlFor=\"topic-filter\">5. Topic:</label>\r\n            <select\r\n              id=\"topic-filter\"\r\n              value={selectedTopic}\r\n              onChange={(e) => handleFilterChange('topicId', e.target.value)}\r\n              className=\"filter-select\"\r\n              disabled={!selectedSubject || loadingStates.topics}\r\n            >\r\n              <option value=\"\">Select Topic</option>\r\n              {topics && topics.length > 0 ? topics.map(topic => (\r\n                <option key={topic.id} value={topic.id}>\r\n                  {topic.name}\r\n                </option>\r\n              )) : <option value=\"\" disabled>No topics available</option>}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Active Filters Summary */}\r\n        {(selectedCourseType || selectedCourse || selectedClass || selectedExam || selectedSubject || selectedTopic) && (\r\n          <div className=\"active-filters\">\r\n            <strong>Active Filters:</strong>\r\n            {selectedCourseType && (\r\n              <span className=\"filter-tag\">\r\n                Course Type: {courseTypes.find(ct => ct.id === parseInt(selectedCourseType))?.name}\r\n              </span>\r\n            )}\r\n            {selectedCourse && (\r\n              <span className=\"filter-tag\">\r\n                Course: {filteredCourses.find(c => c.id === parseInt(selectedCourse))?.name}\r\n              </span>\r\n            )}\r\n            {selectedClass && (\r\n              <span className=\"filter-tag\">\r\n                Class: {filteredClasses.find(c => c.id === parseInt(selectedClass))?.name}\r\n              </span>\r\n            )}\r\n            {selectedExam && (\r\n              <span className=\"filter-tag\">\r\n                Exam: {filteredExams.find(e => e.id === parseInt(selectedExam))?.name}\r\n              </span>\r\n            )}\r\n            {selectedSubject && (\r\n              <span className=\"filter-tag\">\r\n                Subject: {subjectLinkages.find(s => s.linkageId === parseInt(selectedSubject))?.subjectName || subjectLinkages.find(s => s.linkageId === parseInt(selectedSubject))?.name}\r\n              </span>\r\n            )}\r\n            {selectedTopic && (\r\n              <span className=\"filter-tag\">\r\n                Topic: {topics.find(t => t.id === parseInt(selectedTopic))?.name}\r\n              </span>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Form Section */}\r\n      {showForm && (\r\n        <div className=\"form-section\">\r\n          <div className=\"form-header\">\r\n            <h3>{editingId ? 'Edit Module' : 'Add New Module'}</h3>\r\n            <button className=\"btn btn-outline btn-sm\" onClick={resetForm}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          \r\n          <form onSubmit={handleSubmit} className=\"master-data-form\">\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"name\">Module Name *</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  value={formData.name}\r\n                  onChange={handleInputChange}\r\n                  className=\"form-input\"\r\n                  required\r\n                  placeholder=\"e.g., Introduction to Programming\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"displayOrder\">Display Order</label>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"displayOrder\"\r\n                  name=\"displayOrder\"\r\n                  value={formData.displayOrder}\r\n                  onChange={handleInputChange}\r\n                  className=\"form-input\"\r\n                  min=\"0\"\r\n                  placeholder=\"0\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"form-row\">\r\n              <div className=\"form-group full-width\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <textarea\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  value={formData.description}\r\n                  onChange={handleInputChange}\r\n                  className=\"form-input\"\r\n                  rows={3}\r\n                  placeholder=\"Describe the module content and scope\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"courseType\">Course Type *</label>\r\n                <select\r\n                  id=\"courseType\"\r\n                  name=\"courseType\"\r\n                  value={formData.courseType?.id || ''}\r\n                  onChange={(e) => setFormData({ ...formData, courseType: { id: e.target.value } })}\r\n                  className=\"form-input\"\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Course Type</option>\r\n                  {courseTypes && courseTypes.length > 0 ? courseTypes.map(courseType => (\r\n                    <option key={courseType.id} value={courseType.id}>\r\n                      {courseType.name}\r\n                    </option>\r\n                  )) : <option value=\"\" disabled>No course types available</option>}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"course\">Course *</label>\r\n                <select\r\n                  id=\"course\"\r\n                  name=\"course\"\r\n                  value={formData.course?.id || ''}\r\n                  onChange={(e) => setFormData({ ...formData, course: { id: e.target.value } })}\r\n                  className=\"form-input\"\r\n                  required\r\n                  disabled={!formData.courseType?.id}\r\n                >\r\n                  <option value=\"\">\r\n                    {!formData.courseType?.id ? 'Select Course Type first' :\r\n                     loadingStates.courses ? 'Loading courses...' :\r\n                     'Select Course'}\r\n                  </option>\r\n                  {courses && courses.length > 0 ? courses.map(course => (\r\n                    <option key={course.id} value={course.id}>\r\n                      {course.name}\r\n                    </option>\r\n                  )) : <option value=\"\" disabled>No courses available</option>}\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Class/Exam Selection - Conditional based on Course Type */}\r\n            {(isAcademicCourseType(formData.courseType?.id) || isCompetitiveCourseType(formData.courseType?.id)) && (\r\n              <div className=\"form-row\">\r\n                {/* Class Selection - Only for Academic Course Types */}\r\n                {isAcademicCourseType(formData.courseType?.id) && (\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"class\">Class *</label>\r\n                    <select\r\n                      id=\"class\"\r\n                      name=\"class\"\r\n                      value={formData.class?.id || ''}\r\n                      onChange={(e) => setFormData({ ...formData, class: { id: e.target.value } })}\r\n                      className=\"form-input\"\r\n                      required\r\n                      disabled={!formData.course?.id || loadingStates.classes}\r\n                    >\r\n                      <option value=\"\">\r\n                        {!formData.course?.id ? 'Select Course first' :\r\n                         loadingStates.classes ? 'Loading classes...' :\r\n                         'Select Class'}\r\n                      </option>\r\n                      {classes && classes.length > 0 ? classes.map(classItem => (\r\n                        <option key={classItem.id} value={classItem.id}>\r\n                          {classItem.name}\r\n                        </option>\r\n                      )) : <option value=\"\" disabled>No classes available</option>}\r\n                    </select>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Exam Selection - Only for Competitive Course Types */}\r\n                {isCompetitiveCourseType(formData.courseType?.id) && (\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"exam\">Exam *</label>\r\n                    <select\r\n                      id=\"exam\"\r\n                      name=\"exam\"\r\n                      value={formData.exam?.id || ''}\r\n                      onChange={(e) => setFormData({ ...formData, exam: { id: e.target.value } })}\r\n                      className=\"form-input\"\r\n                      required\r\n                      disabled={!formData.course?.id || loadingStates.exams}\r\n                    >\r\n                      <option value=\"\">\r\n                        {!formData.course?.id ? 'Select Course first' :\r\n                         loadingStates.exams ? 'Loading exams...' :\r\n                         'Select Exam'}\r\n                      </option>\r\n                      {exams && exams.length > 0 ? exams.map(exam => (\r\n                        <option key={exam.id} value={exam.id}>\r\n                          {exam.name}\r\n                        </option>\r\n                      )) : <option value=\"\" disabled>No exams available</option>}\r\n                    </select>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"subjectId\">Subject *</label>\r\n                <select\r\n                  id=\"subjectId\"\r\n                  name=\"subjectId\"\r\n                  value={formData.subjectId}\r\n                  onChange={handleInputChange}\r\n                  className=\"form-input\"\r\n                  required\r\n                  disabled={\r\n                    !formData.course?.id || \r\n                    (isAcademicCourseType(formData.courseType?.id) && !formData.class?.id) ||\r\n                    (isCompetitiveCourseType(formData.courseType?.id) && !formData.exam?.id)\r\n                    // Professional courses (courseTypeId === '3') are enabled when course is selected\r\n                  }\r\n                >\r\n                  <option value=\"\">\r\n                    {!formData.course?.id ? 'Select Course first' :\r\n                     (isAcademicCourseType(formData.courseType?.id) && !formData.class?.id) ? 'Select Class first' :\r\n                     (isCompetitiveCourseType(formData.courseType?.id) && !formData.exam?.id) ? 'Select Exam first' :\r\n                     (formData.courseType?.id === '3') ? 'Professional course - Select Subject' :\r\n                     'Select Subject'}\r\n                  </option>\r\n                  {subjectLinkages && subjectLinkages.length > 0 ? subjectLinkages.map(subject => (\r\n                    <option key={subject.linkageId} value={subject.linkageId}>\r\n                      {subject.subjectName || subject.name}\r\n                    </option>\r\n                  )) : <option value=\"\" disabled>No subjects available</option>}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"topicId\">Topic *</label>\r\n                <select\r\n                  id=\"topicId\"\r\n                  name=\"topicId\"\r\n                  value={formData.topicId}\r\n                  onChange={handleInputChange}\r\n                  className=\"form-input\"\r\n                  required\r\n                  disabled={!formData.subjectId}\r\n                >\r\n                  <option value=\"\">\r\n                    {!formData.subjectId ? 'Select Subject first' : 'Select Topic'}\r\n                  </option>\r\n                  {topics && topics.length > 0 ? topics.map(topic => (\r\n                    <option key={topic.id} value={topic.id}>\r\n                      {topic.name}\r\n                    </option>\r\n                  )) : <option value=\"\" disabled>No topics available</option>}\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label className=\"checkbox-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"isActive\"\r\n                    checked={formData.isActive}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <span>Active</span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"form-actions\">\r\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\r\n                {loading ? 'Saving...' : (editingId ? 'Update Module' : 'Create Module')}\r\n              </button>\r\n              <button type=\"button\" className=\"btn btn-outline\" onClick={resetForm}>\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      {/* Data Section */}\r\n      <div className=\"data-section\">\r\n        <div className=\"data-header\">\r\n          <h4>📦 Modules ({modules.length})</h4>\r\n          {console.log('🔄 Rendering modules:', modules.length, modules)}\r\n          <button \r\n            className=\"btn btn-outline btn-sm\"\r\n            onClick={() => {\r\n              fetchModulesData();\r\n            }}\r\n            disabled={loading}\r\n          >\r\n            Refresh\r\n          </button>\r\n        </div>\r\n\r\n        {loadingStates.modules ? (\r\n          <div className=\"loading-state\">\r\n            <p>Loading modules...</p>\r\n          </div>\r\n        ) : modules.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <div className=\"empty-icon\">No Modules</div>\r\n            <h4>No Modules Found</h4>\r\n            <p>\r\n              {selectedTopic \r\n                ? \"No modules found for the selected topic\" \r\n                : \"No modules found. Try adjusting your filter criteria or create a new module.\"\r\n              }\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"modules-container\">\r\n            {(() => {\r\n              // Group modules by course type using flat API response structure\r\n              const academicModules = modules.filter(module => {\r\n                const courseTypeId = module.courseTypeId || module.courseType?.id;\r\n                return courseTypeId === 1 || courseTypeId === '1';\r\n              });\r\n\r\n              const competitiveModules = modules.filter(module => {\r\n                const courseTypeId = module.courseTypeId || module.courseType?.id;\r\n                return courseTypeId === 2 || courseTypeId === '2';\r\n              });\r\n\r\n              const professionalModules = modules.filter(module => {\r\n                const courseTypeId = module.courseTypeId || module.courseType?.id;\r\n                return courseTypeId === 3 || courseTypeId === '3';\r\n              });\r\n\r\n              // Module field configuration\r\n              const moduleFields = [\r\n                { key: 'courseTypeName', label: 'Course Type' },\r\n                { key: 'courseName', label: 'Course' },\r\n                { key: 'className', label: 'Class', condition: (item) => item.className },\r\n                { key: 'examName', label: 'Exam', condition: (item) => item.examName },\r\n                { key: 'subjectName', label: 'Subject' },\r\n                { key: 'topicName', label: 'Topic' },\r\n                { key: 'structureType', label: 'Structure Type' }\r\n              ];\r\n\r\n              const renderModuleCard = (module) => (\r\n                <DataCard\r\n                  key={module.id}\r\n                  item={module}\r\n                  itemType=\"module\"\r\n                  onEdit={handleEdit}\r\n                  onDelete={handleDelete}\r\n                  fields={moduleFields}\r\n                />\r\n              );\r\n\r\n              return (\r\n                <>\r\n                  {/* Academic Modules Section */}\r\n                  {academicModules.length > 0 && (\r\n                    <div className=\"module-section\">\r\n                      <div className=\"section-header\">\r\n                        <h3>Academic Course Modules</h3>\r\n                        <span className=\"section-count\">({academicModules.length} modules)</span>\r\n                      </div>\r\n                      <div className=\"data-grid\">\r\n                        {academicModules.map(renderModuleCard)}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Competitive Modules Section */}\r\n                  {competitiveModules.length > 0 && (\r\n                    <div className=\"module-section\">\r\n                      <div className=\"section-header\">\r\n                        <h3>Competitive Course Modules</h3>\r\n                        <span className=\"section-count\">({competitiveModules.length} modules)</span>\r\n                      </div>\r\n                      <div className=\"data-grid\">\r\n                        {competitiveModules.map(renderModuleCard)}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Professional Modules Section */}\r\n                  {professionalModules.length > 0 && (\r\n                    <div className=\"module-section\">\r\n                      <div className=\"section-header\">\r\n                        <h3>Professional Course Modules</h3>\r\n                        <span className=\"section-count\">({professionalModules.length} modules)</span>\r\n                      </div>\r\n                      <div className=\"data-grid\">\r\n                        {professionalModules.map(renderModuleCard)}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* No modules in any section */}\r\n                  {academicModules.length === 0 && competitiveModules.length === 0 && professionalModules.length === 0 && (\r\n                    <div className=\"empty-state\">\r\n                      <div className=\"empty-icon\">No Modules</div>\r\n                      <h4>No Modules Found</h4>\r\n                      <p>No modules match your current filters. Try adjusting your filter criteria or create a new module.</p>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              );\r\n            })()}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModuleManagement;\r\n"],"names":["DataCard","_ref","item","itemType","onEdit","onDelete","fields","badges","getItemDescription","description","getCreatedBy","createdByName","_jsxs","className","children","_jsx","getItemName","subjectName","name","topicName","concat","isActive","map","badge","key","label","value","condition","style","icon","badgeValue","onClick","handleEdit","handleDelete","id","field","fieldValue","Date","createdAt","toLocaleDateString","ModuleManagement","_formData$courseType3","_formData$course3","_formData$courseType6","_formData$class4","_formData$exam4","_formData$courseType0","_formData$courseType11","_courseTypes$find","_filteredCourses$find","_filteredClasses$find","_filteredExams$find","_subjectLinkages$find","_subjectLinkages$find2","_topics$find","_formData$courseType12","_formData$course5","_formData$courseType13","_formData$courseType14","_formData$courseType15","_formData$courseType16","_formData$courseType17","_formData$class5","_formData$course6","_formData$course7","_formData$courseType18","_formData$exam5","_formData$course8","_formData$course9","_formData$course0","_formData$courseType19","_formData$class6","_formData$courseType20","_formData$exam6","_formData$course1","_formData$courseType21","_formData$class7","_formData$courseType22","_formData$exam7","_formData$courseType23","token","addNotification","useApp","isAcademicCourseType","courseTypeId","isCompetitiveCourseType","selectedCourseType","setSelectedCourseType","useState","selectedCourse","setSelectedCourse","selectedClass","setSelectedClass","selectedExam","setSelectedExam","selectedSubject","setSelectedSubject","selectedTopic","setSelectedTopic","showActiveOnly","setShowActiveOnly","formData","setFormData","displayOrder","courseType","course","class","exam","subjectId","topicId","courseTypes","setCourseTypes","courses","setCourses","classes","setClasses","exams","setExams","filteredCourses","setFilteredCourses","filteredClasses","setFilteredClasses","filteredExams","setFilteredExams","masterSubjects","setMasterSubjects","subjectLinkages","setSubjectLinkages","topics","setTopics","modules","setModules","loadingStates","setLoadingStates","subjects","showForm","setShowForm","editingId","setEditingId","loading","setLoading","isInitialMountRef","useRef","fetchModulesInProgressRef","modulesAbortRef","courseTypesAbortRef","didMountCourseType","data","ts","didMountCourse","didMountClass","didMountExam","didMountActive","useEffect","current","abort","_","fetchCoursesByCourseType","async","console","log","getCourses","coursesArray","Array","isArray","content","warn","error","fetchClassesAndExamsByCourse","courseId","classesData","examsData","Promise","all","getClassesByCourse","getExamsByCourse","classesArray","examsArray","fetchSubjectLinkages","classId","examId","getAllSubjectLinkages","active","subjectsArray","fetchModulesByTopic","getModulesCombinedFilter","parseInt","modulesArray","getCourseTypesCached","courseTypesArray","type","message","fetchData","fetchModulesData","handleInputChange","e","checked","target","prev","_objectSpread","_formData$courseType","_formData$courseType2","getMasterSubjectsByCourseType","fetchMasterSubjectsByCourseType","_formData$course","_formData$course2","_formData$courseType4","_formData$courseType5","_formData$class","_formData$exam","_formData$courseType7","_formData$courseType8","_formData$class2","_formData$exam2","isProfessionalCourse","_formData$courseType9","_formData$course4","courseTypeIdInt","courseIdInt","_formData$class3","_formData$exam3","handleFilterChange","filterName","resetForm","window","confirm","deleteModule","duration","module","_module$topic","_module$topic$subject","_module$topic$subject2","_module$topic$subject3","_module$topic2","_module$topic2$subjec","_module$topic2$subjec2","_module$topic3","_module$topic3$subjec","_module$topic4","_module$topic4$subjec","_module$topic5","topic","subject","linkageId","filterParams","buildModulesFilterParams","length","timeoutId","setTimeout","clearTimeout","fetchTopicsBySubject","subjectLinkageId","getTopicsByLinkage","topicsArray","_formData$courseType10","disabled","onChange","htmlFor","cls","find","ct","c","s","t","onSubmit","_formData$courseType1","preventDefault","trim","submitData","updateModule","createModule","required","placeholder","min","rows","classItem","academicModules","filter","_module$courseType","competitiveModules","_module$courseType2","professionalModules","_module$courseType3","moduleFields","examName","renderModuleCard","_Fragment"],"sourceRoot":""}