{"version":3,"file":"static/js/53.114cb151.chunk.js","mappings":"oOAOA,MAAMA,EAAWC,IAQV,IARW,KAChBC,EAAI,SACJC,EAAW,OAAM,OACjBC,EAAM,SACNC,EAAQ,OACRC,EAAS,GAAE,OACXC,EAAS,GAAE,eACXC,EAAiB,IAClBP,EACC,MAwFMQ,EAAqBA,IAClBP,EAAKQ,YAGRC,EAAeA,IACZT,EAAKU,cAGd,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAAD,SA3BYE,MAClB,OAAQd,GACN,IAAK,UACH,OAAOD,EAAKgB,aAAehB,EAAKiB,KAClC,IAAK,QACH,OAAOjB,EAAKkB,WAAalB,EAAKiB,KAKhC,QACE,OAAOjB,EAAKiB,OAgBLF,MACLJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,QAAMF,UAAS,gBAAAO,OAAkBnB,EAAKoB,SAAW,SAAW,YAAaP,SACtEb,EAAKoB,SAAW,SAAW,aAE7Bf,EAAOgB,IAxEGC,IAAW,IAADC,EAC7B,MAAM,IAAEC,EAAG,MAAEC,EAAK,MAAEC,EAAK,UAAEC,EAAS,MAAEC,EAAK,KAAEC,GAASP,EAEtD,GAAIK,IAAcA,EAAU3B,GAC1B,OAAO,KAGT,MAAM8B,EAAaJ,GAAS1B,EAAKwB,GAEjC,IAAKM,EACH,OAAO,KAIT,IAAIC,EAAaH,EACbI,EAAYH,EAEhB,GAAY,kBAARL,GAA2BlB,EAAe2B,OAAS,EAAG,CACxD,MAAMC,EAAgB5B,EAAe6B,KAAKC,GAAKA,EAAEV,QAAUI,GACvDI,IACFH,EAAa,CACXM,gBAAiBH,EAAcI,OAAS,OACxCA,MAAO,SAETN,EAAYE,EAAcL,KAE9B,CAEA,OACElB,EAAAA,EAAAA,MAAA,QAEEC,UAAU,kBACVgB,MAAOG,EACPQ,MAAe,kBAARf,EAA0E,QAAnDD,EAAGjB,EAAe6B,KAAKC,GAAKA,EAAEV,QAAUI,UAAW,IAAAP,OAAA,EAAhDA,EAAkDf,iBAAcgC,EAAU3B,SAAA,CAE1GmB,EAAU,IAAEF,IALRN,YA6CLb,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,yBACV6B,QA/GSC,KACbxC,GACFA,EAAOF,IA6GmBa,SACrB,UAGDC,EAAAA,EAAAA,KAAA,UACEF,UAAU,wBACV6B,QA/GWE,KACfxC,GACFA,EAASH,EAAK4C,KA6Gc/B,SACvB,kBAMLF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CAC1BN,MACCO,EAAAA,EAAAA,KAAA,KAAGF,UAAU,cAAaC,SAAEN,MAG7BH,EAAOiB,IArHOwB,IACnB,MAAM,IAAErB,EAAG,MAAEC,EAAK,MAAEC,EAAK,UAAEC,GAAckB,EAEzC,GAAIlB,IAAcA,EAAU3B,GAC1B,OAAO,KAIT,MAAM8C,EAA8B,oBAAVpB,EAAuBA,EAAM1B,GAAS0B,GAAS1B,EAAKwB,GAE9E,OAAKsB,GAKHnC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,UAAAE,SAAA,CAASY,EAAM,OAAU,IAAEqB,IADrBtB,GAJD,WA6GPV,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,aAAYC,SAAA,CAAC,YAClB,IAAIkC,KAAK/C,EAAKgD,WAAWC,qBAClCxC,MACCE,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,OAAKJ,gBAugBvB,EA/f6ByC,KAAO,IAADC,EACjC,MAAM,MAAEC,EAAK,gBAAEC,IAAoBC,EAAAA,EAAAA,OAC5BC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAUC,IAAeJ,EAAAA,EAAAA,WAAS,IAClCK,EAAWC,IAAgBN,EAAAA,EAAAA,UAAS,OACpCO,EAAUC,IAAeR,EAAAA,EAAAA,UAAS,CACvCxC,KAAM,GACNT,YAAa,GACb0B,cAAe,GACfgC,aAAc,EACd9C,UAAU,IAIN+C,GAAqBC,EAAAA,EAAAA,SAAO,GAC5BC,GAAWD,EAAAA,EAAAA,QAAOhB,IAGxBkB,EAAAA,EAAAA,WAAU,KACRD,EAASE,QAAUnB,GAClB,CAACA,IAGJ,MAAM9C,EAAiB,CACrB,CACEoB,MAAO,WACPD,MAAO,WACPjB,YAAa,iGACbqB,KAAM,eACNS,MAAO,WAET,CACEZ,MAAO,cACPD,MAAO,cACPjB,YAAa,gGACbqB,KAAM,eACNS,MAAO,WAET,CACEZ,MAAO,eACPD,MAAO,eACPjB,YAAa,oFACbqB,KAAM,eACNS,MAAO,WAET,CACEZ,MAAO,SACPD,MAAO,SACPjB,YAAa,2CACbqB,KAAM,eACNS,MAAO,aAKXgC,EAAAA,EAAAA,WAAU,KACR,GAAIH,EAAmBI,UAAYF,EAASE,QAAS,OAE5BC,WACvB,IACEb,GAAW,GACX,MAAMc,QAAaC,EAAAA,EAAAA,IAAqBL,EAASE,SACjDI,QAAQC,IAAI,oBAAqBH,GACjCE,QAAQC,IAAI,oBAAqBH,GACjCE,QAAQC,IAAI,YAAaC,MAAMC,QAAQL,IAGvC,IAAIM,EAAmB,GACnBF,MAAMC,QAAQL,GAChBM,EAAmBN,EACVA,GAAQI,MAAMC,QAAQL,EAAKO,SAEpCD,EAAmBN,EAAKO,QACfP,GAAQI,MAAMC,QAAQL,EAAKA,MAEpCM,EAAmBN,EAAKA,KACfA,GAAQA,EAAKlB,aAAesB,MAAMC,QAAQL,EAAKlB,aAExDwB,EAAmBN,EAAKlB,aAExBoB,QAAQM,KAAK,0BAA2BR,GACxCM,EAAmB,IAGrBJ,QAAQC,IAAI,gCAAiCG,GAC7CvB,EAAeuB,GACfZ,EAAmBI,SAAU,CAC/B,CAAE,MAAOW,GACPP,QAAQO,MAAM,+BAAgCA,GAG9C7B,EAAgB,CACd8B,KAAM,QACNC,QAAQ,iCAADjE,OAAmC+D,EAAME,SAChDC,SAAU,MAIZ7B,EAAe,GACjB,CAAC,QACCG,GAAW,EACb,GAGF2B,IACC,IAGH,MAAMC,EAAqBf,UACzB,GAAKH,EAASE,QAEd,IACEZ,GAAW,GACX,MAAMc,QAAaC,EAAAA,EAAAA,IAAqBL,EAASE,SACjDI,QAAQC,IAAI,8BAA+BH,GAC3CE,QAAQC,IAAI,oBAAqBH,GACjCE,QAAQC,IAAI,YAAaC,MAAMC,QAAQL,IAGvC,IAAIM,EAAmB,GACnBF,MAAMC,QAAQL,GAChBM,EAAmBN,EACVA,GAAQI,MAAMC,QAAQL,EAAKO,SAEpCD,EAAmBN,EAAKO,QACfP,GAAQI,MAAMC,QAAQL,EAAKA,MAEpCM,EAAmBN,EAAKA,KACfA,GAAQA,EAAKlB,aAAesB,MAAMC,QAAQL,EAAKlB,aAExDwB,EAAmBN,EAAKlB,aAExBoB,QAAQM,KAAK,oCAAqCR,GAClDM,EAAmB,IAGrBJ,QAAQC,IAAI,0CAA2CG,GACvDvB,EAAeuB,EACjB,CAAE,MAAOG,GACPP,QAAQO,MAAM,+BAAgCA,GAG9C7B,EAAgB,CACd8B,KAAM,QACNC,QAAQ,iCAADjE,OAAmC+D,EAAME,SAChDC,SAAU,MAIZ7B,EAAe,GACjB,CAAC,QACCG,GAAW,EACb,GAgGIjB,EAAc8C,IAClBvB,EAAY,CACVhD,KAAMuE,EAAWvE,KACjBT,YAAagF,EAAWhF,aAAe,GACvC0B,cAAesD,EAAWtD,eAAiB,GAC3CgC,aAAcsB,EAAWtB,cAAgB,EACzC9C,SAAUoE,EAAWpE,WAEvB2C,EAAayB,EAAW5C,IACxBiB,GAAY,IAGRlB,EAAe6B,UACnB,GAAIiB,OAAOC,QAAQ,qDACjB,IACE/B,GAAW,SACLgC,EAAAA,EAAAA,IAAiBvC,EAAOR,GAC9BS,EAAgB,CACd8B,KAAM,UACNC,QAAS,mCACTC,SAAU,OAEZO,EAAAA,EAAAA,MACAL,GACF,CAAE,MAAOL,GACPP,QAAQO,MAAM,8BAA+BA,GAE7C,IAAIW,EAAe,+BACfX,EAAME,QAAQU,SAAS,QAAUZ,EAAME,QAAQU,SAAS,gBAC1DD,EAAe,mFACNX,EAAME,QAAQU,SAAS,aAChCD,EAAe,8FAGjBxC,EAAgB,CACd8B,KAAM,QACNC,QAASS,EACTR,SAAU,KAEd,CAAC,QACC1B,GAAW,EACb,GAIEoC,EAAYA,KAChB9B,EAAY,CAAEhD,KAAM,GAAIT,YAAa,GAAI0B,cAAe,GAAIgC,aAAc,EAAG9C,UAAU,IACvF2C,EAAa,MACbF,GAAY,IAGd,OACElD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2HAELC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,kBACV6B,QAASA,IAAMoB,GAAY,GAC3BmC,SAAUtC,EAAQ7C,SACnB,yBAMJ+C,IACCjD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKiD,EAAY,mBAAqB,yBACtChD,EAAAA,EAAAA,KAAA,UAAQF,UAAU,yBAAyB6B,QAASsD,EAAUlF,SAAC,eAKjEF,EAAAA,EAAAA,MAAA,QAAMsF,SA3KOzB,UACnB0B,EAAEC,iBACF,IAIE,GAHAxC,GAAW,IAGNK,EAAS/C,OAAS+C,EAAS/C,KAAKmF,OAMnC,YALA/C,EAAgB,CACd8B,KAAM,QACNC,QAAS,+BACTC,SAAU,MAKd,IAAKrB,EAAS9B,cAMZ,YALAmB,EAAgB,CACd8B,KAAM,QACNC,QAAS,6BACTC,SAAU,MAMd,MAAMgB,EAAa,CACjBpF,KAAM+C,EAAS/C,KAAKmF,OACpB5F,YAAawD,EAASxD,YAAcwD,EAASxD,YAAY4F,OAAS,GAClElE,cAAe8B,EAAS9B,cACxBgC,aAAcF,EAASE,cAAgB,EACvC9C,SAAU4C,EAAS5C,UAIjB0C,IACFuC,EAAWzD,GAAKkB,UAIXuC,EAAWC,eACXD,EAAWE,SAElB5B,QAAQC,IAAI,6BAA8ByB,GAC1C1B,QAAQC,IAAI,qBAAsBxB,GAE9BU,SACI0C,EAAAA,EAAAA,IAAiBpD,EAAOU,EAAWuC,GACzChD,EAAgB,CACd8B,KAAM,UACNC,QAAS,mCACTC,SAAU,cAGNoB,EAAAA,EAAAA,IAAiBrD,EAAOiD,GAC9BhD,EAAgB,CACd8B,KAAM,UACNC,QAAS,mCACTC,SAAU,OAIdxB,GAAY,GACZE,EAAa,MACbE,EAAY,CAAEhD,KAAM,GAAIT,YAAa,GAAIY,UAAU,KACnDwE,EAAAA,EAAAA,MACAL,GACF,CAAE,MAAOL,GACPP,QAAQO,MAAM,4BAA6BA,GAG3C,IAAIW,EAAe,6BAEjBA,EADEX,EAAME,QAAQU,SAAS,QAAUZ,EAAME,QAAQU,SAAS,gBAC3C,mFACNZ,EAAME,QAAQU,SAAS,WACjB,kGACNZ,EAAME,QAAQU,SAAS,OACjB,oEACNZ,EAAME,QAAQU,SAAS,OACjB,gEAEH,+BAAA3E,OAAkC+D,EAAME,SAGtD/B,EAAgB,CACd8B,KAAM,QACNC,QAASS,EACTR,SAAU,KAEd,CAAC,QACC1B,GAAW,EACb,GAiFoC/C,UAAU,mBAAkBC,SAAA,EAExDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO4F,QAAQ,OAAM7F,SAAC,wBACtBC,EAAAA,EAAAA,KAAA,SACEqE,KAAK,OACLvC,GAAG,OACH3B,KAAK,OACLS,MAAOsC,EAAS/C,KAChB0F,SAAWT,GAAMjC,GAAW2C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI5C,GAAQ,IAAE/C,KAAMiF,EAAEW,OAAOnF,SAC3Dd,UAAU,aACVkG,UAAQ,EACRC,YAAY,oDAIhBpG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO4F,QAAQ,eAAc7F,SAAC,mBAC9BC,EAAAA,EAAAA,KAAA,SACEqE,KAAK,SACLvC,GAAG,eACH3B,KAAK,eACLS,MAAOsC,EAASE,aAChByC,SAAWT,GAAMjC,GAAW2C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI5C,GAAQ,IAAEE,aAAc8C,SAASd,EAAEW,OAAOnF,QAAU,KACtFd,UAAU,aACVqG,IAAI,IACJF,YAAY,aAKlBpG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO4F,QAAQ,gBAAe7F,SAAC,sBAC/BF,EAAAA,EAAAA,MAAA,UACEiC,GAAG,gBACH3B,KAAK,gBACLS,MAAOsC,EAAS9B,cAChByE,SAAWT,GAAMjC,GAAW2C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI5C,GAAQ,IAAE9B,cAAegE,EAAEW,OAAOnF,SACpEd,UAAU,aACVkG,UAAQ,EAAAjG,SAAA,EAERC,EAAAA,EAAAA,KAAA,UAAQY,MAAM,GAAEb,SAAC,0BAChBP,EAAee,IAAI8D,IAClBxE,EAAAA,EAAAA,MAAA,UAAyBe,MAAOyD,EAAKzD,MAAMb,SAAA,CACxCsE,EAAKtD,KAAK,IAAEsD,EAAK1D,QADP0D,EAAKzD,eAOxBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAO4F,QAAQ,WAAU7F,SAAC,YAC1BF,EAAAA,EAAAA,MAAA,UACEiC,GAAG,WACH3B,KAAK,WACLS,MAAOsC,EAAS5C,SAChBuF,SAAWT,GAAMjC,GAAW2C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI5C,GAAQ,IAAE5C,SAA6B,SAAnB8E,EAAEW,OAAOnF,SAC/Dd,UAAU,aAAYC,SAAA,EAEtBC,EAAAA,EAAAA,KAAA,UAAQY,OAAO,EAAKb,SAAC,YACrBC,EAAAA,EAAAA,KAAA,UAAQY,OAAO,EAAMb,SAAC,sBAM3BmD,EAAS9B,gBACRvB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iCAAgCC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oCACJC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAiBgB,MAAO,CACrCsF,QAAS,OACTC,WAAY,UACZC,OAAQ,oBACRC,aAAc,MACd/E,MAAO,UACPgF,WAAY,YACZC,SAAU,UACV1G,SAC6D,QAD7DsC,EACC7C,EAAe6B,KAAKC,GAAKA,EAAEV,QAAUsC,EAAS9B,sBAAc,IAAAiB,OAAA,EAA5DA,EAA8D3C,kBAKrEM,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,SAAO4F,QAAQ,cAAa7F,SAAC,iBAC7BC,EAAAA,EAAAA,KAAA,YACE8B,GAAG,cACH3B,KAAK,cACLS,MAAOsC,EAASxD,YAChBmG,SAAWT,GAAMjC,GAAW2C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI5C,GAAQ,IAAExD,YAAa0F,EAAEW,OAAOnF,SAClEd,UAAU,aACVmG,YAAY,wCACZS,KAAM,UAKZ7G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,UAAQqE,KAAK,SAASvE,UAAU,kBAAkB6B,QAASsD,EAAUlF,SAAC,YAGtEC,EAAAA,EAAAA,KAAA,UAAQqE,KAAK,SAASvE,UAAU,kBAAkBoF,SAAUtC,EAAQ7C,SACjE6C,EAAU,YAAeI,EAAY,qBAAuB,iCAOvEnD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,iBAAe0C,EAAYtB,OAAO,QACtCnB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,yBACV6B,QAAS8C,EACTS,SAAUtC,EAAQ7C,SACnB,iBAMJ6C,GACC/C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBACfE,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+BAEoB,IAAvB0C,EAAYtB,QACdtB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SAAC,kBAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2BACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kDACHC,EAAAA,EAAAA,KAAA,UACEF,UAAU,kBACV6B,QAASA,IAAMoB,GAAY,GAAMhD,SAClC,wBAKHC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACvB0C,EAAYlC,IAAKmE,IAEhB,MAAMiC,EAAmB,CACvB,CACEjG,IAAK,eACLC,MAAO,gBACPE,UAAY3B,GAA+B,OAAtBA,EAAKkE,mBAA+C1B,IAAtBxC,EAAKkE,eAa5D,OACEpD,EAAAA,EAAAA,KAAChB,EAAQ,CAEPE,KAAMwF,EACNvF,SAAS,aACTC,OAAQwC,EACRvC,SAAUwC,EACVvC,OAAQqH,EACRpH,OAhBqB,CACvB,CACEmB,IAAK,gBACLC,MAAO,iBACPE,UAAY3B,GAASA,EAAKkC,gBAa1B5B,eAAgBA,GAPXkF,EAAW5C,c","sources":["components/master-data/CourseTypeManagement.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { clearCourseTypesCache, getCourseTypesCached } from '../../services/globalApiCache';\r\nimport { createCourseType, deleteCourseType, updateCourseType } from '../../services/masterDataService';\r\nimport './MasterDataComponent.css';\r\n\r\n// Reusable DataCard Component\r\nconst DataCard = ({ \r\n  item, \r\n  itemType = 'item',\r\n  onEdit, \r\n  onDelete,\r\n  fields = [],\r\n  badges = [],\r\n  structureTypes = []\r\n}) => {\r\n  const handleEdit = () => {\r\n    if (onEdit) {\r\n      onEdit(item);\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if (onDelete) {\r\n      onDelete(item.id);\r\n    }\r\n  };\r\n\r\n  const renderField = (field) => {\r\n    const { key, label, value, condition } = field;\r\n    \r\n    if (condition && !condition(item)) {\r\n      return null;\r\n    }\r\n    \r\n    // Handle function-based value extraction\r\n    const fieldValue = typeof value === 'function' ? value(item) : (value || item[key]);\r\n    \r\n    if (!fieldValue) {\r\n      return null;\r\n    }\r\n    \r\n    return (\r\n      <p key={key}>\r\n        <strong>{label}:</strong> {fieldValue}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  const renderBadge = (badge) => {\r\n    const { key, label, value, condition, style, icon } = badge;\r\n    \r\n    if (condition && !condition(item)) {\r\n      return null;\r\n    }\r\n    \r\n    const badgeValue = value || item[key];\r\n    \r\n    if (!badgeValue) {\r\n      return null;\r\n    }\r\n\r\n    // For structure type badges, get the actual style and icon\r\n    let badgeStyle = style;\r\n    let badgeIcon = icon;\r\n    \r\n    if (key === 'structureType' && structureTypes.length > 0) {\r\n      const structureType = structureTypes.find(t => t.value === badgeValue);\r\n      if (structureType) {\r\n        badgeStyle = { \r\n          backgroundColor: structureType.color || '#666',\r\n          color: 'white'\r\n        };\r\n        badgeIcon = structureType.icon;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <span \r\n        key={key}\r\n        className=\"structure-badge\"\r\n        style={badgeStyle}\r\n        title={key === 'structureType' ? structureTypes.find(t => t.value === badgeValue)?.description : undefined}\r\n      >\r\n        {badgeIcon} {badgeValue}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getItemName = () => {\r\n    switch (itemType) {\r\n      case 'subject':\r\n        return item.subjectName || item.name;\r\n      case 'topic':\r\n        return item.topicName || item.name;\r\n      case 'module':\r\n        return item.name;\r\n      case 'courseType':\r\n        return item.name;\r\n      default:\r\n        return item.name;\r\n    }\r\n  };\r\n\r\n  const getItemDescription = () => {\r\n    return item.description;\r\n  };\r\n\r\n  const getCreatedBy = () => {\r\n    return item.createdByName;\r\n  };\r\n\r\n  return (\r\n    <div className=\"data-card\">\r\n      <div className=\"card-header\">\r\n        <div className=\"card-title\">\r\n          <h4>{getItemName()}</h4>\r\n          <div className=\"card-badges\">\r\n            <span className={`status-badge ${item.isActive ? 'active' : 'inactive'}`}>\r\n              {item.isActive ? 'Active' : 'Inactive'}\r\n            </span>\r\n            {badges.map(renderBadge)}\r\n          </div>\r\n        </div>\r\n        <div className=\"card-actions\">\r\n          <button \r\n            className=\"btn btn-outline btn-xs\"\r\n            onClick={handleEdit}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button \r\n            className=\"btn btn-danger btn-xs\"\r\n            onClick={handleDelete}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"card-content\">\r\n        {getItemDescription() && (\r\n          <p className=\"description\">{getItemDescription()}</p>\r\n        )}\r\n        \r\n        {fields.map(renderField)}\r\n      </div>\r\n      \r\n      <div className=\"card-footer\">\r\n        <small className=\"text-muted\">\r\n          Created: {new Date(item.createdAt).toLocaleDateString()}\r\n          {getCreatedBy() && (\r\n            <span> by {getCreatedBy()}</span>\r\n          )}\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CourseTypeManagement = () => {\r\n  const { token, addNotification } = useApp();\r\n  const [courseTypes, setCourseTypes] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    structureType: '',\r\n    displayOrder: 0,\r\n    isActive: true\r\n  });\r\n\r\n  // Use ref to track if data has been fetched to prevent infinite loops\r\n  const courseTypesFetched = useRef(false);\r\n  const tokenRef = useRef(token);\r\n  \r\n  // Update token ref when token changes\r\n  useEffect(() => {\r\n    tokenRef.current = token;\r\n  }, [token]);\r\n\r\n  // Structure types configuration\r\n  const structureTypes = [\r\n    {\r\n      value: 'ACADEMIC',\r\n      label: 'Academic',\r\n      description: 'CourseType → Course → Class → Subject → Topic → Module → Chapter',\r\n      icon: '🏫',\r\n      color: '#4CAF50'\r\n    },\r\n    {\r\n      value: 'COMPETITIVE',\r\n      label: 'Competitive',\r\n      description: 'CourseType → Course → Exam → Subject → Topic → Module → Chapter',\r\n      icon: '📝',\r\n      color: '#FF9800'\r\n    },\r\n    {\r\n      value: 'PROFESSIONAL',\r\n      label: 'Professional',\r\n      description: 'CourseType → Course → Subject → Topic → Module → Chapter',\r\n      icon: '💼',\r\n      color: '#2196F3'\r\n    },\r\n    {\r\n      value: 'CUSTOM',\r\n      label: 'Custom',\r\n      description: 'Flexible structure based on requirements',\r\n      icon: '⚙️',\r\n      color: '#9C27B0'\r\n    }\r\n  ];\r\n\r\n  // Fetch course types on component mount (only once)\r\n  useEffect(() => {\r\n    if (courseTypesFetched.current || !tokenRef.current) return; // Prevent multiple calls or if no token\r\n    \r\n    const fetchCourseTypes = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const data = await getCourseTypesCached(tokenRef.current);\r\n        console.log('Raw API response:', data);\r\n        console.log('Data type:', typeof data);\r\n        console.log('Is array:', Array.isArray(data));\r\n        \r\n        // Handle different response formats\r\n        let courseTypesArray = [];\r\n        if (Array.isArray(data)) {\r\n          courseTypesArray = data;\r\n        } else if (data && Array.isArray(data.content)) {\r\n          // Handle paginated response\r\n          courseTypesArray = data.content;\r\n        } else if (data && Array.isArray(data.data)) {\r\n          // Handle wrapped response\r\n          courseTypesArray = data.data;\r\n        } else if (data && data.courseTypes && Array.isArray(data.courseTypes)) {\r\n          // Handle nested response\r\n          courseTypesArray = data.courseTypes;\r\n        } else {\r\n          console.warn('Unexpected data format:', data);\r\n          courseTypesArray = [];\r\n        }\r\n        \r\n        console.log('Processed course types array:', courseTypesArray);\r\n        setCourseTypes(courseTypesArray);\r\n        courseTypesFetched.current = true; // Mark as fetched\r\n      } catch (error) {\r\n        console.error('Error fetching course types:', error);\r\n        \r\n        // Show actual error instead of mock data\r\n        addNotification({\r\n          type: 'error',\r\n          message: `Failed to fetch course types: ${error.message}`,\r\n          duration: 7000\r\n        });\r\n        \r\n        // Set empty course types array instead of mock data\r\n        setCourseTypes([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCourseTypes();\r\n  }, []); // Empty dependency array - only run once on mount\r\n\r\n  // Simple refreshCourseTypes function for manual calls (like after create/update/delete)\r\n  const refreshCourseTypes = async () => {\r\n    if (!tokenRef.current) return; // Don't fetch if no token\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const data = await getCourseTypesCached(tokenRef.current);\r\n      console.log('Raw API response (refresh):', data);\r\n      console.log('Data type:', typeof data);\r\n      console.log('Is array:', Array.isArray(data));\r\n      \r\n      // Handle different response formats\r\n      let courseTypesArray = [];\r\n      if (Array.isArray(data)) {\r\n        courseTypesArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        // Handle paginated response\r\n        courseTypesArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        // Handle wrapped response\r\n        courseTypesArray = data.data;\r\n      } else if (data && data.courseTypes && Array.isArray(data.courseTypes)) {\r\n        // Handle nested response\r\n        courseTypesArray = data.courseTypes;\r\n      } else {\r\n        console.warn('Unexpected data format (refresh):', data);\r\n        courseTypesArray = [];\r\n      }\r\n      \r\n      console.log('Processed course types array (refresh):', courseTypesArray);\r\n      setCourseTypes(courseTypesArray);\r\n    } catch (error) {\r\n      console.error('Error fetching course types:', error);\r\n      \r\n      // Show actual error instead of mock data\r\n      addNotification({\r\n        type: 'error',\r\n        message: `Failed to fetch course types: ${error.message}`,\r\n        duration: 7000\r\n      });\r\n      \r\n      // Set empty course types array instead of mock data\r\n      setCourseTypes([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Validate required fields\r\n      if (!formData.name || !formData.name.trim()) {\r\n        addNotification({\r\n          type: 'error',\r\n          message: 'Course type name is required',\r\n          duration: 5000\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!formData.structureType) {\r\n        addNotification({\r\n          type: 'error',\r\n          message: 'Structure type is required',\r\n          duration: 5000\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // Prepare data in the correct format - only include fields that should be updated\r\n      const submitData = {\r\n        name: formData.name.trim(),\r\n        description: formData.description ? formData.description.trim() : '',\r\n        structureType: formData.structureType,\r\n        displayOrder: formData.displayOrder || 0,\r\n        isActive: formData.isActive\r\n      };\r\n      \r\n      // For updates, include the ID but exclude any relationship collections\r\n      if (editingId) {\r\n        submitData.id = editingId;\r\n      }\r\n      \r\n      // Ensure we don't include any relationship fields that might cause cascade issues\r\n      delete submitData.courses;\r\n      delete submitData.subjects;\r\n      \r\n      console.log('Form data being submitted:', submitData);\r\n      console.log('Token available:', !!token);\r\n      \r\n      if (editingId) {\r\n        await updateCourseType(token, editingId, submitData);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Course type updated successfully',\r\n          duration: 3000\r\n        });\r\n      } else {\r\n        await createCourseType(token, submitData);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Course type created successfully',\r\n          duration: 3000\r\n        });\r\n      }\r\n      \r\n      setShowForm(false);\r\n      setEditingId(null);\r\n      setFormData({ name: '', description: '', isActive: true });\r\n      clearCourseTypesCache(); // Clear cache to force refresh\r\n      refreshCourseTypes();\r\n    } catch (error) {\r\n      console.error('Error saving course type:', error);\r\n      \r\n      // Provide more specific error messages based on the error type\r\n      let errorMessage = 'Failed to save course type';\r\n      if (error.message.includes('401') || error.message.includes('Unauthorized')) {\r\n        errorMessage = 'Authentication required. Please login first or implement backend authentication.';\r\n      } else if (error.message.includes('cascade')) {\r\n        errorMessage = 'Course type update failed due to relationship constraints. Please try again or contact support.';\r\n      } else if (error.message.includes('500')) {\r\n        errorMessage = 'Server error occurred while saving course type. Please try again.';\r\n      } else if (error.message.includes('400')) {\r\n        errorMessage = 'Invalid data provided. Please check your input and try again.';\r\n      } else {\r\n        errorMessage = `Failed to save course type: ${error.message}`;\r\n      }\r\n      \r\n      addNotification({\r\n        type: 'error',\r\n        message: errorMessage,\r\n        duration: 5000\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (courseType) => {\r\n    setFormData({\r\n      name: courseType.name,\r\n      description: courseType.description || '',\r\n      structureType: courseType.structureType || '',\r\n      displayOrder: courseType.displayOrder || 0,\r\n      isActive: courseType.isActive\r\n    });\r\n    setEditingId(courseType.id);\r\n    setShowForm(true);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (window.confirm('Are you sure you want to delete this course type?')) {\r\n      try {\r\n        setLoading(true);\r\n        await deleteCourseType(token, id);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Course type deleted successfully',\r\n          duration: 3000\r\n        });\r\n        clearCourseTypesCache(); // Clear cache to force refresh\r\n        refreshCourseTypes();\r\n      } catch (error) {\r\n        console.error('Error deleting course type:', error);\r\n        \r\n        let errorMessage = 'Failed to delete course type';\r\n        if (error.message.includes('401') || error.message.includes('Unauthorized')) {\r\n          errorMessage = 'Authentication required. Please login first or implement backend authentication.';\r\n        } else if (error.message.includes('cascade')) {\r\n          errorMessage = 'Cannot delete course type due to existing relationships. Please remove related data first.';\r\n        }\r\n        \r\n        addNotification({\r\n          type: 'error',\r\n          message: errorMessage,\r\n          duration: 5000\r\n        });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({ name: '', description: '', structureType: '', displayOrder: 0, isActive: true });\r\n    setEditingId(null);\r\n    setShowForm(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"master-data-component\">\r\n      <div className=\"component-header\">\r\n        <div className=\"header-info\">\r\n          <h2>Course Type Management</h2>\r\n          <p>Manage different types of courses with their hierarchical structures (Academic, Competitive, Professional, Custom)</p>\r\n        </div>\r\n        <div className=\"header-actions\">\r\n          <button \r\n            className=\"btn btn-primary\"\r\n            onClick={() => setShowForm(true)}\r\n            disabled={loading}\r\n          >\r\n            Add Course Type\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {showForm && (\r\n        <div className=\"form-section\">\r\n          <div className=\"form-header\">\r\n            <h3>{editingId ? 'Edit Course Type' : 'Add New Course Type'}</h3>\r\n            <button className=\"btn btn-outline btn-sm\" onClick={resetForm}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          \r\n          <form onSubmit={handleSubmit} className=\"master-data-form\">\r\n            {/* Basic Information */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"name\">Course Type Name *</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  value={formData.name}\r\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n                  className=\"form-input\"\r\n                  required\r\n                  placeholder=\"e.g., Academic, Professional, Certification\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"displayOrder\">Display Order</label>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"displayOrder\"\r\n                  name=\"displayOrder\"\r\n                  value={formData.displayOrder}\r\n                  onChange={(e) => setFormData({ ...formData, displayOrder: parseInt(e.target.value) || 0 })}\r\n                  className=\"form-input\"\r\n                  min=\"0\"\r\n                  placeholder=\"0\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"structureType\">Structure Type *</label>\r\n                <select\r\n                  id=\"structureType\"\r\n                  name=\"structureType\"\r\n                  value={formData.structureType}\r\n                  onChange={(e) => setFormData({ ...formData, structureType: e.target.value })}\r\n                  className=\"form-input\"\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Structure Type</option>\r\n                  {structureTypes.map(type => (\r\n                    <option key={type.value} value={type.value}>\r\n                      {type.icon} {type.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"isActive\">Status</label>\r\n                <select\r\n                  id=\"isActive\"\r\n                  name=\"isActive\"\r\n                  value={formData.isActive}\r\n                  onChange={(e) => setFormData({ ...formData, isActive: e.target.value === 'true' })}\r\n                  className=\"form-input\"\r\n                >\r\n                  <option value={true}>Active</option>\r\n                  <option value={false}>Inactive</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Structure Type Preview */}\r\n            {formData.structureType && (\r\n              <div className=\"form-section structure-preview\">\r\n                <h4>📋 Structure Preview</h4>\r\n                <div className=\"structure-flow\" style={{\r\n                  padding: '12px',\r\n                  background: '#f8f9fa',\r\n                  border: '1px solid #e9ecef',\r\n                  borderRadius: '6px',\r\n                  color: '#495057',\r\n                  fontFamily: 'monospace',\r\n                  fontSize: '0.9rem'\r\n                }}>\r\n                  {structureTypes.find(t => t.value === formData.structureType)?.description}\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            <div className=\"form-row\">\r\n              <div className=\"form-group full-width\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <textarea\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  value={formData.description}\r\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                  className=\"form-input\"\r\n                  placeholder=\"Brief description of this course type\"\r\n                  rows={3}\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"form-actions\">\r\n              <button type=\"button\" className=\"btn btn-outline\" onClick={resetForm}>\r\n                Cancel\r\n              </button>\r\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\r\n                {loading ? 'Saving...' : (editingId ? 'Update Course Type' : 'Create Course Type')}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"data-section\">\r\n        <div className=\"data-header\">\r\n          <h3>Course Types ({courseTypes.length})</h3>\r\n          <div className=\"data-actions\">\r\n            <button \r\n              className=\"btn btn-outline btn-sm\"\r\n              onClick={refreshCourseTypes}\r\n              disabled={loading}\r\n            >\r\n              Refresh\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {loading ? (\r\n          <div className=\"loading-state\">\r\n            <div className=\"loading-spinner\"></div>\r\n            <p>Loading course types...</p>\r\n          </div>\r\n        ) : courseTypes.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <div className=\"empty-icon\">📚</div>\r\n            <h4>No Course Types Found</h4>\r\n            <p>Create your first course type to get started</p>\r\n            <button \r\n              className=\"btn btn-primary\"\r\n              onClick={() => setShowForm(true)}\r\n            >\r\n              Add Course Type\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"data-grid\">\r\n            {courseTypes.map((courseType) => {\r\n              // CourseType field configuration\r\n              const courseTypeFields = [\r\n                { \r\n                  key: 'displayOrder', \r\n                  label: 'Display Order', \r\n                  condition: (item) => item.displayOrder !== null && item.displayOrder !== undefined \r\n                }\r\n              ];\r\n\r\n              // CourseType badge configuration\r\n              const courseTypeBadges = [\r\n                { \r\n                  key: 'structureType', \r\n                  label: 'Structure Type',\r\n                  condition: (item) => item.structureType\r\n                }\r\n              ];\r\n\r\n              return (\r\n                <DataCard\r\n                  key={courseType.id}\r\n                  item={courseType}\r\n                  itemType=\"courseType\"\r\n                  onEdit={handleEdit}\r\n                  onDelete={handleDelete}\r\n                  fields={courseTypeFields}\r\n                  badges={courseTypeBadges}\r\n                  structureTypes={structureTypes}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CourseTypeManagement;\r\n"],"names":["DataCard","_ref","item","itemType","onEdit","onDelete","fields","badges","structureTypes","getItemDescription","description","getCreatedBy","createdByName","_jsxs","className","children","_jsx","getItemName","subjectName","name","topicName","concat","isActive","map","badge","_structureTypes$find","key","label","value","condition","style","icon","badgeValue","badgeStyle","badgeIcon","length","structureType","find","t","backgroundColor","color","title","undefined","onClick","handleEdit","handleDelete","id","field","fieldValue","Date","createdAt","toLocaleDateString","CourseTypeManagement","_structureTypes$find2","token","addNotification","useApp","courseTypes","setCourseTypes","useState","loading","setLoading","showForm","setShowForm","editingId","setEditingId","formData","setFormData","displayOrder","courseTypesFetched","useRef","tokenRef","useEffect","current","async","data","getCourseTypesCached","console","log","Array","isArray","courseTypesArray","content","warn","error","type","message","duration","fetchCourseTypes","refreshCourseTypes","courseType","window","confirm","deleteCourseType","clearCourseTypesCache","errorMessage","includes","resetForm","disabled","onSubmit","e","preventDefault","trim","submitData","courses","subjects","updateCourseType","createCourseType","htmlFor","onChange","_objectSpread","target","required","placeholder","parseInt","min","padding","background","border","borderRadius","fontFamily","fontSize","rows","courseTypeFields"],"sourceRoot":""}