{"version":3,"file":"static/js/716.1fea9930.chunk.js","mappings":"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","sources":["components/master-data/ClassManagement.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useApp } from '../../context/AppContext';\nimport { getCourseTypesCached } from '../../services/globalApiCache';\nimport { createClass, deleteClass, getClasses, getCourses, updateClass } from '../../services/masterDataService';\nimport './MasterDataComponent.css';\n\n// Reusable DataCard Component\nconst DataCard = ({ \n  item, \n  itemType = 'item',\n  onEdit, \n  onDelete,\n  fields = [],\n  badges = []\n}) => {\n  const handleEdit = () => {\n    if (onEdit) {\n      onEdit(item);\n    }\n  };\n\n  const handleDelete = () => {\n    if (onDelete) {\n      onDelete(item.id);\n    }\n  };\n\n  const renderField = (field) => {\n    const { key, label, value, condition } = field;\n    \n    if (condition && !condition(item)) {\n      return null;\n    }\n    \n    // Handle function-based value extraction\n    const fieldValue = typeof value === 'function' ? value(item) : (value || item[key]);\n    \n    if (!fieldValue) {\n      return null;\n    }\n    \n    return (\n      <p key={key}>\n        <strong>{label}:</strong> {fieldValue}\n      </p>\n    );\n  };\n\n  const renderBadge = (badge) => {\n    const { key, label, value, condition, style, icon } = badge;\n    \n    if (condition && !condition(item)) {\n      return null;\n    }\n    \n    const badgeValue = value || item[key];\n    \n    if (!badgeValue) {\n      return null;\n    }\n\n    return (\n      <span \n        key={key}\n        className=\"structure-badge\"\n        style={style}\n      >\n        {icon} {badgeValue}\n      </span>\n    );\n  };\n\n  const getItemName = () => {\n    switch (itemType) {\n      case 'subject':\n        return item.subjectName || item.name;\n      case 'topic':\n        return item.topicName || item.name;\n      case 'module':\n        return item.name;\n      case 'courseType':\n        return item.name;\n      case 'course':\n        return item.name;\n      case 'class':\n        return item.name;\n      default:\n        return item.name;\n    }\n  };\n\n  const getItemDescription = () => {\n    return item.description;\n  };\n\n  const getCreatedBy = () => {\n    return item.createdByName;\n  };\n\n  return (\n    <div className=\"data-card\">\n      <div className=\"card-header\">\n        <div className=\"card-title\">\n          <h4>{getItemName()}</h4>\n          <div className=\"card-badges\">\n            <span className={`status-badge ${item.isActive ? 'active' : 'inactive'}`}>\n              {item.isActive ? 'Active' : 'Inactive'}\n            </span>\n            {badges.map(renderBadge)}\n          </div>\n        </div>\n        <div className=\"card-actions\">\n          <button \n            className=\"btn btn-outline btn-xs\"\n            onClick={handleEdit}\n          >\n            Edit\n          </button>\n          <button \n            className=\"btn btn-danger btn-xs\"\n            onClick={handleDelete}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"card-content\">\n        {getItemDescription() && (\n          <p className=\"description\">{getItemDescription()}</p>\n        )}\n        \n        {fields.map(renderField)}\n      </div>\n      \n      <div className=\"card-footer\">\n        <small className=\"text-muted\">\n          Created: {new Date(item.createdAt).toLocaleDateString()}\n          {getCreatedBy() && (\n            <span> by {getCreatedBy()}</span>\n          )}\n        </small>\n      </div>\n    </div>\n  );\n};\n\nconst ClassManagement = () => {\n  const { token, addNotification } = useApp();\n  const [classes, setClasses] = useState([]);\n  const [courseTypes, setCourseTypes] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [selectedCourseType, setSelectedCourseType] = useState('');\n  const [selectedCourse, setSelectedCourse] = useState('');\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    course: { id: '' },\n    isActive: true\n  });\n\n  // Optimization refs for request deduplication and caching\n  const classesAbortRef = useRef(null);\n  const coursesAbortRef = useRef(null);\n  const isInitialMountRef = useRef(true);\n  const hasInitialFetchRef = useRef(false);\n  const lastClassesQueryRef = useRef('');\n  const lastClassesQueryTimeRef = useRef(0);\n  const classesCacheRef = useRef({ data: null, ts: 0 });\n  const lastCoursesQueryRef = useRef('');\n  const lastCoursesQueryTimeRef = useRef(0);\n  const coursesCacheRef = useRef({ data: null, ts: 0 });\n\n  useEffect(() => {\n    console.log('Initial useEffect triggered with token:', !!token);\n    if (token) {\n      console.log('Calling fetchData...');\n      fetchData();\n    } else {\n      console.warn('No token available, skipping data fetch');\n      addNotification({\n        type: 'warning',\n        message: 'Please log in to access class management features',\n        duration: 5000\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token]);\n\n  // Optimized filter effect with deduplication and caching\n  useEffect(() => {\n    if (!token) return;\n    \n    // Skip on initial mount and until initial fetch is complete\n    if (isInitialMountRef.current || !hasInitialFetchRef.current) {\n      isInitialMountRef.current = false;\n      return;\n    }\n    \n    // Handle course change - fetch classes for specific course or all Academic classes\n    if (selectedCourse) {\n      // Handle course change - fetch classes for specific course\n      console.log('Course changed to:', selectedCourse);\n      classesCacheRef.current = { data: null, ts: 0 };\n      fetchClasses(null, selectedCourse);\n    } else {\n      // Handle \"All Academic Courses\" selection - fetch all Academic classes\n      console.log('Fetching all Academic classes for course type:', selectedCourseType);\n      classesCacheRef.current = { data: null, ts: 0 };\n      fetchClasses(selectedCourseType); // Use the Academic course type\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedCourse, selectedCourseType, token]);\n\n  // Cleanup abort controllers on unmount\n  useEffect(() => {\n    return () => {\n      if (classesAbortRef.current) {\n        try { classesAbortRef.current.abort(); } catch(_) {}\n      }\n      if (coursesAbortRef.current) {\n        try { coursesAbortRef.current.abort(); } catch(_) {}\n      }\n    };\n  }, []);\n\n  const fetchData = async () => {\n    console.log('fetchData called');\n    try {\n      setLoading(true);\n      \n      // Debug token information\n      console.log('Token status:', {\n        hasToken: !!token,\n        tokenLength: token ? token.length : 0,\n        tokenPreview: token ? token.substring(0, 20) + '...' : 'No token'\n      });\n      \n      if (!token) {\n        throw new Error('No authentication token available. Please log in again.');\n      }\n      \n      // Use optimized fetchClasses instead of direct API call\n      console.log('Fetching course types...');\n      const courseTypesData = await getCourseTypesCached(token);\n      console.log('Raw courseTypes API response (ClassManagement):', courseTypesData);\n      console.log('CourseTypes data type:', typeof courseTypesData);\n      console.log('CourseTypes is array:', Array.isArray(courseTypesData));\n      \n      // Handle different response formats\n      let courseTypesArray = [];\n      if (Array.isArray(courseTypesData)) {\n        courseTypesArray = courseTypesData;\n      } else if (courseTypesData && Array.isArray(courseTypesData.content)) {\n        // Handle paginated response\n        courseTypesArray = courseTypesData.content;\n      } else if (courseTypesData && Array.isArray(courseTypesData.data)) {\n        // Handle wrapped response\n        courseTypesArray = courseTypesData.data;\n      } else if (courseTypesData && courseTypesData.courseTypes && Array.isArray(courseTypesData.courseTypes)) {\n        // Handle nested response\n        courseTypesArray = courseTypesData.courseTypes;\n      } else {\n        console.warn('Unexpected courseTypes data format (ClassManagement):', courseTypesData);\n        courseTypesArray = [];\n      }\n      \n      console.log('Processed courseTypes array (ClassManagement):', courseTypesArray);\n      setCourseTypes(courseTypesArray);\n      \n      // Find the Academic course type and set it automatically\n      const academicCourseType = courseTypesArray.find(ct => ct.name.toLowerCase().includes('academic'));\n      console.log('Academic course type found:', academicCourseType);\n      if (academicCourseType) {\n        console.log('Auto-setting Academic course type:', academicCourseType);\n        setSelectedCourseType(academicCourseType.id);\n        \n        // Fetch courses for Academic course type\n        console.log('Fetching courses for academic course type...');\n        await fetchCoursesByCourseType(academicCourseType.id);\n      }\n      \n      // Fetch classes for the academic course type\n      const academicCourseTypeId = academicCourseType ? academicCourseType.id : null;\n      console.log('Initial fetchClasses call with courseTypeId:', academicCourseTypeId);\n      await fetchClasses(academicCourseTypeId);\n      \n      // Mark that initial fetch is complete\n      hasInitialFetchRef.current = true;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      \n      // Provide more specific error messages\n      let errorMessage = 'Failed to fetch data';\n      if (error.message.includes('Unauthorized')) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.message.includes('No authentication token')) {\n        errorMessage = 'Please log in to access this feature.';\n      } else if (error.message.includes('Failed to fetch')) {\n        errorMessage = 'Unable to connect to server. Please check your connection.';\n      }\n      \n      addNotification({\n        type: 'error',\n        message: errorMessage,\n        duration: 7000\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchClasses = async (courseTypeId = null, courseId = null) => {\n    console.log('fetchClasses called with:', { courseTypeId, courseId });\n    try {\n      setLoading(true);\n      \n      if (!token) {\n        throw new Error('No authentication token available');\n      }\n      \n      // Create query key for deduplication and caching\n      const queryKey = `classes_${courseTypeId || 'all'}_${courseId || 'all'}`;\n      const now = Date.now();\n      \n      // Check short-lived cache (5 seconds)\n      if (classesCacheRef.current.data && \n          classesCacheRef.current.queryKey === queryKey && \n          now - classesCacheRef.current.ts < 5000) {\n        console.log('Using cached classes data for:', queryKey);\n        setClasses(classesCacheRef.current.data);\n        setLoading(false);\n        return;\n      }\n      \n      // Check for duplicate requests (1.5 second deduplication window)\n      if (lastClassesQueryRef.current === queryKey && \n          now - lastClassesQueryTimeRef.current < 1500) {\n        console.log('Skipping duplicate classes request:', queryKey);\n        setLoading(false);\n        return;\n      }\n      \n      // Cancel previous request\n      if (classesAbortRef.current) {\n        try { classesAbortRef.current.abort(); } catch(_) {}\n      }\n      \n      // Create new abort controller\n      classesAbortRef.current = new AbortController();\n      \n      console.log('fetchClasses called with:', {\n        courseTypeId,\n        courseId,\n        hasToken: !!token,\n        queryKey,\n        selectedCourseType,\n        selectedCourse\n      });\n      \n      // Update query tracking\n      lastClassesQueryRef.current = queryKey;\n      lastClassesQueryTimeRef.current = now;\n      \n      // Call API with correct parameters (courseTypeId, courseId)\n      const data = await getClasses(token, courseTypeId || null, courseId || null, classesAbortRef.current.signal);\n      \n      console.log('API response for classes:', data);\n      \n      // Handle paginated response - extract content array\n      const classesArray = data.content || data;\n      let filteredData = Array.isArray(classesArray) ? classesArray : [];\n      \n      console.log('Classes array before filtering:', filteredData);\n      console.log('Filtering by courseTypeId:', courseTypeId);\n      \n      // Additional frontend filtering if needed (for courseTypeId filtering)\n      if (courseTypeId && !courseId) {\n        // Filter by course type on frontend since API doesn't support courseTypeId directly\n        const originalLength = filteredData.length;\n        console.log('Starting frontend filtering with courseTypeId:', courseTypeId);\n        console.log('Original data length:', originalLength);\n        \n        filteredData = filteredData.filter(cls => {\n          // Try multiple ways to get the course type ID\n          const clsCourseTypeId = cls.course?.courseType?.id || \n                                 cls.courseType?.id || \n                                 cls.courseTypeId ||\n                                 cls.course?.courseTypeId;\n          \n          // Also check if it's an academic course by structureType or courseTypeName\n          const isAcademic = cls.structureType === 'ACADEMIC' || \n                           (cls.courseTypeName && cls.courseTypeName.toLowerCase().includes('academic'));\n          \n          console.log('Class filtering check:', {\n            id: cls.id,\n            name: cls.name,\n            clsCourseTypeId: clsCourseTypeId,\n            expectedCourseTypeId: parseInt(courseTypeId),\n            structureType: cls.structureType,\n            courseTypeName: cls.courseTypeName,\n            isAcademic: isAcademic,\n            match: clsCourseTypeId === parseInt(courseTypeId) || isAcademic,\n            course: cls.course,\n            courseType: cls.courseType\n          });\n          \n          // Match by course type ID or by academic structure\n          return clsCourseTypeId === parseInt(courseTypeId) || isAcademic;\n        });\n        console.log(`Filtered ${originalLength} classes to ${filteredData.length} classes for course type ${courseTypeId}`);\n      } else {\n        console.log('No frontend filtering applied - showing all classes');\n      }\n      \n      // Update cache\n      classesCacheRef.current = {\n        data: filteredData,\n        queryKey,\n        ts: now\n      };\n      \n      console.log('Setting classes state with:', filteredData);\n      setClasses(filteredData);\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        console.log('Classes request was aborted');\n        return;\n      }\n      \n      console.error('Error fetching classes:', error);\n      console.error('Error details:', { courseTypeId, courseId, errorMessage: error.message });\n      \n      // Provide more specific error messages\n      let errorMessage = 'Failed to fetch classes';\n      if (error.message.includes('Unauthorized')) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.message.includes('Failed to fetch')) {\n        errorMessage = 'Unable to connect to server. Please check your connection.';\n      } else if (error.message.includes('No authentication token')) {\n        errorMessage = 'Please log in to access this feature.';\n      }\n      \n      addNotification({\n        type: 'error',\n        message: errorMessage,\n        duration: 7000\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      \n      // Prepare data in the correct format according to backend requirements\n      const submitData = {\n        name: formData.name,\n        description: formData.description,\n        courseId: parseInt(formData.course.id), // Backend expects courseId as Long, not course object\n        displayOrder: 0,\n        isActive: formData.isActive\n      };\n      \n      console.log('Submitting class data:', submitData);\n      console.log('Token available:', !!token);\n      \n      // Validate required fields\n      console.log('Form data validation:', {\n        courseId: formData.course.id,\n        courseIdType: typeof formData.course.id,\n        hasCourseId: !!formData.course.id\n      });\n      \n      if (!formData.course.id) {\n        throw new Error('Please select a course');\n      }\n      \n      if (editingId) {\n        await updateClass(token, editingId, submitData);\n        addNotification({\n          type: 'success',\n          message: 'Class updated successfully',\n          duration: 3000\n        });\n      } else {\n        await createClass(token, submitData);\n        addNotification({\n          type: 'success',\n          message: 'Class created successfully',\n          duration: 3000\n        });\n      }\n      \n      setShowForm(false);\n      setEditingId(null);\n      setFormData({ name: '', description: '', course: { id: '' }, isActive: true });\n      \n      // Clear cache and refresh data\n      classesCacheRef.current = { data: null, ts: 0 };\n      await fetchClasses(selectedCourseType, selectedCourse);\n    } catch (error) {\n      console.error('Error saving class:', error);\n      addNotification({\n        type: 'error',\n        message: `Failed to save class: ${error.message}`,\n        duration: 5000\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEdit = (classItem) => {\n    setFormData({\n      name: classItem.name,\n      description: classItem.description || '',\n      course: { id: classItem.course?.id || classItem.courseId || '' },\n      isActive: classItem.isActive\n    });\n    setEditingId(classItem.id);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id) => {\n    if (window.confirm('Are you sure you want to delete this class?')) {\n      try {\n        setLoading(true);\n        await deleteClass(token, id);\n        addNotification({\n          type: 'success',\n          message: 'Class deleted successfully',\n          duration: 3000\n        });\n        \n        // Clear cache and refresh data\n        classesCacheRef.current = { data: null, ts: 0 };\n        await fetchClasses(selectedCourseType, selectedCourse);\n      } catch (error) {\n        console.error('Error deleting class:', error);\n        addNotification({\n          type: 'error',\n          message: 'Failed to delete class',\n          duration: 5000\n        });\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({ name: '', description: '', course: { id: '' }, isActive: true });\n    setEditingId(null);\n    setShowForm(false);\n  };\n\n  const getCourseTypeName = (courseTypeId) => {\n    if (!Array.isArray(courseTypes)) {\n      console.warn('courseTypes is not an array:', courseTypes);\n      return 'Unknown';\n    }\n    const courseType = courseTypes.find(ct => ct.id === courseTypeId);\n    return courseType ? courseType.name : 'Unknown';\n  };\n\n  const getCourseName = (courseId) => {\n    if (!Array.isArray(coursesByType)) {\n      console.warn('coursesByType is not an array:', coursesByType);\n      return 'Unknown';\n    }\n    const course = coursesByType.find(c => c.id === courseId);\n    return course ? course.name : 'Unknown';\n  };\n\n  const isAcademicCourseType = (courseTypeId) => {\n    if (!Array.isArray(courseTypes)) {\n      console.warn('courseTypes is not an array:', courseTypes);\n      return false;\n    }\n    const courseType = courseTypes.find(ct => ct.id === courseTypeId);\n    const isAcademic = courseType && courseType.name.toLowerCase().includes('academic');\n    console.log('isAcademicCourseType check:', {\n      courseTypeId,\n      courseType,\n      isAcademic\n    });\n    return isAcademic;\n  };\n\n  const getAcademicCourseTypes = () => {\n    if (!Array.isArray(courseTypes)) {\n      console.warn('courseTypes is not an array:', courseTypes);\n      return [];\n    }\n    const academicTypes = courseTypes.filter(ct => ct.name.toLowerCase().includes('academic'));\n    console.log('Available course types:', courseTypes);\n    console.log('Academic course types:', academicTypes);\n    return academicTypes;\n  };\n\n  const getAcademicCourses = () => {\n    if (!Array.isArray(coursesByType)) {\n      console.warn('coursesByType is not an array:', coursesByType);\n      return [];\n    }\n    console.log('All courses:', coursesByType);\n    const academicCourses = coursesByType.filter(c => {\n      // Check courseTypeName directly first (most reliable)\n      if (c.courseTypeName && c.courseTypeName.toLowerCase().includes('academic')) {\n        console.log('Found academic course by courseTypeName:', c);\n        return true;\n      }\n      // Fallback to checking course type lookup\n      const isAcademic = isAcademicCourseType(c.courseType?.id || c.courseTypeId);\n      if (isAcademic) {\n        console.log('Found academic course by courseType lookup:', c);\n      }\n      return isAcademic;\n    });\n    console.log('Academic courses found:', academicCourses);\n    return academicCourses;\n  };\n\n  const [coursesByType, setCoursesByType] = useState([]);\n\n  const fetchCoursesByCourseType = async (courseTypeId) => {\n    if (!courseTypeId || !token) {\n      setCoursesByType([]);\n      return;\n    }\n    \n    try {\n      // Create query key for deduplication and caching\n      const queryKey = `courses_${courseTypeId}`;\n      const now = Date.now();\n      \n      // Check short-lived cache (5 seconds)\n      if (coursesCacheRef.current.data && \n          coursesCacheRef.current.queryKey === queryKey && \n          now - coursesCacheRef.current.ts < 5000) {\n        console.log('Using cached courses data for:', queryKey);\n        setCoursesByType(coursesCacheRef.current.data);\n        return;\n      }\n      \n      // Check for duplicate requests (1.5 second deduplication window)\n      if (lastCoursesQueryRef.current === queryKey && \n          now - lastCoursesQueryTimeRef.current < 1500) {\n        console.log('Skipping duplicate courses request:', queryKey);\n        return;\n      }\n      \n      // Cancel previous request\n      if (coursesAbortRef.current) {\n        try { coursesAbortRef.current.abort(); } catch(_) {}\n      }\n      \n      // Create new abort controller\n      coursesAbortRef.current = new AbortController();\n      \n      console.log('Fetching courses for course type:', courseTypeId);\n      \n      // Update query tracking\n      lastCoursesQueryRef.current = queryKey;\n      lastCoursesQueryTimeRef.current = now;\n      \n      const data = await getCourses(token, courseTypeId, 0, 100); // courseTypeId, page=0, size=100\n      \n      // Handle paginated response - extract content array for courses\n      const coursesArray = data.content || data;\n      const filteredData = Array.isArray(coursesArray) ? coursesArray : [];\n      \n      // Update cache\n      coursesCacheRef.current = {\n        data: filteredData,\n        queryKey,\n        ts: now\n      };\n      \n      setCoursesByType(filteredData);\n      \n      console.log('Courses fetched for course type:', filteredData);\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        console.log('Courses request was aborted');\n        return;\n      }\n      \n      console.error('Error fetching courses by course type:', error);\n      setCoursesByType([]);\n      addNotification({\n        type: 'error',\n        message: 'Failed to fetch courses for selected course type',\n        duration: 5000\n      });\n    }\n  };\n\n  const getCoursesByCourseTypeLocal = (courseTypeId) => {\n    if (!courseTypeId) {\n      return getAcademicCourses();\n    }\n    \n    return coursesByType;\n  };\n\n  const getClassesForCourse = (courseId) => {\n    if (!Array.isArray(classes)) {\n      console.warn('classes is not an array:', classes);\n      return [];\n    }\n    return classes.filter(c => c.course?.id === courseId || c.courseId === courseId);\n  };\n\n  return (\n    <div className=\"master-data-component\">\n      <div className=\"component-header\">\n        <div className=\"header-info\">\n          <h2>Class Management</h2>\n          <p>Manage classes for Academic course types only (e.g., Grade 1, Grade 2, Class A, Class B)</p>\n        </div>\n        <button \n          className=\"btn btn-primary\"\n          onClick={() => setShowForm(true)}\n        >\n          Add Class\n        </button>\n      </div>\n\n      {/* Filters */}\n      <div className=\"filter-section\">\n        <div className=\"filter-group\">\n          <label htmlFor=\"course-filter\">Course:</label>\n          <select\n            id=\"course-filter\"\n            value={selectedCourse}\n            onChange={(e) => {\n              const newCourse = e.target.value;\n              if (newCourse !== selectedCourse) {\n                setSelectedCourse(newCourse);\n              }\n            }}\n            className=\"filter-select\"\n          >\n            <option value=\"\">All Academic Courses</option>\n            {getAcademicCourses().map(course => (\n              <option key={course.id} value={course.id}>\n                {course.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {showForm && (\n        <div className=\"form-section\">\n          <div className=\"form-header\">\n            <h3>{editingId ? 'Edit Class' : 'Add New Class'}</h3>\n            <button className=\"btn btn-outline btn-sm\" onClick={resetForm}>\n              Cancel\n            </button>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"master-data-form\">\n            {/* Basic Information */}\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"name\">Class Name *</label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"form-input\"\n                  required\n                  placeholder=\"e.g., Grade 1, Class A, Batch 2024\"\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"course\">Course *</label>\n                <select\n                  id=\"course\"\n                  name=\"course\"\n                  value={formData.course.id}\n                  onChange={(e) => setFormData({ \n                    ...formData, \n                    course: { id: e.target.value }\n                  })}\n                  className=\"form-input\"\n                  required\n                >\n                  <option value=\"\">Select Course</option>\n                  {getAcademicCourses().length === 0 ? (\n                    <option value=\"\" disabled>No Academic Courses Available - Create a course first</option>\n                  ) : (\n                    getAcademicCourses().map(course => (\n                      <option key={course.id} value={course.id}>\n                        {course.name} ({course.courseTypeName || getCourseTypeName(course.courseType?.id || course.courseTypeId)})\n                      </option>\n                    ))\n                  )}\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"form-row\">\n              <div className=\"form-group full-width\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea\n                  id=\"description\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  className=\"form-input\"\n                  placeholder=\"Brief description of this class\"\n                  rows={3}\n                />\n              </div>\n            </div>\n            \n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"isActive\">Status</label>\n                <select\n                  id=\"isActive\"\n                  name=\"isActive\"\n                  value={formData.isActive}\n                  onChange={(e) => setFormData({ ...formData, isActive: e.target.value === 'true' })}\n                  className=\"form-input\"\n                >\n                  <option value={true}>Active</option>\n                  <option value={false}>Inactive</option>\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"form-actions\">\n              <button type=\"button\" className=\"btn btn-outline\" onClick={resetForm}>\n                Cancel\n              </button>\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\n                {loading ? 'Saving...' : (editingId ? 'Update Class' : 'Create Class')}\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      <div className=\"data-section\">\n        <div className=\"data-header\">\n          <h3>Classes ({classes.length})</h3>\n          <div className=\"data-actions\">\n            <button \n              className=\"btn btn-outline btn-sm\"\n              onClick={() => {\n                // Clear cache to force fresh data fetch\n                classesCacheRef.current = { data: null, ts: 0 };\n                console.log('Refresh button clicked with:', {\n                  selectedCourseType,\n                  selectedCourse,\n                  courseTypes: courseTypes.length\n                });\n                fetchClasses(selectedCourseType, selectedCourse);\n              }}\n              disabled={loading}\n            >\n              Refresh\n            </button>\n          </div>\n        </div>\n\n        {loading ? (\n          <div className=\"loading-state\">\n            <div className=\"loading-spinner\"></div>\n            <p>Loading classes...</p>\n          </div>\n        ) : classes.length === 0 ? (\n          <div className=\"empty-state\">\n            <div className=\"empty-icon\">No Classes</div>\n            <h4>No Classes Found</h4>\n            <p>\n              {selectedCourse \n                ? `No classes found for the selected course. Create your first class for this course.`\n                : selectedCourseType \n                  ? `No classes found for the selected course type. Create your first class.`\n                  : `No classes found. Create your first class.`\n              }\n            </p>\n            <button \n              className=\"btn btn-primary\"\n              onClick={() => setShowForm(true)}\n            >\n              Add Class\n            </button>\n          </div>\n        ) : (\n          <div className=\"data-grid\">\n            {Array.isArray(classes) ? classes.map((classItem) => {\n              // Class field configuration with complex fallback logic\n              const classFields = [\n                { \n                  key: 'courseTypeName', \n                  label: 'Course Type',\n                  value: (item) => item.course?.courseTypeName || item.courseTypeName || getCourseTypeName(item.course?.courseType?.id || item.courseType?.id || item.courseTypeId)\n                },\n                { \n                  key: 'courseName', \n                  label: 'Course',\n                  value: (item) => item.courseName || getCourseName(item.course?.id || item.courseId)\n                }\n              ];\n\n              return (\n                <DataCard\n                  key={classItem.id}\n                  item={classItem}\n                  itemType=\"class\"\n                  onEdit={handleEdit}\n                  onDelete={handleDelete}\n                  fields={classFields}\n                />\n              );\n            }) : (\n              <div className=\"empty-state\">\n                <div className=\"empty-icon\">Error</div>\n                <h4>Data Loading Error</h4>\n                <p>Classes data is not in the expected format. Please refresh the page.</p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ClassManagement;\n"],"names":["DataCard","_ref","item","itemType","onEdit","onDelete","fields","badges","getItemDescription","description","getCreatedBy","createdByName","_jsxs","className","children","_jsx","getItemName","subjectName","name","topicName","concat","isActive","map","badge","key","label","value","condition","style","icon","badgeValue","onClick","handleEdit","handleDelete","id","field","fieldValue","Date","createdAt","toLocaleDateString","ClassManagement","token","addNotification","useApp","classes","setClasses","useState","courseTypes","setCourseTypes","loading","setLoading","showForm","setShowForm","editingId","setEditingId","selectedCourseType","setSelectedCourseType","selectedCourse","setSelectedCourse","formData","setFormData","course","classesAbortRef","useRef","coursesAbortRef","isInitialMountRef","hasInitialFetchRef","lastClassesQueryRef","lastClassesQueryTimeRef","classesCacheRef","data","ts","lastCoursesQueryRef","lastCoursesQueryTimeRef","coursesCacheRef","useEffect","console","log","fetchData","warn","type","message","duration","current","fetchClasses","abort","_","async","hasToken","tokenLength","length","tokenPreview","substring","Error","courseTypesData","getCourseTypesCached","Array","isArray","courseTypesArray","content","academicCourseType","find","ct","toLowerCase","includes","fetchCoursesByCourseType","academicCourseTypeId","error","errorMessage","courseTypeId","arguments","undefined","courseId","queryKey","now","AbortController","getClasses","signal","classesArray","filteredData","originalLength","filter","cls","_cls$course","_cls$course$courseTyp","_cls$courseType","_cls$course2","clsCourseTypeId","courseType","isAcademic","structureType","courseTypeName","expectedCourseTypeId","parseInt","match","classItem","_classItem$course","window","confirm","deleteClass","resetForm","getCourseTypeName","getAcademicCourses","coursesByType","academicCourses","c","_c$courseType","isAcademicCourseType","setCoursesByType","getCourses","coursesArray","htmlFor","onChange","e","newCourse","target","onSubmit","preventDefault","submitData","displayOrder","courseIdType","hasCourseId","updateClass","createClass","_objectSpread","required","placeholder","disabled","_course$courseType","rows","classFields","_item$course","_item$course2","_item$course2$courseT","_item$courseType","_item$course3","courseName","getCourseName"],"sourceRoot":""}