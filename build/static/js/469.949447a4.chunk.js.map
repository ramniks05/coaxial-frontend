{"version":3,"file":"static/js/469.949447a4.chunk.js","mappings":"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","sources":["components/master-data/CourseManagement.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { clearCoursesCache, getCourseTypesCached, getCoursesCached } from '../../services/globalApiCache';\r\nimport { createCourse, deleteCourse, updateCourse } from '../../services/masterDataService';\r\nimport './MasterDataComponent.css';\r\n\r\n// Reusable DataCard Component\r\nconst DataCard = ({ \r\n  item, \r\n  itemType = 'item',\r\n  onEdit, \r\n  onDelete,\r\n  fields = [],\r\n  badges = []\r\n}) => {\r\n  const handleEdit = () => {\r\n    if (onEdit) {\r\n      onEdit(item);\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if (onDelete) {\r\n      onDelete(item.id);\r\n    }\r\n  };\r\n\r\n  const renderField = (field) => {\r\n    const { key, label, value, condition } = field;\r\n    \r\n    if (condition && !condition(item)) {\r\n      return null;\r\n    }\r\n    \r\n    // Handle function-based value extraction\r\n    const fieldValue = typeof value === 'function' ? value(item) : (value || item[key]);\r\n    \r\n    if (!fieldValue) {\r\n      return null;\r\n    }\r\n    \r\n    return (\r\n      <p key={key}>\r\n        <strong>{label}:</strong> {fieldValue}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  const renderBadge = (badge) => {\r\n    const { key, label, value, condition, style, icon } = badge;\r\n    \r\n    if (condition && !condition(item)) {\r\n      return null;\r\n    }\r\n    \r\n    const badgeValue = value || item[key];\r\n    \r\n    if (!badgeValue) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <span \r\n        key={key}\r\n        className=\"structure-badge\"\r\n        style={style}\r\n      >\r\n        {icon} {badgeValue}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getItemName = () => {\r\n    switch (itemType) {\r\n      case 'subject':\r\n        return item.subjectName || item.name;\r\n      case 'topic':\r\n        return item.topicName || item.name;\r\n      case 'module':\r\n        return item.name;\r\n      case 'courseType':\r\n        return item.name;\r\n      case 'course':\r\n        return item.name;\r\n      default:\r\n        return item.name;\r\n    }\r\n  };\r\n\r\n  const getItemDescription = () => {\r\n    return item.description;\r\n  };\r\n\r\n  const getCreatedBy = () => {\r\n    return item.createdByName;\r\n  };\r\n\r\n  return (\r\n    <div className=\"data-card\">\r\n      <div className=\"card-header\">\r\n        <div className=\"card-title\">\r\n          <h4>{getItemName()}</h4>\r\n          <div className=\"card-badges\">\r\n            <span className={`status-badge ${item.isActive ? 'active' : 'inactive'}`}>\r\n              {item.isActive ? 'Active' : 'Inactive'}\r\n            </span>\r\n            {badges.map(renderBadge)}\r\n          </div>\r\n        </div>\r\n        <div className=\"card-actions\">\r\n          <button \r\n            className=\"btn btn-outline btn-xs\"\r\n            onClick={handleEdit}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button \r\n            className=\"btn btn-danger btn-xs\"\r\n            onClick={handleDelete}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"card-content\">\r\n        {getItemDescription() && (\r\n          <p className=\"description\">{getItemDescription()}</p>\r\n        )}\r\n        \r\n        {fields.map(renderField)}\r\n      </div>\r\n      \r\n      <div className=\"card-footer\">\r\n        <small className=\"text-muted\">\r\n          Created: {new Date(item.createdAt).toLocaleDateString()}\r\n          {getCreatedBy() && (\r\n            <span> by {getCreatedBy()}</span>\r\n          )}\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CourseManagement = () => {\r\n  const { token, addNotification } = useApp();\r\n  const [courses, setCourses] = useState([]);\r\n  const [courseTypes, setCourseTypes] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [selectedCourseType, setSelectedCourseType] = useState('');\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    courseType: { id: '' },\r\n    displayOrder: '',\r\n    isActive: true\r\n  });\r\n\r\n  // Use refs to track if data has been fetched to prevent infinite loops\r\n  const courseTypesFetched = useRef(false);\r\n  const coursesFetched = useRef(false);\r\n  const tokenRef = useRef(token);\r\n  \r\n  // Update token ref when token changes\r\n  useEffect(() => {\r\n    tokenRef.current = token;\r\n  }, [token]);\r\n\r\n  // Fetch course types on component mount (only once)\r\n  useEffect(() => {\r\n    if (courseTypesFetched.current || !tokenRef.current) return; // Prevent multiple calls or if no token\r\n    \r\n    const fetchCourseTypes = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const courseTypesResponse = await getCourseTypesCached(tokenRef.current);\r\n        console.log('Raw courseTypes API response:', courseTypesResponse);\r\n        console.log('CourseTypes data type:', typeof courseTypesResponse);\r\n        console.log('CourseTypes is array:', Array.isArray(courseTypesResponse));\r\n        \r\n        // Handle different response formats\r\n        let courseTypesArray = [];\r\n        if (Array.isArray(courseTypesResponse)) {\r\n          courseTypesArray = courseTypesResponse;\r\n        } else if (courseTypesResponse && Array.isArray(courseTypesResponse.content)) {\r\n          // Handle paginated response\r\n          courseTypesArray = courseTypesResponse.content;\r\n        } else if (courseTypesResponse && Array.isArray(courseTypesResponse.data)) {\r\n          // Handle wrapped response\r\n          courseTypesArray = courseTypesResponse.data;\r\n        } else if (courseTypesResponse && courseTypesResponse.courseTypes && Array.isArray(courseTypesResponse.courseTypes)) {\r\n          // Handle nested response\r\n          courseTypesArray = courseTypesResponse.courseTypes;\r\n        } else {\r\n          console.warn('Unexpected courseTypes data format:', courseTypesResponse);\r\n          courseTypesArray = [];\r\n        }\r\n        \r\n        console.log('Processed courseTypes array:', courseTypesArray);\r\n        setCourseTypes(courseTypesArray);\r\n        courseTypesFetched.current = true; // Mark as fetched\r\n      } catch (error) {\r\n        console.error('Error fetching course types:', error);\r\n        setCourseTypes([]);\r\n        addNotification({\r\n          type: 'error',\r\n          message: `Failed to fetch course types: ${error.message}`,\r\n          duration: 5000\r\n        });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCourseTypes();\r\n  }, []); // Empty dependency array - only run once on mount\r\n\r\n  // Fetch courses when component loads or when course type filter changes\r\n  useEffect(() => {\r\n    if (!tokenRef.current) return; // Don't fetch if no token\r\n    \r\n    const fetchCoursesData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const data = await getCoursesCached(tokenRef.current, selectedCourseType, 0, 10, 'createdAt', 'desc');\r\n        console.log('Raw courses API response:', data);\r\n        console.log('Courses data type:', typeof data);\r\n        console.log('Courses is array:', Array.isArray(data));\r\n        \r\n        // Handle different response formats\r\n        let coursesArray = [];\r\n        if (Array.isArray(data)) {\r\n          coursesArray = data;\r\n        } else if (data && Array.isArray(data.content)) {\r\n          // Handle paginated response\r\n          coursesArray = data.content;\r\n        } else if (data && Array.isArray(data.data)) {\r\n          // Handle wrapped response\r\n          coursesArray = data.data;\r\n        } else if (data && data.courses && Array.isArray(data.courses)) {\r\n          // Handle nested response\r\n          coursesArray = data.courses;\r\n        } else {\r\n          console.warn('Unexpected courses data format:', data);\r\n          coursesArray = [];\r\n        }\r\n        \r\n        console.log('Processed courses array:', coursesArray);\r\n        setCourses(coursesArray);\r\n        coursesFetched.current = true; // Mark as fetched\r\n      } catch (error) {\r\n        console.error('Error fetching courses:', error);\r\n        \r\n        // Show the actual error instead of mock data\r\n        addNotification({\r\n          type: 'error',\r\n          message: `Failed to fetch courses: ${error.message}`,\r\n          duration: 7000\r\n        });\r\n        \r\n        // Set empty courses array instead of mock data\r\n        setCourses([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCoursesData();\r\n  }, [selectedCourseType]); // Only depend on selectedCourseType, not token\r\n\r\n  // Simple fetchCourses function for manual calls (like after create/update/delete)\r\n  const fetchCourses = async (courseTypeId = null) => {\r\n    if (!tokenRef.current) return; // Don't fetch if no token\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const data = await getCoursesCached(tokenRef.current, courseTypeId, 0, 10, 'createdAt', 'desc');\r\n      console.log('Raw courses API response (fetchCourses):', data);\r\n      console.log('Courses data type:', typeof data);\r\n      console.log('Courses is array:', Array.isArray(data));\r\n      \r\n      // Handle different response formats\r\n      let coursesArray = [];\r\n      if (Array.isArray(data)) {\r\n        coursesArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        // Handle paginated response\r\n        coursesArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        // Handle wrapped response\r\n        coursesArray = data.data;\r\n      } else if (data && data.courses && Array.isArray(data.courses)) {\r\n        // Handle nested response\r\n        coursesArray = data.courses;\r\n      } else {\r\n        console.warn('Unexpected courses data format (fetchCourses):', data);\r\n        coursesArray = [];\r\n      }\r\n      \r\n      console.log('Processed courses array (fetchCourses):', coursesArray);\r\n      setCourses(coursesArray);\r\n    } catch (error) {\r\n      console.error('Error fetching courses:', error);\r\n      \r\n      // Show the actual error instead of mock data\r\n      addNotification({\r\n        type: 'error',\r\n        message: `Failed to fetch courses: ${error.message}`,\r\n        duration: 7000\r\n      });\r\n      \r\n      // Set empty courses array instead of mock data\r\n      setCourses([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Validate required fields\r\n      if (!formData.name || !formData.name.trim()) {\r\n        addNotification({\r\n          type: 'error',\r\n          message: 'Course name is required',\r\n          duration: 5000\r\n        });\r\n        return;\r\n      }\r\n      \r\n      if (!formData.courseType.id) {\r\n        addNotification({\r\n          type: 'error',\r\n          message: 'Course type is required',\r\n          duration: 5000\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // Prepare data in the correct format\r\n      const submitData = {\r\n        name: formData.name.trim(),\r\n        description: formData.description ? formData.description.trim() : '', // Ensure description is never null\r\n        courseType: { id: parseInt(formData.courseType.id) }, // Use nested object like creation\r\n        displayOrder: formData.displayOrder ? parseInt(formData.displayOrder) : 0,\r\n        isActive: formData.isActive\r\n      };\r\n      \r\n      console.log('Form data being submitted:', submitData);\r\n      console.log('Token available:', !!token);\r\n      \r\n      if (editingId) {\r\n        // Use the same format as creation for updates\r\n        console.log('Update data being submitted:', submitData);\r\n        await updateCourse(token, editingId, submitData);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Course updated successfully',\r\n          duration: 3000\r\n        });\r\n        clearCoursesCache(); // Clear cache to force refresh\r\n        // Manually refresh the courses list\r\n        await fetchCourses(selectedCourseType);\r\n      } else {\r\n        await createCourse(token, submitData);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Course created successfully',\r\n          duration: 3000\r\n        });\r\n        clearCoursesCache(); // Clear cache to force refresh\r\n        // Manually refresh the courses list\r\n        await fetchCourses(selectedCourseType);\r\n      }\r\n      \r\n      setShowForm(false);\r\n      setEditingId(null);\r\n      setFormData({ name: '', description: '', courseType: { id: '' }, displayOrder: '', isActive: true });\r\n    } catch (error) {\r\n      console.error('Error saving course:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: `Failed to save course: ${error.message}`,\r\n        duration: 5000\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (course) => {\r\n    console.log('=== EDIT COURSE DEBUG ===');\r\n    console.log('Editing course:', course);\r\n    console.log('Available courseTypes:', courseTypes);\r\n    console.log('CourseTypes length:', courseTypes.length);\r\n    \r\n    // Handle different possible course type data structures\r\n    let courseTypeId = '';\r\n    \r\n    // Priority 1: Direct courseTypeId (most reliable for this API)\r\n    if (course.courseTypeId) {\r\n      courseTypeId = course.courseTypeId;\r\n      console.log('Found courseTypeId:', courseTypeId);\r\n    }\r\n    // Priority 2: Nested courseType.id\r\n    else if (course.courseType?.id) {\r\n      courseTypeId = course.courseType.id;\r\n      console.log('Found courseType.id:', courseTypeId);\r\n    }\r\n    // Priority 3: Match by courseTypeName\r\n    else if (course.courseTypeName) {\r\n      const matchingCourseType = courseTypes.find(ct => ct.name === course.courseTypeName);\r\n      if (matchingCourseType) {\r\n        courseTypeId = matchingCourseType.id;\r\n        console.log('Found courseType by name match:', courseTypeId);\r\n      }\r\n    }\r\n    // Priority 4: Other fallbacks\r\n    else if (typeof course.courseType === 'string') {\r\n      courseTypeId = course.courseType;\r\n      console.log('Found courseType as string:', courseTypeId);\r\n    } else if (typeof course.courseType === 'number') {\r\n      courseTypeId = course.courseType.toString();\r\n      console.log('Found courseType as number:', courseTypeId);\r\n    }\r\n    \r\n    console.log('Final extracted courseTypeId:', courseTypeId);\r\n    console.log('CourseTypeId type:', typeof courseTypeId);\r\n    \r\n    // Verify the courseTypeId exists in available courseTypes\r\n    const matchingCourseType = courseTypes.find(ct => ct.id === parseInt(courseTypeId));\r\n    console.log('Matching courseType found:', matchingCourseType);\r\n    \r\n    // Check if courseTypeId matches any available option\r\n    const availableIds = courseTypes.map(ct => ct.id);\r\n    console.log('Available courseType IDs:', availableIds);\r\n    console.log('Is courseTypeId in available IDs?', availableIds.includes(parseInt(courseTypeId)));\r\n    \r\n    const newFormData = {\r\n      name: course.name || '',\r\n      description: course.description || '',\r\n      courseType: { id: courseTypeId },\r\n      displayOrder: course.displayOrder || '',\r\n      isActive: course.isActive !== undefined ? course.isActive : true\r\n    };\r\n    \r\n    console.log('Setting formData to:', newFormData);\r\n    setFormData(newFormData);\r\n    setEditingId(course.id);\r\n    setShowForm(true);\r\n    console.log('=== END EDIT DEBUG ===');\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (window.confirm('Are you sure you want to delete this course?')) {\r\n      try {\r\n        setLoading(true);\r\n        await deleteCourse(token, id);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Course deleted successfully',\r\n          duration: 3000\r\n        });\r\n        clearCoursesCache(); // Clear cache to force refresh\r\n        // Manually refresh the courses list\r\n        await fetchCourses(selectedCourseType);\r\n      } catch (error) {\r\n        console.error('Error deleting course:', error);\r\n        addNotification({\r\n          type: 'error',\r\n          message: 'Failed to delete course',\r\n          duration: 5000\r\n        });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({ name: '', description: '', courseType: { id: '' }, displayOrder: '', isActive: true });\r\n    setEditingId(null);\r\n    setShowForm(false);\r\n  };\r\n\r\n  const getCourseTypeName = (courseTypeId) => {\r\n    if (!courseTypeId) return 'Unknown';\r\n    const courseType = courseTypes.find(ct => ct.id === parseInt(courseTypeId));\r\n    return courseType ? courseType.name : 'Unknown';\r\n  };\r\n\r\n  // Group courses by course type\r\n  const groupCoursesByType = () => {\r\n    const grouped = {};\r\n    \r\n    courses.forEach(course => {\r\n      const courseTypeId = course.courseType?.id || course.courseTypeId;\r\n      const courseTypeName = getCourseTypeName(courseTypeId);\r\n      \r\n      if (!grouped[courseTypeName]) {\r\n        grouped[courseTypeName] = [];\r\n      }\r\n      grouped[courseTypeName].push(course);\r\n    });\r\n    \r\n    return grouped;\r\n  };\r\n\r\n  const groupedCourses = groupCoursesByType();\r\n  const courseTypeNames = Object.keys(groupedCourses).sort();\r\n\r\n  return (\r\n    <div className=\"master-data-component\">\r\n      <div className=\"component-header\">\r\n        <div className=\"header-info\">\r\n          <h2>Course Management</h2>\r\n          <p>Manage courses for different course types (e.g., Mathematics, Science, English)</p>\r\n        </div>\r\n        <div style={{ display: 'flex', gap: '10px' }}>\r\n          <button \r\n            className=\"btn btn-primary\"\r\n            onClick={() => setShowForm(true)}\r\n          >\r\n            Add Course\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Course Type Filter */}\r\n      <div className=\"filter-section\">\r\n        <div className=\"filter-group\">\r\n          <label htmlFor=\"course-type-filter\">Filter by Course Type:</label>\r\n          <select\r\n            id=\"course-type-filter\"\r\n            value={selectedCourseType}\r\n            onChange={(e) => setSelectedCourseType(e.target.value)}\r\n            className=\"filter-select\"\r\n          >\r\n            <option value=\"\">All Course Types</option>\r\n            {courseTypes.map(courseType => (\r\n              <option key={courseType.id} value={courseType.id}>\r\n                {courseType.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {showForm && (\r\n        <div className=\"form-section\">\r\n          <div className=\"form-header\">\r\n            <h3>{editingId ? 'Edit Course' : 'Add New Course'}</h3>\r\n            <button className=\"btn btn-outline btn-sm\" onClick={resetForm}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          \r\n          <form onSubmit={handleSubmit} className=\"master-data-form\">\r\n            {/* Basic Information */}\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"name\">Course Name *</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  value={formData.name}\r\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n                  className=\"form-input\"\r\n                  required\r\n                  placeholder=\"e.g., Mathematics, Science, English\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"courseType\">Course Type *</label>\r\n                <select\r\n                  id=\"courseType\"\r\n                  name=\"courseType\"\r\n                  value={formData.courseType.id}\r\n                  onChange={(e) => setFormData({ \r\n                    ...formData, \r\n                    courseType: { id: e.target.value }\r\n                  })}\r\n                  className=\"form-input\"\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Course Type</option>\r\n                  {courseTypes.length === 0 ? (\r\n                    <option value=\"\" disabled>No Course Types Available</option>\r\n                  ) : (\r\n                    courseTypes.map(courseType => (\r\n                      <option key={courseType.id} value={courseType.id}>\r\n                        {courseType.name}\r\n                      </option>\r\n                    ))\r\n                  )}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"form-row\">\r\n              <div className=\"form-group full-width\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <textarea\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  value={formData.description}\r\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                  className=\"form-input\"\r\n                  placeholder=\"Brief description of this course\"\r\n                  rows={3}\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"displayOrder\">Display Order</label>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"displayOrder\"\r\n                  name=\"displayOrder\"\r\n                  value={formData.displayOrder}\r\n                  onChange={(e) => setFormData({ ...formData, displayOrder: e.target.value })}\r\n                  className=\"form-input\"\r\n                  placeholder=\"e.g., 1, 2, 3\"\r\n                  min=\"1\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"isActive\">Status</label>\r\n                <select\r\n                  id=\"isActive\"\r\n                  name=\"isActive\"\r\n                  value={formData.isActive}\r\n                  onChange={(e) => setFormData({ ...formData, isActive: e.target.value === 'true' })}\r\n                  className=\"form-input\"\r\n                >\r\n                  <option value={true}>Active</option>\r\n                  <option value={false}>Inactive</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"form-actions\">\r\n              <button type=\"button\" className=\"btn btn-outline\" onClick={resetForm}>\r\n                Cancel\r\n              </button>\r\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\r\n                {loading ? 'Saving...' : (editingId ? 'Update Course' : 'Create Course')}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"data-section\">\r\n        <div className=\"data-header\">\r\n          <h3>Courses ({courses.length})</h3>\r\n          <div className=\"data-actions\">\r\n            <button \r\n              className=\"btn btn-outline btn-sm\"\r\n              onClick={() => fetchCourses(selectedCourseType)}\r\n              disabled={loading}\r\n            >\r\n              Refresh\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {loading ? (\r\n          <div className=\"loading-state\">\r\n            <div className=\"loading-spinner\"></div>\r\n            <p>Loading courses...</p>\r\n          </div>\r\n        ) : courses.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <div className=\"empty-icon\">📚</div>\r\n            <h4>No Courses Found</h4>\r\n            <p>Create your first course to get started</p>\r\n            <button \r\n              className=\"btn btn-primary\"\r\n              onClick={() => setShowForm(true)}\r\n            >\r\n              Add Course\r\n            </button>\r\n          </div>\r\n        ) : courseTypeNames.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <div className=\"empty-icon\">No Courses</div>\r\n            <h4>No Courses Found</h4>\r\n            <p>Create your first course to get started</p>\r\n            <button \r\n              className=\"btn btn-primary\"\r\n              onClick={() => setShowForm(true)}\r\n            >\r\n              Add Course\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"courses-by-type\">\r\n            {courseTypeNames.map((courseTypeName) => (\r\n              <div key={courseTypeName} className=\"course-type-section\">\r\n                <div className=\"section-header\">\r\n                  <h4>{courseTypeName} ({groupedCourses[courseTypeName].length})</h4>\r\n                </div>\r\n                <div className=\"data-grid\">\r\n                  {groupedCourses[courseTypeName].map((course) => {\r\n                    // Course field configuration\r\n                    const courseFields = [\r\n                      { \r\n                        key: 'displayOrder', \r\n                        label: 'Display Order', \r\n                        condition: (item) => item.displayOrder !== undefined && item.displayOrder !== null && item.displayOrder !== 0\r\n                      }\r\n                    ];\r\n\r\n                    return (\r\n                      <DataCard\r\n                        key={course.id}\r\n                        item={course}\r\n                        itemType=\"course\"\r\n                        onEdit={handleEdit}\r\n                        onDelete={handleDelete}\r\n                        fields={courseFields}\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CourseManagement;"],"names":["DataCard","_ref","item","itemType","onEdit","onDelete","fields","badges","getItemDescription","description","getCreatedBy","createdByName","_jsxs","className","children","_jsx","getItemName","subjectName","name","topicName","concat","isActive","map","badge","key","label","value","condition","style","icon","badgeValue","onClick","handleEdit","handleDelete","id","field","fieldValue","Date","createdAt","toLocaleDateString","CourseManagement","token","addNotification","useApp","courses","setCourses","useState","courseTypes","setCourseTypes","loading","setLoading","showForm","setShowForm","editingId","setEditingId","selectedCourseType","setSelectedCourseType","formData","setFormData","courseType","displayOrder","courseTypesFetched","useRef","coursesFetched","tokenRef","useEffect","current","async","courseTypesResponse","getCourseTypesCached","console","log","Array","isArray","courseTypesArray","content","data","warn","error","type","message","duration","fetchCourseTypes","getCoursesCached","coursesArray","fetchCoursesData","fetchCourses","courseTypeId","arguments","length","undefined","course","_course$courseType","courseTypeName","matchingCourseType","find","ct","toString","parseInt","availableIds","includes","newFormData","window","confirm","deleteCourse","clearCoursesCache","resetForm","groupedCourses","groupCoursesByType","grouped","forEach","_course$courseType2","getCourseTypeName","push","courseTypeNames","Object","keys","sort","display","gap","htmlFor","onChange","e","target","onSubmit","preventDefault","trim","submitData","updateCourse","createCourse","_objectSpread","required","placeholder","disabled","rows","min","courseFields"],"sourceRoot":""}