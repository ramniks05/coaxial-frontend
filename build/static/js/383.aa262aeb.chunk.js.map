{"version":3,"file":"static/js/383.aa262aeb.chunk.js","mappings":"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","sources":["components/master-data/TopicManagement.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useApp } from '../../context/AppContext';\r\nimport { getCourseTypesCached } from '../../services/globalApiCache';\r\nimport {\r\n    createTopic,\r\n    deleteTopic,\r\n    getAllSubjectLinkages,\r\n    getClassesByCourse,\r\n    getCourses,\r\n    getExamsByCourse,\r\n    getMasterSubjectsByCourseType,\r\n    getTopicsCombinedFilter,\r\n    updateTopic\r\n} from '../../services/masterDataService';\r\nimport './MasterDataComponent.css';\r\n\r\n// Reusable DataCard Component\r\nconst DataCard = ({ \r\n  item, \r\n  itemType = 'item',\r\n  onEdit, \r\n  onDelete,\r\n  fields = [],\r\n  badges = []\r\n}) => {\r\n  const handleEdit = () => {\r\n    if (onEdit) {\r\n      onEdit(item);\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if (onDelete) {\r\n      onDelete(item.id);\r\n    }\r\n  };\r\n\r\n  const renderField = (field) => {\r\n    const { key, label, value, condition } = field;\r\n    \r\n    if (condition && !condition(item)) {\r\n      return null;\r\n    }\r\n    \r\n    // Handle function-based value extraction\r\n    const fieldValue = typeof value === 'function' ? value(item) : (value || item[key]);\r\n    \r\n    if (!fieldValue) {\r\n      return null;\r\n    }\r\n    \r\n    return (\r\n      <p key={key}>\r\n        <strong>{label}:</strong> {fieldValue}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  const renderBadge = (badge) => {\r\n    const { key, label, value, condition, style, icon } = badge;\r\n    \r\n    if (condition && !condition(item)) {\r\n      return null;\r\n    }\r\n    \r\n    const badgeValue = value || item[key];\r\n    \r\n    if (!badgeValue) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <span \r\n        key={key}\r\n        className=\"structure-badge\"\r\n        style={style}\r\n      >\r\n        {icon} {badgeValue}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getItemName = () => {\r\n    switch (itemType) {\r\n      case 'subject':\r\n        return item.subjectName || item.name;\r\n      case 'topic':\r\n        return item.topicName || item.name;\r\n      case 'module':\r\n        return item.name;\r\n      default:\r\n        return item.name;\r\n    }\r\n  };\r\n\r\n  const getItemDescription = () => {\r\n    return item.description;\r\n  };\r\n\r\n  const getCreatedBy = () => {\r\n    return item.createdByName;\r\n  };\r\n\r\n  return (\r\n    <div className=\"data-card\">\r\n      <div className=\"card-header\">\r\n        <div className=\"card-title\">\r\n          <h4>{getItemName()}</h4>\r\n          <div className=\"card-badges\">\r\n            <span className={`status-badge ${item.isActive ? 'active' : 'inactive'}`}>\r\n              {item.isActive ? 'Active' : 'Inactive'}\r\n            </span>\r\n            {badges.map(renderBadge)}\r\n          </div>\r\n        </div>\r\n        <div className=\"card-actions\">\r\n          <button \r\n            className=\"btn btn-outline btn-xs\"\r\n            onClick={handleEdit}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button \r\n            className=\"btn btn-danger btn-xs\"\r\n            onClick={handleDelete}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"card-content\">\r\n        {getItemDescription() && (\r\n          <p className=\"description\">{getItemDescription()}</p>\r\n        )}\r\n        \r\n        {fields.map(renderField)}\r\n      </div>\r\n      \r\n      <div className=\"card-footer\">\r\n        <small className=\"text-muted\">\r\n          Created: {new Date(item.createdAt).toLocaleDateString()}\r\n          {getCreatedBy() && (\r\n            <span> by {getCreatedBy()}</span>\r\n          )}\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TopicManagement = () => {\r\n  const { token, addNotification } = useApp();\r\n  \r\n  // Main data states\r\n  const [topics, setTopics] = useState([]);\r\n  const [courseTypes, setCourseTypes] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [editingId, setEditingId] = useState(null);\r\n  \r\n  // Filter states for drill-down filtering\r\n  const [selectedCourseType, setSelectedCourseType] = useState('');\r\n  const [selectedCourse, setSelectedCourse] = useState('');\r\n  const [selectedClass, setSelectedClass] = useState('');\r\n  const [selectedExam, setSelectedExam] = useState('');\r\n  const [selectedSubject, setSelectedSubject] = useState('');\r\n  const [showActiveOnly, setShowActiveOnly] = useState(true);\r\n  \r\n  // Form data state (separate from filter state)\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    displayOrder: '',\r\n    isActive: true,\r\n    courseType: { id: '' },\r\n    course: { id: '' },\r\n    class: { id: '' },\r\n    exam: { id: '' },\r\n    subjectId: ''\r\n  });\r\n  \r\n  // Dropdown data states (for both filter and form)\r\n  const [courses, setCourses] = useState([]);\r\n  const [classes, setClasses] = useState([]);\r\n  const [exams, setExams] = useState([]);\r\n  const [filteredCourses, setFilteredCourses] = useState([]);\r\n  const [filteredClasses, setFilteredClasses] = useState([]);\r\n  const [filteredExams, setFilteredExams] = useState([]);\r\n  const [masterSubjects, setMasterSubjects] = useState([]);\r\n  const [subjectLinkages, setSubjectLinkages] = useState([]);\r\n  const [loadingStates, setLoadingStates] = useState({\r\n    courses: false,\r\n    classes: false,\r\n    exams: false,\r\n    masterSubjects: false\r\n  });\r\n\r\n  // Refs for preventing duplicate calls\r\n  const isInitialMountRef = useRef(true);\r\n  const fetchTopicsInProgressRef = useRef(false);\r\n  const topicsAbortRef = useRef(null);\r\n  const courseTypesAbortRef = useRef(null);\r\n  const courseTypesCacheRef = useRef({ data: null, ts: 0 });\r\n  \r\n  // Guards to avoid duplicate initial fetches on first render\r\n  const didMountCourseType = useRef(false);\r\n  const didMountCourse = useRef(false);\r\n  const didMountClass = useRef(false);\r\n  const didMountExam = useRef(false);\r\n  const didMountActive = useRef(false);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (courseTypesAbortRef.current) {\r\n        try { courseTypesAbortRef.current.abort(); } catch(_) {}\r\n      }\r\n      if (topicsAbortRef.current) {\r\n        try { topicsAbortRef.current.abort(); } catch(_) {}\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Initial data load\r\n  const hasInitialFetchRef = useRef(false);\r\n  useEffect(() => {\r\n    if (!token || hasInitialFetchRef.current) return;\r\n    hasInitialFetchRef.current = true;\r\n    fetchData();\r\n  }, [token]);\r\n\r\n  // Helper functions for course type logic\r\n  const isAcademicCourseType = (courseTypeId) => {\r\n    const courseType = courseTypes.find(ct => ct.id === parseInt(courseTypeId));\r\n    return courseType && courseType.name && courseType.name.toLowerCase().includes('academic');\r\n  };\r\n\r\n  const isCompetitiveCourseType = (courseTypeId) => {\r\n    const courseType = courseTypes.find(ct => ct.id === parseInt(courseTypeId));\r\n    return courseType && courseType.name && courseType.name.toLowerCase().includes('competitive');\r\n  };\r\n\r\n  const isProfessionalCourseType = (courseTypeId) => {\r\n    const courseType = courseTypes.find(ct => ct.id === parseInt(courseTypeId));\r\n    return courseType && courseType.name && courseType.name.toLowerCase().includes('professional');\r\n  };\r\n\r\n  // Fetch initial data\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      // Course types with 5s cache + abort/dedup\r\n      let courseTypesData = null;\r\n      const now = Date.now();\r\n      if (courseTypesCacheRef.current.data && now - courseTypesCacheRef.current.ts < 5000) {\r\n        courseTypesData = courseTypesCacheRef.current.data;\r\n      } else {\r\n        if (courseTypesAbortRef.current) {\r\n          try { courseTypesAbortRef.current.abort(); } catch(_) {}\r\n        }\r\n        courseTypesAbortRef.current = new AbortController();\r\n        courseTypesData = await getCourseTypesCached(token);\r\n        courseTypesCacheRef.current = { data: courseTypesData, ts: now };\r\n      }\r\n      \r\n      console.log('Raw courseTypes API response (TopicManagement):', courseTypesData);\r\n      \r\n      // Handle different response formats\r\n      let courseTypesArray = [];\r\n      if (Array.isArray(courseTypesData)) {\r\n        courseTypesArray = courseTypesData;\r\n      } else if (courseTypesData && Array.isArray(courseTypesData.content)) {\r\n        courseTypesArray = courseTypesData.content;\r\n      } else if (courseTypesData && Array.isArray(courseTypesData.data)) {\r\n        courseTypesArray = courseTypesData.data;\r\n      } else if (courseTypesData && courseTypesData.courseTypes && Array.isArray(courseTypesData.courseTypes)) {\r\n        courseTypesArray = courseTypesData.courseTypes;\r\n      } else {\r\n        console.warn('Unexpected course types data format:', courseTypesData);\r\n        courseTypesArray = [];\r\n      }\r\n      \r\n      console.log('Normalized course types array:', courseTypesArray);\r\n      setCourseTypes(courseTypesArray);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching initial data:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to load course types',\r\n        duration: 5000\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch courses by course type\r\n  const fetchCoursesByCourseType = async (courseTypeId) => {\r\n    if (!courseTypeId) {\r\n      setFilteredCourses([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setLoadingStates(prev => ({ ...prev, courses: true }));\r\n      console.log('Fetching courses for course type:', courseTypeId);\r\n      \r\n      const data = await getCourses(token, courseTypeId, 0, 100, 'createdAt', 'desc');\r\n      console.log('Raw courses data from API:', data);\r\n      \r\n      // Robust array handling for various response formats\r\n      let coursesArray = [];\r\n      if (Array.isArray(data)) {\r\n        coursesArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        coursesArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        coursesArray = data.data;\r\n      } else if (data && data.courses && Array.isArray(data.courses)) {\r\n        coursesArray = data.courses;\r\n      } else {\r\n        console.warn('Unexpected courses data format:', data);\r\n        coursesArray = [];\r\n      }\r\n      \r\n      console.log('Normalized courses array:', coursesArray);\r\n      setFilteredCourses(coursesArray);\r\n      setCourses(coursesArray); // Also set for form dropdowns\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching courses:', error);\r\n      setFilteredCourses([]);\r\n    } finally {\r\n      setLoadingStates(prev => ({ ...prev, courses: false }));\r\n    }\r\n  };\r\n\r\n  // Fetch classes and exams by course\r\n  const fetchClassesAndExamsByCourse = async (courseTypeId, courseId) => {\r\n    if (!courseTypeId || !courseId) {\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setLoadingStates(prev => ({ ...prev, classes: true, exams: true }));\r\n      console.log('Fetching classes and exams for course:', courseId);\r\n      \r\n      const [classesData, examsData] = await Promise.all([\r\n        getClassesByCourse(token, courseId, 0, 100, 'createdAt', 'desc'),\r\n        getExamsByCourse(token, courseId, 0, 100, 'createdAt', 'desc')\r\n      ]);\r\n      \r\n      console.log('Raw classes data from API:', classesData);\r\n      console.log('Raw exams data from API:', examsData);\r\n      \r\n      // Robust array handling for classes\r\n      let classesArray = [];\r\n      if (Array.isArray(classesData)) {\r\n        classesArray = classesData;\r\n      } else if (classesData && Array.isArray(classesData.content)) {\r\n        classesArray = classesData.content;\r\n      } else if (classesData && Array.isArray(classesData.data)) {\r\n        classesArray = classesData.data;\r\n      } else {\r\n        classesArray = [];\r\n      }\r\n      \r\n      // Robust array handling for exams\r\n      let examsArray = [];\r\n      if (Array.isArray(examsData)) {\r\n        examsArray = examsData;\r\n      } else if (examsData && Array.isArray(examsData.content)) {\r\n        examsArray = examsData.content;\r\n      } else if (examsData && Array.isArray(examsData.data)) {\r\n        examsArray = examsData.data;\r\n      } else {\r\n        examsArray = [];\r\n      }\r\n      \r\n      console.log('Normalized classes array:', classesArray);\r\n      console.log('Normalized exams array:', examsArray);\r\n      setFilteredClasses(classesArray);\r\n      setFilteredExams(examsArray);\r\n      setClasses(classesArray); // Also set for form dropdowns\r\n      setExams(examsArray); // Also set for form dropdowns\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching classes and exams:', error);\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n    } finally {\r\n      setLoadingStates(prev => ({ ...prev, classes: false, exams: false }));\r\n    }\r\n  };\r\n\r\n  // Fetch master subjects by course type\r\n  const fetchMasterSubjectsByCourseType = async (courseTypeId) => {\r\n    if (!courseTypeId) {\r\n      setMasterSubjects([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setLoadingStates(prev => ({ ...prev, masterSubjects: true }));\r\n      console.log('Fetching master subjects for course type:', courseTypeId);\r\n      \r\n      const data = await getMasterSubjectsByCourseType(token, courseTypeId, { active: showActiveOnly });\r\n      console.log('Raw master subjects data from API:', data);\r\n      \r\n      // Robust array handling\r\n      let subjectsArray = [];\r\n      if (Array.isArray(data)) {\r\n        subjectsArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        subjectsArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        subjectsArray = data.data;\r\n      } else {\r\n        subjectsArray = [];\r\n      }\r\n      \r\n      console.log('Normalized master subjects array:', subjectsArray);\r\n      setMasterSubjects(subjectsArray);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching master subjects:', error);\r\n      setMasterSubjects([]);\r\n    } finally {\r\n      setLoadingStates(prev => ({ ...prev, masterSubjects: false }));\r\n    }\r\n  };\r\n\r\n  // Fetch subject linkages\r\n  const fetchSubjectLinkages = async (courseTypeId, courseId, classId, examId) => {\r\n    if (!courseTypeId || !courseId) {\r\n      setSubjectLinkages([]);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log('Fetching subject linkages for:', { courseTypeId, courseId, classId, examId });\r\n      \r\n      const data = await getAllSubjectLinkages(token, {\r\n        courseTypeId,\r\n        courseId,\r\n        classId,\r\n        examId,\r\n        active: showActiveOnly\r\n      });\r\n      console.log('Raw subject linkages data from API:', data);\r\n      \r\n      // Robust array handling\r\n      let subjectsArray = [];\r\n      if (Array.isArray(data)) {\r\n        subjectsArray = data;\r\n      } else if (data && Array.isArray(data.content)) {\r\n        subjectsArray = data.content;\r\n      } else if (data && Array.isArray(data.data)) {\r\n        subjectsArray = data.data;\r\n      } else {\r\n        subjectsArray = [];\r\n      }\r\n      \r\n      console.log('Normalized subject linkages array:', subjectsArray);\r\n      setSubjectLinkages(subjectsArray);\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching subject linkages:', error);\r\n      setSubjectLinkages([]);\r\n    }\r\n  };\r\n\r\n  // Filter change effects\r\n  useEffect(() => {\r\n    if (!didMountCourseType.current) { \r\n      didMountCourseType.current = true; \r\n      return; \r\n    }\r\n    console.log('=== COURSE TYPE CHANGE EFFECT ===');\r\n    console.log('Selected course type changed:', selectedCourseType);\r\n    \r\n    if (selectedCourseType) {\r\n      const courseTypeId = parseInt(selectedCourseType);\r\n      console.log('Filtering courses for course type:', courseTypeId);\r\n      \r\n      // Fetch courses and master subjects for this course type\r\n      fetchCoursesByCourseType(courseTypeId);\r\n      fetchMasterSubjectsByCourseType(courseTypeId);\r\n      \r\n      // Reset dependent filters\r\n      setSelectedCourse('');\r\n      setSelectedClass('');\r\n      setSelectedExam('');\r\n      setSelectedSubject('');\r\n    } else {\r\n      setFilteredCourses([]);\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n      setMasterSubjects([]);\r\n      setSubjectLinkages([]);\r\n    }\r\n  }, [selectedCourseType]);\r\n\r\n  useEffect(() => {\r\n    if (!didMountCourse.current) { \r\n      didMountCourse.current = true; \r\n      return; \r\n    }\r\n    if (selectedCourse) {\r\n      const courseId = parseInt(selectedCourse);\r\n      const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\r\n      console.log('=== COURSE CHANGE EFFECT ===');\r\n      console.log('Selected course changed:', courseId, 'course type:', courseTypeId);\r\n      \r\n      // Fetch classes, exams, and subject linkages for this course\r\n      fetchClassesAndExamsByCourse(courseTypeId, courseId);\r\n      fetchSubjectLinkages(courseTypeId, courseId, null, null);\r\n      \r\n      // Reset dependent filters\r\n      setSelectedClass('');\r\n      setSelectedExam('');\r\n      setSelectedSubject('');\r\n    } else {\r\n      setFilteredClasses([]);\r\n      setFilteredExams([]);\r\n      setSubjectLinkages([]);\r\n    }\r\n  }, [selectedCourse]);\r\n\r\n  useEffect(() => {\r\n    if (!didMountClass.current) { \r\n      didMountClass.current = true; \r\n      return; \r\n    }\r\n    if (selectedClass) {\r\n      const classId = parseInt(selectedClass);\r\n      const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\r\n      const courseId = selectedCourse ? parseInt(selectedCourse) : null;\r\n      console.log('=== CLASS CHANGE EFFECT ===');\r\n      console.log('Selected class changed:', classId);\r\n      \r\n      // Fetch subject linkages with class filter\r\n      fetchSubjectLinkages(courseTypeId, courseId, classId, null);\r\n      \r\n      // Reset exam and subject selection\r\n      setSelectedExam('');\r\n      setSelectedSubject('');\r\n    }\r\n  }, [selectedClass]);\r\n\r\n  useEffect(() => {\r\n    if (!didMountExam.current) { \r\n      didMountExam.current = true; \r\n      return; \r\n    }\r\n    if (selectedExam) {\r\n      const examId = parseInt(selectedExam);\r\n      const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\r\n      const courseId = selectedCourse ? parseInt(selectedCourse) : null;\r\n      console.log('=== EXAM CHANGE EFFECT ===');\r\n      console.log('Selected exam changed:', examId);\r\n      \r\n      // Fetch subject linkages with exam filter\r\n      fetchSubjectLinkages(courseTypeId, courseId, null, examId);\r\n      \r\n      // Reset class and subject selection\r\n      setSelectedClass('');\r\n      setSelectedSubject('');\r\n    }\r\n  }, [selectedExam]);\r\n\r\n  useEffect(() => {\r\n    if (!didMountActive.current) { \r\n      didMountActive.current = true; \r\n      return; \r\n    }\r\n    console.log('Show active only changed:', showActiveOnly);\r\n    const courseTypeId = selectedCourseType ? parseInt(selectedCourseType) : null;\r\n    const courseId = selectedCourse ? parseInt(selectedCourse) : null;\r\n    const classId = selectedClass ? parseInt(selectedClass) : null;\r\n    const examId = selectedExam ? parseInt(selectedExam) : null;\r\n    \r\n    // Refetch with new active flag\r\n    if (courseTypeId) {\r\n      fetchMasterSubjectsByCourseType(courseTypeId);\r\n    }\r\n    if (courseId) {\r\n      fetchSubjectLinkages(courseTypeId, courseId, classId, examId);\r\n    }\r\n  }, [showActiveOnly]);\r\n\r\n  // Convert filter state to the format expected by the topics API\r\n  const buildTopicsFilterParams = () => {\r\n    const filterParams = {\r\n      active: showActiveOnly\r\n    };\r\n    \r\n    if (selectedCourseType) {\r\n      filterParams.courseTypeId = parseInt(selectedCourseType);\r\n    }\r\n    \r\n    if (selectedCourse) {\r\n      filterParams.courseId = parseInt(selectedCourse);\r\n    }\r\n    \r\n    if (selectedClass) {\r\n      filterParams.classId = parseInt(selectedClass);\r\n    }\r\n    \r\n    if (selectedExam) {\r\n      filterParams.examId = parseInt(selectedExam);\r\n    }\r\n    \r\n    if (selectedSubject) {\r\n      filterParams.subjectId = parseInt(selectedSubject);\r\n    }\r\n    \r\n    return filterParams;\r\n  };\r\n\r\n  // Fetch topics with consolidated filter\r\n  const fetchTopicsData = async () => {\r\n    // Prevent duplicate calls\r\n    if (fetchTopicsInProgressRef.current) {\r\n      console.log('fetchTopicsData already in progress, skipping duplicate call');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      fetchTopicsInProgressRef.current = true;\r\n      setLoading(true);\r\n      \r\n      // Abort previous request\r\n      if (topicsAbortRef.current) {\r\n        topicsAbortRef.current.abort();\r\n      }\r\n      topicsAbortRef.current = new AbortController();\r\n      \r\n      const filterParams = buildTopicsFilterParams();\r\n      console.log('Fetching topics with params:', filterParams);\r\n      \r\n      const data = await getTopicsCombinedFilter(token, filterParams);\r\n      \r\n      console.log('Fetched topics data:', data);\r\n      setTopics(data || []);\r\n    } catch (error) {\r\n      if (error.name !== 'AbortError') {\r\n        console.error('Error fetching topics:', error);\r\n        addNotification({\r\n          type: 'error',\r\n          message: 'Failed to fetch topics',\r\n          duration: 5000\r\n        });\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n      fetchTopicsInProgressRef.current = false;\r\n    }\r\n  };\r\n\r\n  // All filter effects are now handled by the unified hook\r\n\r\n  // All filter effects are now handled by the unified hook\r\n\r\n  // All filter effects are now handled by the unified hook\r\n\r\n  // Effect for fetching topics when filters change\r\n  useEffect(() => {\r\n    console.log('🔄 Topic filters changed:', {\r\n      courseType: selectedCourseType,\r\n      course: selectedCourse,\r\n      class: selectedClass,\r\n      exam: selectedExam,\r\n      subject: selectedSubject,\r\n      showActiveOnly\r\n    });\r\n    \r\n    // Skip if this is the initial mount and no filters are set\r\n    if (isInitialMountRef.current) {\r\n      isInitialMountRef.current = false;\r\n      return;\r\n    }\r\n    \r\n    // Debounce topics fetching to avoid too many API calls\r\n    const timeoutId = setTimeout(() => {\r\n      fetchTopicsData();\r\n    }, 300); // 300ms delay\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n  }, [\r\n    selectedCourseType,\r\n    selectedCourse,\r\n    selectedClass,\r\n    selectedExam,\r\n    selectedSubject,\r\n    showActiveOnly\r\n  ]);\r\n\r\n  // All data fetching is now handled by direct service calls\r\n\r\n  // Form handlers\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    console.log('🔄 Form input change:', name, value);\r\n    \r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value\r\n    }));\r\n  };\r\n\r\n  // Form effects for dependent dropdowns (separate from filter effects)\r\n  useEffect(() => {\r\n    console.log('🔄 Form effect triggered - courseTypeId:', formData.courseType?.id);\r\n    \r\n    if (formData.courseType?.id) {\r\n      console.log('🔄 Course type selected in form, fetching courses and master subjects');\r\n      const courseTypeId = parseInt(formData.courseType.id);\r\n      fetchCoursesByCourseType(courseTypeId);\r\n      fetchMasterSubjectsByCourseType(courseTypeId);\r\n    } else {\r\n      console.log('🔄 No course type selected, clearing dependent fields');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        course: { id: '' },\r\n        class: { id: '' },\r\n        exam: { id: '' },\r\n        subjectId: ''\r\n      }));\r\n      setCourses([]);\r\n      setClasses([]);\r\n      setExams([]);\r\n      setMasterSubjects([]);\r\n    }\r\n  }, [formData.courseType?.id]);\r\n\r\n  useEffect(() => {\r\n    console.log('🔄 Form effect - courseId:', formData.course?.id);\r\n    \r\n    if (formData.course?.id && formData.courseType?.id) {\r\n      console.log('🔄 Course selected in form, fetching classes and exams');\r\n      const courseId = parseInt(formData.course.id);\r\n      const courseTypeId = parseInt(formData.courseType.id);\r\n      \r\n      // For professional courses, fetch subjects directly\r\n      if (formData.courseType?.id === '3') {\r\n        console.log('🔄 Professional course selected, fetching subjects by courseId only');\r\n        fetchSubjectLinkages(courseTypeId, courseId, null, null);\r\n      } else {\r\n        // For academic/competitive courses, fetch classes and exams\r\n        fetchClassesAndExamsByCourse(courseTypeId, courseId);\r\n      }\r\n    } else {\r\n      console.log('🔄 No course selected, clearing classes/exams/subjects');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        class: { id: '' },\r\n        exam: { id: '' },\r\n        subjectId: ''\r\n      }));\r\n      setClasses([]);\r\n      setExams([]);\r\n    }\r\n  }, [formData.course?.id, formData.courseType?.id]);\r\n\r\n  useEffect(() => {\r\n    console.log('🔄 Form effect - class/exam change triggered');\r\n    console.log('🔄 Current formData.class?.id:', formData.class?.id);\r\n    console.log('🔄 Current formData.exam?.id:', formData.exam?.id);\r\n    console.log('🔄 Current formData.courseType?.id:', formData.courseType?.id);\r\n    \r\n    const courseTypeId = formData.courseType?.id;\r\n    const isProfessionalCourse = courseTypeId === '3'; // Professional course type\r\n    \r\n    if (formData.class?.id || formData.exam?.id || isProfessionalCourse) {\r\n      console.log('🔄 Class, exam, or professional course selected in form, fetching subjects');\r\n      // Clear subject when class/exam/course changes\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        subjectId: ''\r\n      }));\r\n      \r\n      // Fetch subjects based on current selections\r\n      if (formData.courseType?.id && formData.course?.id) {\r\n        const courseTypeIdInt = parseInt(formData.courseType.id);\r\n        const courseIdInt = parseInt(formData.course.id);\r\n        \r\n        if (isProfessionalCourse) {\r\n          // For professional courses, fetch subjects by courseId only\r\n          console.log('🔄 Professional course detected, fetching subjects by courseId only:', courseIdInt);\r\n          fetchSubjectLinkages(courseTypeIdInt, courseIdInt, null, null);\r\n        } else {\r\n          // For academic/competitive courses, fetch subjects with class/exam filters\r\n          const classId = formData.class?.id ? parseInt(formData.class.id) : null;\r\n          const examId = formData.exam?.id ? parseInt(formData.exam.id) : null;\r\n          \r\n          console.log('🔄 Fetching subjects for courseTypeId:', courseTypeIdInt, 'courseId:', courseIdInt, 'classId:', classId, 'examId:', examId);\r\n          fetchSubjectLinkages(courseTypeIdInt, courseIdInt, classId, examId);\r\n        }\r\n      } else {\r\n        console.log('🔄 Missing courseType or course selection, cannot fetch subjects');\r\n      }\r\n    } else {\r\n      console.log('🔄 No class, exam, or professional course selected, clearing subjects');\r\n      setSubjectLinkages([]);\r\n    }\r\n  }, [formData.class?.id, formData.exam?.id, formData.courseType?.id]);\r\n\r\n  const handleFilterChange = (filterName, value) => {\r\n    console.log('🔄 Filter change:', filterName, value);\r\n    \r\n    switch (filterName) {\r\n      case 'courseTypeId':\r\n        console.log('🔄 Filter: Course type changed to:', value);\r\n        setSelectedCourseType(value);\r\n        break;\r\n      case 'courseId':\r\n        console.log('🔄 Filter: Course changed to:', value);\r\n        setSelectedCourse(value);\r\n        break;\r\n      case 'classId':\r\n        console.log('🔄 Filter: Class changed to:', value);\r\n        setSelectedClass(value);\r\n        break;\r\n      case 'examId':\r\n        console.log('🔄 Filter: Exam changed to:', value);\r\n        setSelectedExam(value);\r\n        break;\r\n      case 'subjectId':\r\n        console.log('🔄 Filter: Subject changed to:', value);\r\n        setSelectedSubject(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const resetFilters = () => {\r\n    setSelectedCourseType('');\r\n    setSelectedCourse('');\r\n    setSelectedClass('');\r\n    setSelectedExam('');\r\n    setSelectedSubject('');\r\n    setFilteredCourses([]);\r\n    setFilteredClasses([]);\r\n    setFilteredExams([]);\r\n    setMasterSubjects([]);\r\n    setSubjectLinkages([]);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      description: '',\r\n      displayOrder: '',\r\n      isActive: true,\r\n      courseType: { id: '' },\r\n      course: { id: '' },\r\n      class: { id: '' },\r\n      exam: { id: '' },\r\n      subjectId: ''\r\n    });\r\n    setShowForm(false);\r\n    setEditingId(null);\r\n    // Clear form dropdown data\r\n    setCourses([]);\r\n    setClasses([]);\r\n    setExams([]);\r\n    setMasterSubjects([]);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log('=== TOPIC FORM SUBMISSION STARTED ===');\r\n    console.log('Form data:', formData);\r\n    \r\n    try {\r\n      setLoading(true);\r\n      \r\n      if (editingId) {\r\n        // Update existing topic\r\n        const updateData = {\r\n          name: formData.name.trim(),\r\n          description: formData.description ? formData.description.trim() : '',\r\n          displayOrder: formData.displayOrder ? parseInt(formData.displayOrder) : 0,\r\n          isActive: formData.isActive\r\n        };\r\n        \r\n        await updateTopic(token, editingId, updateData);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Topic updated successfully',\r\n          duration: 3000\r\n        });\r\n      } else {\r\n        // Create new topic\r\n        const courseTypeId = parseInt(formData.courseType?.id);\r\n        const relationshipId = parseInt(formData.subjectId); // This is now linkageId\r\n        \r\n        const submitData = {\r\n          name: formData.name.trim(),\r\n          description: formData.description ? formData.description.trim() : '',\r\n          courseTypeId: courseTypeId,\r\n          relationshipId: relationshipId, // This is linkageId from the dropdown\r\n          displayOrder: formData.displayOrder ? parseInt(formData.displayOrder) : 0,\r\n          isActive: formData.isActive\r\n        };\r\n        \r\n        await createTopic(token, submitData);\r\n        addNotification({\r\n          type: 'success',\r\n          message: 'Topic created successfully',\r\n          duration: 3000\r\n        });\r\n      }\r\n      \r\n      resetForm();\r\n      fetchTopicsData(); // Refresh topics list\r\n    } catch (error) {\r\n      console.error('Error saving topic:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to save topic',\r\n        duration: 5000\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (topic) => {\r\n    setFormData({\r\n      name: topic.name,\r\n      description: topic.description || '',\r\n      displayOrder: topic.displayOrder || '',\r\n      isActive: topic.isActive,\r\n      courseType: { id: topic.subject?.course?.courseType?.id || '' },\r\n      course: { id: topic.subject?.course?.id || '' },\r\n      class: { id: '' },\r\n      exam: { id: '' },\r\n      subjectId: topic.subject?.linkageId || topic.subject?.id || '' // Use linkageId if available\r\n    });\r\n    setEditingId(topic.id);\r\n    setShowForm(true);\r\n  };\r\n\r\n  const handleDelete = async (topicId) => {\r\n    if (!window.confirm('Are you sure you want to delete this topic?')) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await deleteTopic(token, topicId);\r\n      addNotification({\r\n        type: 'success',\r\n        message: 'Topic deleted successfully',\r\n        duration: 3000\r\n      });\r\n      \r\n      fetchTopicsData(); // Refresh topics list\r\n    } catch (error) {\r\n      console.error('Error deleting topic:', error);\r\n      addNotification({\r\n        type: 'error',\r\n        message: 'Failed to delete topic',\r\n        duration: 5000\r\n      });\r\n    }\r\n  };\r\n\r\n  const clearAllFilters = () => {\r\n    resetFilters();\r\n  };\r\n\r\n  return (\r\n    <div className=\"master-data-component\">\r\n      <div className=\"component-header\">\r\n        <div className=\"header-info\">\r\n          <h2>Topic Management</h2>\r\n          <p>Manage topics with optimized filtering and shared cache</p>\r\n        </div>\r\n        \r\n        <div className=\"header-actions\">\r\n          <button \r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              resetForm();\r\n              setShowForm(true);\r\n            }}\r\n            disabled={loading}\r\n          >\r\n            Add Topic\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Optimized Filters using shared hook */}\r\n      <div className=\"filter-section\">\r\n        <div className=\"filter-header\">\r\n          <h4>Filter Topics</h4>\r\n          <div className=\"filter-header-controls\">\r\n            <button \r\n              className=\"btn btn-outline btn-xs\"\r\n              onClick={clearAllFilters}\r\n            >\r\n              Clear All Filters\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"filter-row\">\r\n          {/* Course Type Filter */}\r\n          <div className=\"filter-group\">\r\n            <label htmlFor=\"course-type-filter\">1. Course Type:</label>\r\n            <select\r\n              id=\"course-type-filter\"\r\n              value={selectedCourseType}\r\n              onChange={(e) => handleFilterChange('courseTypeId', e.target.value)}\r\n              className=\"filter-select\"\r\n            >\r\n              <option value=\"\">Select Course Type</option>\r\n              {courseTypes && courseTypes.length > 0 ? courseTypes.map(courseType => (\r\n                <option key={courseType.id} value={courseType.id}>\r\n                  {courseType.name}\r\n                </option>\r\n              )) : <option value=\"\" disabled>No course types available</option>}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Course Filter */}\r\n          <div className=\"filter-group\">\r\n            <label htmlFor=\"course-filter\">2. Course:</label>\r\n            <select\r\n              id=\"course-filter\"\r\n              value={selectedCourse}\r\n              onChange={(e) => handleFilterChange('courseId', e.target.value)}\r\n              className=\"filter-select\"\r\n              disabled={!selectedCourseType || loadingStates.courses}\r\n            >\r\n              <option value=\"\">Select Course</option>\r\n              {filteredCourses && filteredCourses.length > 0 ? filteredCourses.map(course => (\r\n                <option key={course.id} value={course.id}>\r\n                  {course.name}\r\n                </option>\r\n              )) : <option value=\"\" disabled>No courses available</option>}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Class Filter (Academic only) */}\r\n          {isAcademicCourseType(selectedCourseType) && (\r\n            <div className=\"filter-group\">\r\n              <label htmlFor=\"class-filter\">3. Class:</label>\r\n              <select\r\n                id=\"class-filter\"\r\n                value={selectedClass}\r\n                onChange={(e) => handleFilterChange('classId', e.target.value)}\r\n                className=\"filter-select\"\r\n                disabled={!selectedCourse || loadingStates.classes}\r\n              >\r\n                <option value=\"\">Select Class</option>\r\n                  {filteredClasses && filteredClasses.length > 0 ? filteredClasses.map(classItem => (\r\n                  <option key={classItem.id} value={classItem.id}>\r\n                    {classItem.name}\r\n                  </option>\r\n                  )) : <option value=\"\" disabled>No classes available</option>}\r\n              </select>\r\n            </div>\r\n          )}\r\n\r\n          {/* Exam Filter (Competitive only) */}\r\n          {isCompetitiveCourseType(selectedCourseType) && (\r\n            <div className=\"filter-group\">\r\n              <label htmlFor=\"exam-filter\">3. Exam:</label>\r\n              <select\r\n                id=\"exam-filter\"\r\n                value={selectedExam}\r\n                onChange={(e) => handleFilterChange('examId', e.target.value)}\r\n                className=\"filter-select\"\r\n                disabled={!selectedCourse || loadingStates.exams}\r\n              >\r\n                <option value=\"\">Select Exam</option>\r\n                  {filteredExams && filteredExams.length > 0 ? filteredExams.map(exam => (\r\n                  <option key={exam.id} value={exam.id}>\r\n                    {exam.name}\r\n                  </option>\r\n                  )) : <option value=\"\" disabled>No exams available</option>}\r\n              </select>\r\n            </div>\r\n          )}\r\n\r\n          {/* Subject Filter */}\r\n          <div className=\"filter-group\">\r\n            <label htmlFor=\"subject-filter\">4. Subject:</label>\r\n            <select\r\n              id=\"subject-filter\"\r\n              value={selectedSubject}\r\n              onChange={(e) => handleFilterChange('subjectId', e.target.value)}\r\n              className=\"filter-select\"\r\n              disabled={!selectedCourse || loadingStates.subjects}\r\n            >\r\n              <option value=\"\">Select Subject</option>\r\n              {subjectLinkages && subjectLinkages.length > 0 ? subjectLinkages.map(subject => (\r\n                <option key={subject.linkageId} value={subject.linkageId}>\r\n                  {subject.subjectName || subject.name}\r\n                </option>\r\n              )) : <option value=\"\" disabled>No subjects available</option>}\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Active Filters Summary */}\r\n        {(selectedCourseType || selectedCourse || selectedClass || selectedExam || selectedSubject) && (\r\n          <div className=\"active-filters\">\r\n            <strong>Active Filters:</strong>\r\n            {selectedCourseType && (\r\n              <span className=\"filter-tag\">\r\n                Course Type: {courseTypes.find(ct => ct.id === parseInt(selectedCourseType))?.name}\r\n              </span>\r\n            )}\r\n            {selectedCourse && (\r\n              <span className=\"filter-tag\">\r\n                Course: {filteredCourses.find(c => c.id === parseInt(selectedCourse))?.name}\r\n              </span>\r\n            )}\r\n            {selectedClass && (\r\n              <span className=\"filter-tag\">\r\n                Class: {filteredClasses.find(c => c.id === parseInt(selectedClass))?.name}\r\n              </span>\r\n            )}\r\n            {selectedExam && (\r\n              <span className=\"filter-tag\">\r\n                Exam: {filteredExams.find(e => e.id === parseInt(selectedExam))?.name}\r\n              </span>\r\n            )}\r\n            {selectedSubject && (\r\n              <span className=\"filter-tag\">\r\n                Subject: {subjectLinkages.find(s => s.id === parseInt(selectedSubject))?.subjectName || subjectLinkages.find(s => s.id === parseInt(selectedSubject))?.name}\r\n              </span>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {showForm && (\r\n        <div className=\"form-section\">\r\n          <div className=\"form-header\">\r\n            <h3>{editingId ? 'Edit Topic' : 'Add New Topic'}</h3>\r\n            <button className=\"btn btn-outline btn-sm\" onClick={resetForm}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          \r\n          <form onSubmit={handleSubmit} className=\"master-data-form\">\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"name\">Topic Name *</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  value={formData.name}\r\n                  onChange={handleInputChange}\r\n                  className=\"form-input\"\r\n                  required\r\n                  placeholder=\"e.g., Algebra Basics, Quantitative Aptitude\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"displayOrder\">Display Order</label>\r\n                <input\r\n                  type=\"number\"\r\n                  id=\"displayOrder\"\r\n                  name=\"displayOrder\"\r\n                  value={formData.displayOrder}\r\n                  onChange={handleInputChange}\r\n                  className=\"form-input\"\r\n                  min=\"0\"\r\n                  placeholder=\"0\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"form-row\">\r\n              <div className=\"form-group full-width\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <textarea\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  value={formData.description}\r\n                  onChange={handleInputChange}\r\n                  className=\"form-input\"\r\n                  rows={3}\r\n                  placeholder=\"Describe the topic content and scope\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"courseTypeId\">Course Type *</label>\r\n                <select\r\n                  id=\"courseType\"\r\n                  name=\"courseType\"\r\n                  value={formData.courseType?.id || ''}\r\n                  onChange={(e) => setFormData({ ...formData, courseType: { id: e.target.value } })}\r\n                  className=\"form-input\"\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Course Type</option>\r\n                  {courseTypes && courseTypes.length > 0 ? courseTypes.map(courseType => (\r\n                    <option key={courseType.id} value={courseType.id}>\r\n                      {courseType.name}\r\n                    </option>\r\n                  )) : <option value=\"\" disabled>No course types available</option>}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"course\">Course *</label>\r\n                <select\r\n                  id=\"course\"\r\n                  name=\"course\"\r\n                  value={formData.course?.id || ''}\r\n                  onChange={(e) => setFormData({ ...formData, course: { id: e.target.value } })}\r\n                  className=\"form-input\"\r\n                  required\r\n                  disabled={!formData.courseType?.id}\r\n                >\r\n                  <option value=\"\">\r\n                    {!formData.courseType?.id ? 'Select Course Type first' :\r\n                     loadingStates.courses ? 'Loading courses...' :\r\n                     'Select Course'}\r\n                  </option>\r\n                  {courses && courses.length > 0 ? courses.map(course => (\r\n                    <option key={course.id} value={course.id}>\r\n                      {course.name}\r\n                    </option>\r\n                  )) : <option value=\"\" disabled>No courses available</option>}\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Class/Exam Selection - Conditional based on Course Type */}\r\n            {(isAcademicCourseType(formData.courseType?.id) || isCompetitiveCourseType(formData.courseType?.id)) && (\r\n              <div className=\"form-row\">\r\n                {/* Class Selection - Only for Academic Course Types */}\r\n                {isAcademicCourseType(formData.courseType?.id) && (\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"class\">Class *</label>\r\n                    <select\r\n                      id=\"class\"\r\n                      name=\"class\"\r\n                      value={formData.class?.id || ''}\r\n                      onChange={(e) => setFormData({ ...formData, class: { id: e.target.value } })}\r\n                      className=\"form-input\"\r\n                      required\r\n                      disabled={!formData.course?.id || loadingStates.classes}\r\n                    >\r\n                      <option value=\"\">\r\n                        {!formData.course?.id ? 'Select Course first' :\r\n                         loadingStates.classes ? 'Loading classes...' :\r\n                         'Select Class'}\r\n                      </option>\r\n                      {classes && classes.length > 0 ? classes.map(classItem => (\r\n                        <option key={classItem.id} value={classItem.id}>\r\n                          {classItem.name}\r\n                        </option>\r\n                      )) : <option value=\"\" disabled>No classes available</option>}\r\n                    </select>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Exam Selection - Only for Competitive Course Types */}\r\n                {isCompetitiveCourseType(formData.courseType?.id) && (\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"exam\">Exam *</label>\r\n                    <select\r\n                      id=\"exam\"\r\n                      name=\"exam\"\r\n                      value={formData.exam?.id || ''}\r\n                      onChange={(e) => setFormData({ ...formData, exam: { id: e.target.value } })}\r\n                      className=\"form-input\"\r\n                      required\r\n                      disabled={!formData.course?.id || loadingStates.exams}\r\n                    >\r\n                      <option value=\"\">\r\n                        {!formData.course?.id ? 'Select Course first' :\r\n                         loadingStates.exams ? 'Loading exams...' :\r\n                         'Select Exam'}\r\n                      </option>\r\n                      {exams && exams.length > 0 ? exams.map(exam => (\r\n                        <option key={exam.id} value={exam.id}>\r\n                          {exam.name}\r\n                        </option>\r\n                      )) : <option value=\"\" disabled>No exams available</option>}\r\n                    </select>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"subjectId\">Subject *</label>\r\n                <select\r\n                  id=\"subjectId\"\r\n                  name=\"subjectId\"\r\n                  value={formData.subjectId}\r\n                  onChange={handleInputChange}\r\n                  className=\"form-input\"\r\n                  required\r\n                  disabled={\r\n                    !formData.course?.id || \r\n                    (isAcademicCourseType(formData.courseType?.id) && !formData.class?.id) ||\r\n                    (isCompetitiveCourseType(formData.courseType?.id) && !formData.exam?.id)\r\n                    // Professional courses (courseTypeId === '3') are enabled when course is selected\r\n                  }\r\n                >\r\n                  <option value=\"\">\r\n                    {!formData.course?.id ? 'Select Course first' :\r\n                     (isAcademicCourseType(formData.courseType?.id) && !formData.class?.id) ? 'Select Class first' :\r\n                     (isCompetitiveCourseType(formData.courseType?.id) && !formData.exam?.id) ? 'Select Exam first' :\r\n                     (formData.courseType?.id === '3') ? 'Professional course - Select Subject' :\r\n                     'Select Subject'}\r\n                  </option>\r\n                  {subjectLinkages && subjectLinkages.length > 0 ? subjectLinkages.map(subject => (\r\n                    <option key={subject.linkageId} value={subject.linkageId}>\r\n                      {subject.subjectName || subject.name}\r\n                    </option>\r\n                  )) : <option value=\"\" disabled>No subjects available</option>}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          \r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label className=\"checkbox-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"isActive\"\r\n                    checked={formData.isActive}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <span>Active</span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"form-actions\">\r\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\r\n                {loading ? 'Saving...' : (editingId ? 'Update Topic' : 'Create Topic')}\r\n              </button>\r\n              <button type=\"button\" className=\"btn btn-outline\" onClick={resetForm}>\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"data-section\">\r\n        <div className=\"data-header\">\r\n          <h3>Topics ({topics.length})</h3>\r\n          <div className=\"data-actions\">\r\n            <button \r\n              className=\"btn btn-outline btn-sm\"\r\n              onClick={() => {\r\n                fetchTopicsData();\r\n              }}\r\n              disabled={loading}\r\n            >\r\n              Refresh\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {loading ? (\r\n          <div className=\"loading-state\">\r\n            <div className=\"spinner\"></div>\r\n            <p>Loading topics...</p>\r\n          </div>\r\n        ) : topics.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <div className=\"empty-icon\">No Topics</div>\r\n            <h4>No Topics Found</h4>\r\n            <p>No topics match your current filters. Try adjusting your filter criteria or create a new topic.</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"topics-container\">\r\n            {(() => {\r\n              // Group topics by course type\r\n              const academicTopics = topics.filter(topic => {\r\n                const courseTypeId = topic.courseTypeId \r\n                  || topic.subject?.course?.courseType?.id \r\n                  || topic.classSubject?.class?.course?.courseType?.id \r\n                  || topic.examSubject?.exam?.course?.courseType?.id \r\n                  || topic.courseSubject?.course?.courseType?.id;\r\n                return courseTypeId === 1 || courseTypeId === '1';\r\n              });\r\n\r\n              const competitiveTopics = topics.filter(topic => {\r\n                const courseTypeId = topic.courseTypeId \r\n                  || topic.subject?.course?.courseType?.id \r\n                  || topic.classSubject?.class?.course?.courseType?.id \r\n                  || topic.examSubject?.exam?.course?.courseType?.id \r\n                  || topic.courseSubject?.course?.courseType?.id;\r\n                return courseTypeId === 2 || courseTypeId === '2';\r\n              });\r\n\r\n              const professionalTopics = topics.filter(topic => {\r\n                const courseTypeId = topic.courseTypeId \r\n                  || topic.subject?.course?.courseType?.id \r\n                  || topic.classSubject?.class?.course?.courseType?.id \r\n                  || topic.examSubject?.exam?.course?.courseType?.id \r\n                  || topic.courseSubject?.course?.courseType?.id;\r\n                return courseTypeId === 3 || courseTypeId === '3';\r\n              });\r\n\r\n              // Topic field configuration with complex fallback logic\r\n              const topicFields = [\r\n                { \r\n                  key: 'courseTypeName', \r\n                  label: 'Course Type',\r\n                  value: (item) => item.courseTypeName \r\n                    || item.subject?.course?.courseType?.name \r\n                    || item.classSubject?.class?.course?.courseType?.name \r\n                    || item.examSubject?.exam?.course?.courseType?.name \r\n                    || item.courseSubject?.course?.courseType?.name\r\n                },\r\n                { \r\n                  key: 'courseName', \r\n                  label: 'Course',\r\n                  value: (item) => item.courseName \r\n                    || item.subject?.course?.name \r\n                    || item.classSubject?.class?.course?.name \r\n                    || item.examSubject?.exam?.course?.name \r\n                    || item.courseSubject?.course?.name\r\n                },\r\n                { \r\n                  key: 'className', \r\n                  label: 'Class',\r\n                  value: (item) => item.className || item.classSubject?.class?.name,\r\n                  condition: (item) => (item.className || item.classSubject?.class?.name)\r\n                },\r\n                { \r\n                  key: 'examName', \r\n                  label: 'Exam',\r\n                  value: (item) => item.examName || item.examSubject?.exam?.name,\r\n                  condition: (item) => (item.examName || item.examSubject?.exam?.name) && !(item.className || item.classSubject?.class?.name)\r\n                },\r\n                { \r\n                  key: 'subjectName', \r\n                  label: 'Subject',\r\n                  value: (item) => item.subjectName \r\n                    || item.subject?.name \r\n                    || item.classSubject?.subject?.name \r\n                    || item.examSubject?.subject?.name \r\n                    || item.courseSubject?.subject?.name\r\n                }\r\n              ];\r\n\r\n              const renderTopicCard = (topic) => (\r\n                <DataCard\r\n                  key={topic.id}\r\n                  item={topic}\r\n                  itemType=\"topic\"\r\n                  onEdit={handleEdit}\r\n                  onDelete={handleDelete}\r\n                  fields={topicFields}\r\n                />\r\n              );\r\n\r\n              return (\r\n                <>\r\n                  {/* Academic Topics Section */}\r\n                  {academicTopics.length > 0 && (\r\n                    <div className=\"topic-section\">\r\n                      <div className=\"section-header\">\r\n                        <h3>Academic Course Topics</h3>\r\n                        <span className=\"section-count\">({academicTopics.length} topics)</span>\r\n                      </div>\r\n                      <div className=\"data-grid\">\r\n                        {academicTopics.map(renderTopicCard)}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Competitive Topics Section */}\r\n                  {competitiveTopics.length > 0 && (\r\n                    <div className=\"topic-section\">\r\n                      <div className=\"section-header\">\r\n                        <h3>Competitive Course Topics</h3>\r\n                        <span className=\"section-count\">({competitiveTopics.length} topics)</span>\r\n                      </div>\r\n                      <div className=\"data-grid\">\r\n                        {competitiveTopics.map(renderTopicCard)}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Professional Topics Section */}\r\n                  {professionalTopics.length > 0 && (\r\n                    <div className=\"topic-section\">\r\n                      <div className=\"section-header\">\r\n                        <h3>Professional Course Topics</h3>\r\n                        <span className=\"section-count\">({professionalTopics.length} topics)</span>\r\n                      </div>\r\n                      <div className=\"data-grid\">\r\n                        {professionalTopics.map(renderTopicCard)}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* No topics in any section */}\r\n                  {academicTopics.length === 0 && competitiveTopics.length === 0 && professionalTopics.length === 0 && (\r\n                    <div className=\"empty-state\">\r\n                      <div className=\"empty-icon\">No Topics</div>\r\n                      <h4>No Topics Found</h4>\r\n                      <p>No topics match your current filters. Try adjusting your filter criteria or create a new topic.</p>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              );\r\n            })()}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopicManagement;"],"names":["DataCard","_ref","item","itemType","onEdit","onDelete","fields","badges","getItemDescription","description","getCreatedBy","createdByName","_jsxs","className","children","_jsx","getItemName","subjectName","name","topicName","concat","isActive","map","badge","key","label","value","condition","style","icon","badgeValue","onClick","handleEdit","handleDelete","id","field","fieldValue","Date","createdAt","toLocaleDateString","TopicManagement","_formData$courseType3","_formData$course3","_formData$courseType6","_formData$class4","_formData$exam4","_formData$courseType0","_courseTypes$find","_filteredCourses$find","_filteredClasses$find","_filteredExams$find","_subjectLinkages$find","_subjectLinkages$find2","_formData$courseType10","_formData$course5","_formData$courseType11","_formData$courseType12","_formData$courseType13","_formData$courseType14","_formData$courseType15","_formData$class5","_formData$course6","_formData$course7","_formData$courseType16","_formData$exam5","_formData$course8","_formData$course9","_formData$course0","_formData$courseType17","_formData$class6","_formData$courseType18","_formData$exam6","_formData$course1","_formData$courseType19","_formData$class7","_formData$courseType20","_formData$exam7","_formData$courseType21","token","addNotification","useApp","topics","setTopics","useState","courseTypes","setCourseTypes","loading","setLoading","showForm","setShowForm","editingId","setEditingId","selectedCourseType","setSelectedCourseType","selectedCourse","setSelectedCourse","selectedClass","setSelectedClass","selectedExam","setSelectedExam","selectedSubject","setSelectedSubject","showActiveOnly","setShowActiveOnly","formData","setFormData","displayOrder","courseType","course","class","exam","subjectId","courses","setCourses","classes","setClasses","exams","setExams","filteredCourses","setFilteredCourses","filteredClasses","setFilteredClasses","filteredExams","setFilteredExams","masterSubjects","setMasterSubjects","subjectLinkages","setSubjectLinkages","loadingStates","setLoadingStates","isInitialMountRef","useRef","fetchTopicsInProgressRef","topicsAbortRef","courseTypesAbortRef","courseTypesCacheRef","data","ts","didMountCourseType","didMountCourse","didMountClass","didMountExam","didMountActive","useEffect","current","abort","_","hasInitialFetchRef","fetchData","isAcademicCourseType","courseTypeId","find","ct","parseInt","toLowerCase","includes","isCompetitiveCourseType","async","courseTypesData","now","AbortController","getCourseTypesCached","console","log","courseTypesArray","Array","isArray","content","warn","error","type","message","duration","fetchCoursesByCourseType","prev","_objectSpread","getCourses","coursesArray","fetchClassesAndExamsByCourse","courseId","classesData","examsData","Promise","all","getClassesByCourse","getExamsByCourse","classesArray","examsArray","fetchMasterSubjectsByCourseType","getMasterSubjectsByCourseType","active","subjectsArray","fetchSubjectLinkages","classId","examId","getAllSubjectLinkages","fetchTopicsData","filterParams","buildTopicsFilterParams","getTopicsCombinedFilter","subject","timeoutId","setTimeout","clearTimeout","handleInputChange","e","checked","target","_formData$courseType","_formData$courseType2","_formData$course","_formData$course2","_formData$courseType4","_formData$courseType5","_formData$class","_formData$exam","_formData$courseType7","_formData$courseType8","_formData$class2","_formData$exam2","isProfessionalCourse","_formData$courseType9","_formData$course4","courseTypeIdInt","courseIdInt","_formData$class3","_formData$exam3","handleFilterChange","filterName","resetForm","topic","_topic$subject","_topic$subject$course","_topic$subject$course2","_topic$subject2","_topic$subject2$cours","_topic$subject3","_topic$subject4","linkageId","window","confirm","deleteTopic","topicId","disabled","clearAllFilters","htmlFor","onChange","length","classItem","subjects","c","s","onSubmit","preventDefault","updateData","trim","updateTopic","_formData$courseType1","relationshipId","submitData","createTopic","required","placeholder","min","rows","academicTopics","filter","_topic$subject5","_topic$subject5$cours","_topic$subject5$cours2","_topic$classSubject","_topic$classSubject$c","_topic$classSubject$c2","_topic$classSubject$c3","_topic$examSubject","_topic$examSubject$ex","_topic$examSubject$ex2","_topic$examSubject$ex3","_topic$courseSubject","_topic$courseSubject$","_topic$courseSubject$2","classSubject","examSubject","courseSubject","competitiveTopics","_topic$subject6","_topic$subject6$cours","_topic$subject6$cours2","_topic$classSubject2","_topic$classSubject2$","_topic$classSubject2$2","_topic$classSubject2$3","_topic$examSubject2","_topic$examSubject2$e","_topic$examSubject2$e2","_topic$examSubject2$e3","_topic$courseSubject2","_topic$courseSubject3","_topic$courseSubject4","professionalTopics","_topic$subject7","_topic$subject7$cours","_topic$subject7$cours2","_topic$classSubject3","_topic$classSubject3$","_topic$classSubject3$2","_topic$classSubject3$3","_topic$examSubject3","_topic$examSubject3$e","_topic$examSubject3$e2","_topic$examSubject3$e3","_topic$courseSubject5","_topic$courseSubject6","_topic$courseSubject7","topicFields","_item$subject","_item$subject$course","_item$subject$course$","_item$classSubject","_item$classSubject$cl","_item$classSubject$cl2","_item$classSubject$cl3","_item$examSubject","_item$examSubject$exa","_item$examSubject$exa2","_item$examSubject$exa3","_item$courseSubject","_item$courseSubject$c","_item$courseSubject$c2","courseTypeName","_item$subject2","_item$subject2$course","_item$classSubject2","_item$classSubject2$c","_item$classSubject2$c2","_item$examSubject2","_item$examSubject2$ex","_item$examSubject2$ex2","_item$courseSubject2","_item$courseSubject2$","courseName","_item$classSubject3","_item$classSubject3$c","_item$classSubject4","_item$classSubject4$c","_item$examSubject3","_item$examSubject3$ex","examName","_item$examSubject4","_item$examSubject4$ex","_item$classSubject5","_item$classSubject5$c","_item$subject3","_item$classSubject6","_item$classSubject6$s","_item$examSubject5","_item$examSubject5$su","_item$courseSubject3","_item$courseSubject3$","renderTopicCard","_Fragment"],"sourceRoot":""}